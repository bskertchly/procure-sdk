// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ResourceManagement.Rest.V10.Resources.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\resources\{id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ResourcesItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResourcesItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/resources/{id}?project_id={project_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResourcesItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/resources/{id}?project_id={project_id}", rawUrl)
        {
        }
        /// <summary>
        /// Delete the specified Resource. Note that when a resource is deleted, any assignments to tasks will also be removed.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> DeleteAsync(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder.ResourcesItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> DeleteAsync(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder.ResourcesItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Show detail on the specified Resource.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder.ResourcesItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder.ResourcesItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesGetResponse>(requestInfo, global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the specified Resource.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchResponse?> PatchAsync(global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchResponse> PatchAsync(global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.Resources5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchResponse>(requestInfo, global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete the specified Resource. Note that when a resource is deleted, any assignments to tasks will also be removed.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder.ResourcesItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder.ResourcesItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Show detail on the specified Resource.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder.ResourcesItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder.ResourcesItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the specified Resource.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, "{+baseurl}/rest/v1.0/resources/{id}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ResourceManagement.Rest.V10.Resources.Item.ResourcesItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Delete the specified Resource. Note that when a resource is deleted, any assignments to tasks will also be removed.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResourcesItemRequestBuilderDeleteQueryParameters 
        {
            /// <summary>Unique identifier for the project.</summary>
            [QueryParameter("project_id")]
            public int? ProjectId { get; set; }
        }
        /// <summary>
        /// Show detail on the specified Resource.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResourcesItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Unique identifier for the project.</summary>
            [QueryParameter("project_id")]
            public int? ProjectId { get; set; }
        }
    }
}
#pragma warning restore CS0618
