// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\workforce-planning\v2\companies\{company_id}\assignments\current
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CurrentRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CurrentRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/workforce-planning/v2/companies/{company_id}/assignments/current{?page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CurrentRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/workforce-planning/v2/companies/{company_id}/assignments/current{?page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all of the current Resource Planning Assignment data for the given company
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder.CurrentRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder.CurrentRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current404Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current>(requestInfo, global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.Current.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns all of the current Resource Planning Assignment data for the given company
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder.CurrentRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder.CurrentRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ResourceManagement.Rest.V10.WorkforcePlanning.V2.Companies.Item.Assignments.Current.CurrentRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all of the current Resource Planning Assignment data for the given company
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CurrentRequestBuilderGetQueryParameters 
        {
            /// <summary>This is a **0-based index** representing the page slice of the data you want to retrieve. Each page contains up to **400 items**.### **ðŸ“Œ Pageable Endpoints** People endpoints that return multiple records **support pagination**. It is recommended to use this feature to prevent network timeouts from excessively large data requests.### **ðŸ“Œ Response Structure** A successful response will include the following properties:- **`possible_pages`** *(integer)* â†’ Total number of pages available to retrieve all data. - **`current_page`** *(integer)* â†’ The **0-based index** of the page retrieved. - **`data`** *(array)* â†’ List of records returned for the requested page (up to 400 items per page).If a **page value exceeds** `possible_pages`, the `data` property will return an **empty array**.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
        }
    }
}
#pragma warning restore CS0618
