// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.1\companies\{company_id}\custom_field_definitions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Custom_field_definitionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Custom_field_definitionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/companies/{company_id}/custom_field_definitions{?filters%5Bid%5D*,filters%5Bwith_label%5D*,includes_configurable_field_sets_count*,page*,per_page*,sort*,tool_name*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Custom_field_definitionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/companies/{company_id}/custom_field_definitions{?filters%5Bid%5D*,filters%5Bwith_label%5D*,includes_configurable_field_sets_count*,page*,per_page*,sort*,tool_name*}", rawUrl)
        {
        }
        /// <summary>
        /// Return a list of Custom Field Definitions for a given company.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder.Custom_field_definitionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder.Custom_field_definitionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions>(requestInfo, global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitions.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Return a list of Custom Field Definitions for a given company.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder.Custom_field_definitionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder.Custom_field_definitionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.Custom_field_definitionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Return a list of Custom Field Definitions for a given company.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Custom_field_definitionsRequestBuilderGetQueryParameters 
        {
            /// <summary>return custom field definitions that are filtered on an array of ID&apos;s. Example: filters[id]=[1,2]</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Return custom field definitions that label contains text</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bwith_label%5D")]
            public string? FilterswithLabel { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bwith_label%5D")]
            public string FilterswithLabel { get; set; }
#endif
            /// <summary>If true, response will include the number of field sets using item (custom field).</summary>
            [QueryParameter("includes_configurable_field_sets_count")]
            public bool? IncludesConfigurableFieldSetsCount { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Items per page, default: 100, max: 100</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Direction (asc/desc) can be controlled by the presence or absence of &apos;-&apos; before the sort parameter.</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.GetSortQueryParameterType? Sort { get; set; }
            /// <summary>The name of the company/project level tool that is allowed read permissions to custom field definitions.</summary>
            [QueryParameter("tool_name")]
            public global::Procore.SDK.Core.Rest.V11.Companies.Item.Custom_field_definitions.GetTool_nameQueryParameterType? ToolName { get; set; }
        }
    }
}
#pragma warning restore CS0618
