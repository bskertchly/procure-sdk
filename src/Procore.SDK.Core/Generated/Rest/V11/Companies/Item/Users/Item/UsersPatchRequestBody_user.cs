// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V11.Companies.Item.Users.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UsersPatchRequestBody_user : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Address of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>Whether or not this user is added to all new projects. Requests including this parameter will be rejected unless the requesting user has Directory Admin permissions</summary>
        public bool? AddToNewProjects { get; set; }
        /// <summary>The Avatar of the Company User.To upload avatar you must upload whole payload as `multipart/form-data` content-type andspecify each parameter as form-data together with `user[avatar]` as file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Avatar { get; set; }
#nullable restore
#else
        public string Avatar { get; set; }
#endif
        /// <summary>The Business Phone of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessPhone { get; set; }
#nullable restore
#else
        public string BusinessPhone { get; set; }
#endif
        /// <summary>The Business Phone Extension of the Company User</summary>
        public int? BusinessPhoneExtension { get; set; }
        /// <summary>The City of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>The ID of the Company Permission Template for the Company User. Requests including this parameter will be rejected unless the requesting user has Directory Admin permissions</summary>
        public int? CompanyPermissionTemplateId { get; set; }
        /// <summary>The Country Code of the Company User (ISO-3166 Alpha-2 format)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>The ID of the default Permission Template for the Company User. Requests including this parameter will be rejected unless the requesting user has Directory Admin permissions</summary>
        public int? DefaultPermissionTemplateId { get; set; }
        /// <summary>The Email Address of the Company User. Update requests including this parameter will be rejected unless the requesting user has Directory Admin permissions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress { get; set; }
#nullable restore
#else
        public string EmailAddress { get; set; }
#endif
        /// <summary>The Email Signature of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailSignature { get; set; }
#nullable restore
#else
        public string EmailSignature { get; set; }
#endif
        /// <summary>The ID of the Employee of the Company User when `user[is_employee]` is set to `true`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmployeeId { get; set; }
#nullable restore
#else
        public string EmployeeId { get; set; }
#endif
        /// <summary>The Fax Number of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FaxNumber { get; set; }
#nullable restore
#else
        public string FaxNumber { get; set; }
#endif
        /// <summary>The First Name of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The Initials of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Initials { get; set; }
#nullable restore
#else
        public string Initials { get; set; }
#endif
        /// <summary>The Active status of the Company User</summary>
        public bool? IsActive { get; set; }
        /// <summary>The Employee status of the Company User</summary>
        public bool? IsEmployee { get; set; }
        /// <summary>The Job Title of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobTitle { get; set; }
#nullable restore
#else
        public string JobTitle { get; set; }
#endif
        /// <summary>The Last Name of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>The Mobile Phone of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone { get; set; }
#nullable restore
#else
        public string MobilePhone { get; set; }
#endif
        /// <summary>The Notes (notes, keywords, tags) of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>The Origin Data of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginData { get; set; }
#nullable restore
#else
        public string OriginData { get; set; }
#endif
        /// <summary>The Origin ID of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginId { get; set; }
#nullable restore
#else
        public string OriginId { get; set; }
#endif
        /// <summary>The State Code of the Company User (ISO-3166 Alpha-2 format)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateCode { get; set; }
#nullable restore
#else
        public string StateCode { get; set; }
#endif
        /// <summary>The ID of the Vendor of the Company User</summary>
        public int? VendorId { get; set; }
        /// <summary>The ID of the Work Classification for the Company User</summary>
        public int? WorkClassificationId { get; set; }
        /// <summary>The Zip code of the Company User</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zip { get; set; }
#nullable restore
#else
        public string Zip { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Users.Item.UsersPatchRequestBody_user"/> and sets the default values.
        /// </summary>
        public UsersPatchRequestBody_user()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Users.Item.UsersPatchRequestBody_user"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V11.Companies.Item.Users.Item.UsersPatchRequestBody_user CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V11.Companies.Item.Users.Item.UsersPatchRequestBody_user();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "add_to_new_projects", n => { AddToNewProjects = n.GetBoolValue(); } },
                { "address", n => { Address = n.GetStringValue(); } },
                { "avatar", n => { Avatar = n.GetStringValue(); } },
                { "business_phone", n => { BusinessPhone = n.GetStringValue(); } },
                { "business_phone_extension", n => { BusinessPhoneExtension = n.GetIntValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "company_permission_template_id", n => { CompanyPermissionTemplateId = n.GetIntValue(); } },
                { "country_code", n => { CountryCode = n.GetStringValue(); } },
                { "default_permission_template_id", n => { DefaultPermissionTemplateId = n.GetIntValue(); } },
                { "email_address", n => { EmailAddress = n.GetStringValue(); } },
                { "email_signature", n => { EmailSignature = n.GetStringValue(); } },
                { "employee_id", n => { EmployeeId = n.GetStringValue(); } },
                { "fax_number", n => { FaxNumber = n.GetStringValue(); } },
                { "first_name", n => { FirstName = n.GetStringValue(); } },
                { "initials", n => { Initials = n.GetStringValue(); } },
                { "is_active", n => { IsActive = n.GetBoolValue(); } },
                { "is_employee", n => { IsEmployee = n.GetBoolValue(); } },
                { "job_title", n => { JobTitle = n.GetStringValue(); } },
                { "last_name", n => { LastName = n.GetStringValue(); } },
                { "mobile_phone", n => { MobilePhone = n.GetStringValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "origin_data", n => { OriginData = n.GetStringValue(); } },
                { "origin_id", n => { OriginId = n.GetStringValue(); } },
                { "state_code", n => { StateCode = n.GetStringValue(); } },
                { "vendor_id", n => { VendorId = n.GetIntValue(); } },
                { "work_classification_id", n => { WorkClassificationId = n.GetIntValue(); } },
                { "zip", n => { Zip = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address", Address);
            writer.WriteBoolValue("add_to_new_projects", AddToNewProjects);
            writer.WriteStringValue("avatar", Avatar);
            writer.WriteStringValue("business_phone", BusinessPhone);
            writer.WriteIntValue("business_phone_extension", BusinessPhoneExtension);
            writer.WriteStringValue("city", City);
            writer.WriteIntValue("company_permission_template_id", CompanyPermissionTemplateId);
            writer.WriteStringValue("country_code", CountryCode);
            writer.WriteIntValue("default_permission_template_id", DefaultPermissionTemplateId);
            writer.WriteStringValue("email_address", EmailAddress);
            writer.WriteStringValue("email_signature", EmailSignature);
            writer.WriteStringValue("employee_id", EmployeeId);
            writer.WriteStringValue("fax_number", FaxNumber);
            writer.WriteStringValue("first_name", FirstName);
            writer.WriteStringValue("initials", Initials);
            writer.WriteBoolValue("is_active", IsActive);
            writer.WriteBoolValue("is_employee", IsEmployee);
            writer.WriteStringValue("job_title", JobTitle);
            writer.WriteStringValue("last_name", LastName);
            writer.WriteStringValue("mobile_phone", MobilePhone);
            writer.WriteStringValue("notes", Notes);
            writer.WriteStringValue("origin_data", OriginData);
            writer.WriteStringValue("origin_id", OriginId);
            writer.WriteStringValue("state_code", StateCode);
            writer.WriteIntValue("vendor_id", VendorId);
            writer.WriteIntValue("work_classification_id", WorkClassificationId);
            writer.WriteStringValue("zip", Zip);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
