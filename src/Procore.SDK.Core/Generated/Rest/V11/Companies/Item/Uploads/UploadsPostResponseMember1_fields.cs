// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V11.Companies.Item.Uploads
{
    /// <summary>
    /// Fields to send with the file data to sucessfully complete the upload. Donot make any assumptions about the names or contents of the fields becausethey may change at any time to any other value.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UploadsPostResponseMember1_fields : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Disposition for the upload</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentDisposition { get; set; }
#nullable restore
#else
        public string ContentDisposition { get; set; }
#endif
        /// <summary>Content-Type for the upload</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentType { get; set; }
#nullable restore
#else
        public string ContentType { get; set; }
#endif
        /// <summary>Key of the file for upload</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>The Base64-encoded security policy that describes what is permitted in the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Policy { get; set; }
#nullable restore
#else
        public string Policy { get; set; }
#endif
        /// <summary>The signing algorithm used</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XAmzAlgorithm { get; set; }
#nullable restore
#else
        public string XAmzAlgorithm { get; set; }
#endif
        /// <summary>Scope information for calculating the signing key for signature calculation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XAmzCredential { get; set; }
#nullable restore
#else
        public string XAmzCredential { get; set; }
#endif
        /// <summary>The date value in ISO8601 format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XAmzDate { get; set; }
#nullable restore
#else
        public string XAmzDate { get; set; }
#endif
        /// <summary>The HMAC-SHA256 hash of the security policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XAmzSignature { get; set; }
#nullable restore
#else
        public string XAmzSignature { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Uploads.UploadsPostResponseMember1_fields"/> and sets the default values.
        /// </summary>
        public UploadsPostResponseMember1_fields()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V11.Companies.Item.Uploads.UploadsPostResponseMember1_fields"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V11.Companies.Item.Uploads.UploadsPostResponseMember1_fields CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V11.Companies.Item.Uploads.UploadsPostResponseMember1_fields();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "Content-Disposition", n => { ContentDisposition = n.GetStringValue(); } },
                { "Content-Type", n => { ContentType = n.GetStringValue(); } },
                { "key", n => { Key = n.GetStringValue(); } },
                { "policy", n => { Policy = n.GetStringValue(); } },
                { "x-amz-algorithm", n => { XAmzAlgorithm = n.GetStringValue(); } },
                { "x-amz-credential", n => { XAmzCredential = n.GetStringValue(); } },
                { "x-amz-date", n => { XAmzDate = n.GetStringValue(); } },
                { "x-amz-signature", n => { XAmzSignature = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Content-Disposition", ContentDisposition);
            writer.WriteStringValue("Content-Type", ContentType);
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("policy", Policy);
            writer.WriteStringValue("x-amz-algorithm", XAmzAlgorithm);
            writer.WriteStringValue("x-amz-credential", XAmzCredential);
            writer.WriteStringValue("x-amz-date", XAmzDate);
            writer.WriteStringValue("x-amz-signature", XAmzSignature);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
