// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations
{
    /// <summary>
    /// Operation details
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Async_operationsGetResponse_data : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time that the operation completed</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>Opaque internal context information for the operation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_context? Context { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_context Context { get; set; }
#endif
        /// <summary>Error message if operation failed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_error? Error { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_error Error { get; set; }
#endif
        /// <summary>Unique identifier for the operation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Operation type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OperationType { get; set; }
#nullable restore
#else
        public string OperationType { get; set; }
#endif
        /// <summary>Operation-specific result.  See the initiating API for details on the result format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_result? Result { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_result Result { get; set; }
#endif
        /// <summary>Time that the operation started</summary>
        public DateTimeOffset? StartedAt { get; set; }
        /// <summary>Operation status</summary>
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data"/> and sets the default values.
        /// </summary>
        public Async_operationsGetResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "completed_at", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                { "context", n => { Context = n.GetObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_context>(global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_context.CreateFromDiscriminatorValue); } },
                { "error", n => { Error = n.GetObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_error>(global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_error.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "operation_type", n => { OperationType = n.GetStringValue(); } },
                { "result", n => { Result = n.GetObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_result>(global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_result.CreateFromDiscriminatorValue); } },
                { "started_at", n => { StartedAt = n.GetDateTimeOffsetValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("completed_at", CompletedAt);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_context>("context", Context);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_error>("error", Error);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("operation_type", OperationType);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_result>("result", Result);
            writer.WriteDateTimeOffsetValue("started_at", StartedAt);
            writer.WriteEnumValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Async_operations.Async_operationsGetResponse_data_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
