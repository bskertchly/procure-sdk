// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Bulk_create;
using Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v2.0\companies\{company_id}\projects\{project_id}\workflows\instances
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InstancesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The bulk_create property</summary>
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Bulk_create.Bulk_createRequestBuilder Bulk_create
        {
            get => new global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Bulk_create.Bulk_createRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.Core.rest.v20.companies.item.projects.item.workflows.instances.item collection</summary>
        /// <param name="position">Unique identifier for the workflow instance.</param>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Item.InstancesItemRequestBuilder"/></returns>
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Item.InstancesItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Item.InstancesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InstancesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/projects/{project_id}/workflows/instances?filters[tool_type]={filters%5Btool_type%5D}{&cursor*,filters%5Bactive%5D*,filters%5Bassignee_id%5D*,filters%5Bitem_id%5D*,filters%5Boverdue%5D*,filters%5Btool_subtype%5D*,per_page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InstancesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/projects/{project_id}/workflows/instances?filters[tool_type]={filters%5Btool_type%5D}{&cursor*,filters%5Bactive%5D*,filters%5Bassignee_id%5D*,filters%5Bitem_id%5D*,filters%5Boverdue%5D*,filters%5Btool_subtype%5D*,per_page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of workflow instances for a given project.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Instances400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Instances401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Instances403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Instances404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder.InstancesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder.InstancesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Instances400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Instances401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Instances403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.Instances404Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesGetResponse>(requestInfo, global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of workflow instances for a given project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder.InstancesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder.InstancesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Workflows.Instances.InstancesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of workflow instances for a given project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class InstancesRequestBuilderGetQueryParameters 
        {
            /// <summary>Cursor location where the returned list of items are before or after this cursor location.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("cursor")]
            public string? Cursor { get; set; }
#nullable restore
#else
            [QueryParameter("cursor")]
            public string Cursor { get; set; }
#endif
            /// <summary>Return only instances that are active.</summary>
            [QueryParameter("filters%5Bactive%5D")]
            public bool? Filtersactive { get; set; }
            /// <summary>Filter instances with matching current assignee.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bassignee_id%5D")]
            public string? FiltersassigneeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bassignee_id%5D")]
            public string FiltersassigneeId { get; set; }
#endif
            /// <summary>Filter instances with matching item id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bitem_id%5D")]
            public string? FiltersitemId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bitem_id%5D")]
            public string FiltersitemId { get; set; }
#endif
            /// <summary>Return only instances whose next workflow step is overdue.</summary>
            [QueryParameter("filters%5Boverdue%5D")]
            public bool? Filtersoverdue { get; set; }
            /// <summary>Filter instances by tool subtype.  Required when tool_type is &apos;correspondence&apos;.</summary>
            [QueryParameter("filters%5Btool_subtype%5D")]
            public int? FilterstoolSubtype { get; set; }
            /// <summary>Filter instances with matching tool type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btool_type%5D")]
            public string? FilterstoolType { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btool_type%5D")]
            public string FilterstoolType { get; set; }
#endif
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
        }
    }
}
#pragma warning restore CS0618
