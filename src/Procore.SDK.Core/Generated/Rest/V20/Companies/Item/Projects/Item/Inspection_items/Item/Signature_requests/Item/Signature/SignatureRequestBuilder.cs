// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v2.0\companies\{company_id}\projects\{project_id}\inspection_items\{item_id}\signature_requests\{id}\signature
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SignatureRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SignatureRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/projects/{project_id}/inspection_items/{item_id}/signature_requests/{id}/signature", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SignatureRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/projects/{project_id}/inspection_items/{item_id}/signature_requests/{id}/signature", rawUrl)
        {
        }
        /// <summary>
        /// Deletes an Inspection Item Signature for a specified Inspection Item Signature Request.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature422Error.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a Inspection Item Signature Request for a specified Inspection.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostResponse?> PostAsync(global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder.SignaturePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostResponse> PostAsync(global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder.SignaturePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.Signature422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostResponse>(requestInfo, global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an Inspection Item Signature for a specified Inspection Item Signature Request.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a Inspection Item Signature Request for a specified Inspection.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder.SignaturePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder.SignaturePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember1"/>, <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember2"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SignaturePostRequestBody : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember1? SignaturePostRequestBodyMember1 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember1 SignaturePostRequestBodyMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember2? SignaturePostRequestBodyMember2 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember2 SignaturePostRequestBodyMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder.SignaturePostRequestBody"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder.SignaturePostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignatureRequestBuilder.SignaturePostRequestBody();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SignaturePostRequestBodyMember1 = new global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SignaturePostRequestBodyMember2 = new global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember2();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SignaturePostRequestBodyMember1 != null)
                {
                    return SignaturePostRequestBodyMember1.GetFieldDeserializers();
                }
                else if(SignaturePostRequestBodyMember2 != null)
                {
                    return SignaturePostRequestBodyMember2.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(SignaturePostRequestBodyMember1 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember1>(null, SignaturePostRequestBodyMember1);
                }
                else if(SignaturePostRequestBodyMember2 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Inspection_items.Item.Signature_requests.Item.Signature.SignaturePostRequestBodyMember2>(null, SignaturePostRequestBodyMember2);
                }
            }
        }
    }
}
#pragma warning restore CS0618
