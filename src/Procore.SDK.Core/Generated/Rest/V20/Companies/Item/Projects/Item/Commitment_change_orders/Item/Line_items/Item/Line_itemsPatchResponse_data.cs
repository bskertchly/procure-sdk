// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item
{
    /// <summary>
    /// A row on a schedule of values.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Line_itemsPatchResponse_data : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An &quot;unformatted&quot; decimal number. Specifically a number with a period as the decimal separator, without a thousands separator, and with an optional sign. It should be assumed that this number includes arbitrary precision and scale, however, the API may not store or process the number with infinite precision and scale.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; set; }
#nullable restore
#else
        public string Amount { get; set; }
#endif
        /// <summary>ID of the commitment contract line item associated with this line item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommitmentLineItemId { get; set; }
#nullable restore
#else
        public string CommitmentLineItemId { get; set; }
#endif
        /// <summary>Line item Description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Extended type</summary>
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data_extended_type? ExtendedType { get; set; }
        /// <summary>ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Position of the line item within the schedule of values</summary>
        public double? Position { get; set; }
        /// <summary>ID of the prime contract line item associated with this line item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimeLineItemId { get; set; }
#nullable restore
#else
        public string PrimeLineItemId { get; set; }
#endif
        /// <summary>Line Item Quantity</summary>
        public double? Quantity { get; set; }
        /// <summary>ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxCodeId { get; set; }
#nullable restore
#else
        public string TaxCodeId { get; set; }
#endif
        /// <summary>An &quot;unformatted&quot; decimal number. Specifically a number with a period as the decimal separator, without a thousands separator, and with an optional sign. It should be assumed that this number includes arbitrary precision and scale, however, the API may not store or process the number with infinite precision and scale.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitCost { get; set; }
#nullable restore
#else
        public string UnitCost { get; set; }
#endif
        /// <summary>Line Item Unit of Measure</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uom { get; set; }
#nullable restore
#else
        public string Uom { get; set; }
#endif
        /// <summary>ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WbsCodeId { get; set; }
#nullable restore
#else
        public string WbsCodeId { get; set; }
#endif
        /// <summary>An object describing the values associated with this line item along the requested axes of the work breakdown structure. Each key corresponds to an axis and each value corresponds to a value along that axis. Specifically, the keys are WBS Segment IDs hyphenated with the tier depth in that segment. This object will return data for all requested axes whether the work is broken down to that level or not and will not return data for axes that are not requested. When sorting by an axis, the rows will be naturally sorted by the Segment Item Code, and when filtering or grouping, rows will be filtered or grouped by the Segment Item ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data_work_breakdown_structure? WorkBreakdownStructure { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data_work_breakdown_structure WorkBreakdownStructure { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data"/> and sets the default values.
        /// </summary>
        public Line_itemsPatchResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetStringValue(); } },
                { "commitment_line_item_id", n => { CommitmentLineItemId = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "extended_type", n => { ExtendedType = n.GetEnumValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data_extended_type>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "position", n => { Position = n.GetDoubleValue(); } },
                { "prime_line_item_id", n => { PrimeLineItemId = n.GetStringValue(); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "tax_code_id", n => { TaxCodeId = n.GetStringValue(); } },
                { "unit_cost", n => { UnitCost = n.GetStringValue(); } },
                { "uom", n => { Uom = n.GetStringValue(); } },
                { "wbs_code_id", n => { WbsCodeId = n.GetStringValue(); } },
                { "work_breakdown_structure", n => { WorkBreakdownStructure = n.GetObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data_work_breakdown_structure>(global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data_work_breakdown_structure.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("amount", Amount);
            writer.WriteStringValue("commitment_line_item_id", CommitmentLineItemId);
            writer.WriteStringValue("description", Description);
            writer.WriteEnumValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data_extended_type>("extended_type", ExtendedType);
            writer.WriteStringValue("id", Id);
            writer.WriteDoubleValue("position", Position);
            writer.WriteStringValue("prime_line_item_id", PrimeLineItemId);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteStringValue("tax_code_id", TaxCodeId);
            writer.WriteStringValue("unit_cost", UnitCost);
            writer.WriteStringValue("uom", Uom);
            writer.WriteStringValue("wbs_code_id", WbsCodeId);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V20.Companies.Item.Projects.Item.Commitment_change_orders.Item.Line_items.Item.Line_itemsPatchResponse_data_work_breakdown_structure>("work_breakdown_structure", WorkBreakdownStructure);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
