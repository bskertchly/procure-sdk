// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v2.0\companies\{company_id}\workflows\possible_assignees
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Possible_assigneesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Possible_assigneesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/workflows/possible_assignees?tool_type={tool_type}{&page*,per_page*,tool_subtype*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Possible_assigneesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/workflows/possible_assignees?tool_type={tool_type}{&page*,per_page*,tool_subtype*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all workflows possible assignees for a given company and tool.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assignees400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assignees401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assignees403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assignees404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder.Possible_assigneesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder.Possible_assigneesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assignees400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assignees401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assignees403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assignees404Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesGetResponse>(requestInfo, global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of all workflows possible assignees for a given company and tool.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder.Possible_assigneesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder.Possible_assigneesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Possible_assignees.Possible_assigneesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of all workflows possible assignees for a given company and tool.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Possible_assigneesRequestBuilderGetQueryParameters 
        {
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Return workflow possible assignees for the associated tool_subtype. Required when tool_type is &apos;correspondence&apos;.</summary>
            [QueryParameter("tool_subtype")]
            public int? ToolSubtype { get; set; }
            /// <summary>Return workflow possible assignees for the associated tool.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tool_type")]
            public string? ToolType { get; set; }
#nullable restore
#else
            [QueryParameter("tool_type")]
            public string ToolType { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
