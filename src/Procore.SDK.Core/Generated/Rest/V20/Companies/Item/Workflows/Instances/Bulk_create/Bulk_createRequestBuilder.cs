// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v2.0\companies\{company_id}\workflows\instances\bulk_create
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Bulk_createRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Bulk_createRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/workflows/instances/bulk_create", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Bulk_createRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/workflows/instances/bulk_create", rawUrl)
        {
        }
        /// <summary>
        /// Asynchronously bulk create workflow instances for a list of company-level items. If an active instance already exists for an item, a failure will be returned for that item.The returned async operation id can be used to query for status using the [`GET /rest/v2.0/companies/{company_id}/async_operations/{operation_id}`](https://developers.procore.com/reference/rest/operations?version=latest#get-operation-details) API. The result field of the operation contains a list of completed and failed items.For example:````json{  &quot;completed_items&quot;: [    {      &quot;item_id&quot;: &quot;123&quot;,      &quot;instance_id&quot;: &quot;456&quot;    }  ],  &quot;failed_items&quot;: [    {      &quot;item_id&quot;: &quot;789&quot;,      &quot;step&quot;: &quot;create&quot;,      &quot;message&quot;: &quot;Item not found&quot;  ]}````
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostResponse"/></returns>
        /// <param name="body">Workflow Instances Bulk Create</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_create401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_create403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_create404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_create422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostResponse?> PostAsync(global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostResponse> PostAsync(global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_create401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_create403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_create404Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_create422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostResponse>(requestInfo, global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Asynchronously bulk create workflow instances for a list of company-level items. If an active instance already exists for an item, a failure will be returned for that item.The returned async operation id can be used to query for status using the [`GET /rest/v2.0/companies/{company_id}/async_operations/{operation_id}`](https://developers.procore.com/reference/rest/operations?version=latest#get-operation-details) API. The result field of the operation contains a list of completed and failed items.For example:````json{  &quot;completed_items&quot;: [    {      &quot;item_id&quot;: &quot;123&quot;,      &quot;instance_id&quot;: &quot;456&quot;    }  ],  &quot;failed_items&quot;: [    {      &quot;item_id&quot;: &quot;789&quot;,      &quot;step&quot;: &quot;create&quot;,      &quot;message&quot;: &quot;Item not found&quot;  ]}````
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Workflow Instances Bulk Create</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V20.Companies.Item.Workflows.Instances.Bulk_create.Bulk_createRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
