// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V20.Companies.Item.Company_security_settings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Company_security_settingsGetResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Lock out after 3 failed sign in attempts.</summary>
        public bool? EnableLoginLockout { get; set; }
        /// <summary>Enforce password resets via email.</summary>
        public bool? EnforcePasswordResetByEmail { get; set; }
        /// <summary>Is PIN required for JIT</summary>
        public bool? IsPinRequiredForJit { get; set; }
        /// <summary>Password expiration in minutes.</summary>
        public int? PasswordResetAfter { get; set; }
        /// <summary>Session timeout in minutes.</summary>
        public int? SessionTimeout { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Company_security_settings.Company_security_settingsGetResponse_data"/> and sets the default values.
        /// </summary>
        public Company_security_settingsGetResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V20.Companies.Item.Company_security_settings.Company_security_settingsGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V20.Companies.Item.Company_security_settings.Company_security_settingsGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V20.Companies.Item.Company_security_settings.Company_security_settingsGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enable_login_lockout", n => { EnableLoginLockout = n.GetBoolValue(); } },
                { "enforce_password_reset_by_email", n => { EnforcePasswordResetByEmail = n.GetBoolValue(); } },
                { "is_pin_required_for_jit", n => { IsPinRequiredForJit = n.GetBoolValue(); } },
                { "password_reset_after", n => { PasswordResetAfter = n.GetIntValue(); } },
                { "session_timeout", n => { SessionTimeout = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enable_login_lockout", EnableLoginLockout);
            writer.WriteBoolValue("enforce_password_reset_by_email", EnforcePasswordResetByEmail);
            writer.WriteBoolValue("is_pin_required_for_jit", IsPinRequiredForJit);
            writer.WriteIntValue("password_reset_after", PasswordResetAfter);
            writer.WriteIntValue("session_timeout", SessionTimeout);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
