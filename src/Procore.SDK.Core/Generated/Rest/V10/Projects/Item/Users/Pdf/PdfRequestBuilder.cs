// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{project_id}\users\pdf
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PdfRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PdfRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{project_id}/users/pdf{?contact*,filters%5Bexcept_id%5D*,filters%5Bid%5D*,filters%5Bpermission_template%5D*,filters%5Btrade_id%5D%5B%5D*,filters%5Bvendor_id%5D,grouped_by_vendor*,user_role*,vendor*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PdfRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{project_id}/users/pdf{?contact*,filters%5Bexcept_id%5D*,filters%5Bid%5D*,filters%5Bpermission_template%5D*,filters%5Btrade_id%5D%5B%5D*,filters%5Bvendor_id%5D,grouped_by_vendor*,user_role*,vendor*}", rawUrl)
        {
        }
        /// <summary>
        /// Generate PDF Document from a project. The endpoint returns url to PDF file.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfPostResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.Pdf400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.Pdf401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.Pdf403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfPostResponse?> PostAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder.PdfRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfPostResponse> PostAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder.PdfRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.Pdf400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.Pdf401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.Pdf403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfPostResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Generate PDF Document from a project. The endpoint returns url to PDF file.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder.PdfRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder.PdfRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Projects.Item.Users.Pdf.PdfRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Generate PDF Document from a project. The endpoint returns url to PDF file.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PdfRequestBuilderPostQueryParameters 
        {
            /// <summary>Indicates whether contacts should be included in PDF document.</summary>
            [QueryParameter("contact")]
            public bool? Contact { get; set; }
            /// <summary>Returns users except as specified.</summary>
            [QueryParameter("filters%5Bexcept_id%5D")]
            public int? FiltersexceptId { get; set; }
            /// <summary>Returns users whose id attribute matches the parameter.</summary>
            [QueryParameter("filters%5Bid%5D")]
            public int? Filtersid { get; set; }
            /// <summary>Permission Template ID. Returns item(s) assiociated with the specified Permission Template ID.</summary>
            [QueryParameter("filters%5Bpermission_template%5D")]
            public int? FilterspermissionTemplate { get; set; }
            /// <summary>Returns users whose vendor record is associated with the specified trade id(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btrade_id%5D%5B%5D")]
            public int?[]? FilterstradeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btrade_id%5D%5B%5D")]
            public int?[] FilterstradeId { get; set; }
#endif
            /// <summary>Return item(s) with the specified Vendor IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bvendor_id%5D")]
            public int?[]? FiltersvendorId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bvendor_id%5D")]
            public int?[] FiltersvendorId { get; set; }
#endif
            /// <summary>Indicates whether users should be grouped by vendor.</summary>
            [QueryParameter("grouped_by_vendor")]
            public bool? GroupedByVendor { get; set; }
            /// <summary>Indicates whether user_role should be included in PDF document.</summary>
            [QueryParameter("user_role")]
            public bool? UserRole { get; set; }
            /// <summary>Indicates whether vendor should be included in PDF document.</summary>
            [QueryParameter("vendor")]
            public bool? Vendor { get; set; }
        }
    }
}
#pragma warning restore CS0618
