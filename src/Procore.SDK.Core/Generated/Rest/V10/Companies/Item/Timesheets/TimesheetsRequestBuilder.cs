// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Csv_export;
using Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Filters;
using Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Signatures;
using Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheet_to_budget_configuration;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\companies\{company_id}\timesheets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TimesheetsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The csv_export property</summary>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Csv_export.Csv_exportRequestBuilder Csv_export
        {
            get => new global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Csv_export.Csv_exportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The filters property</summary>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Filters.FiltersRequestBuilder Filters
        {
            get => new global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Filters.FiltersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The signatures property</summary>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Signatures.SignaturesRequestBuilder Signatures
        {
            get => new global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Signatures.SignaturesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The timesheet_to_budget_configuration property</summary>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheet_to_budget_configuration.Timesheet_to_budget_configurationRequestBuilder Timesheet_to_budget_configuration
        {
            get => new global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheet_to_budget_configuration.Timesheet_to_budget_configurationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TimesheetsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/timesheets{?end_date*,filters%5Bdeleted_at%5D*,filters%5Bupdated_at%5D*,page*,per_page*,start_date*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TimesheetsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/timesheets{?end_date*,filters%5Bdeleted_at%5D*,filters%5Bupdated_at%5D*,page*,per_page*,start_date*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns timecard data for all employees on all projects in the current work week. Use the start_date and end_date query parameters to specify a date range other than the current work week. Note that if you use the updated_at or deleted_at filters, those dates must fall within the current work week,  otherwise you must also specify a date range using start_date and end_date.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder.TimesheetsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder.TimesheetsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Updates multiple timecard entries at the same time
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchResponse?> PatchAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchResponse> PatchAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates multiple timecard entries at the same time
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets&gt;</returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets>?> PostAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets>> PostAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.Timesheets.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns timecard data for all employees on all projects in the current work week. Use the start_date and end_date query parameters to specify a date range other than the current work week. Note that if you use the updated_at or deleted_at filters, those dates must fall within the current work week,  otherwise you must also specify a date range using start_date and end_date.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder.TimesheetsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder.TimesheetsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates multiple timecard entries at the same time
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Creates multiple timecard entries at the same time
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Timesheets.TimesheetsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns timecard data for all employees on all projects in the current work week. Use the start_date and end_date query parameters to specify a date range other than the current work week. Note that if you use the updated_at or deleted_at filters, those dates must fall within the current work week,  otherwise you must also specify a date range using start_date and end_date.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimesheetsRequestBuilderGetQueryParameters 
        {
            /// <summary>End date of specific timecards desired in YYYY-MM-DD format (use together with start_date)</summary>
            [QueryParameter("end_date")]
            public Date? EndDate { get; set; }
            /// <summary>Returns item(s) deleted within the specified ISO 8601 datetime range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bdeleted_at%5D")]
            public string? FiltersdeletedAt { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bdeleted_at%5D")]
            public string FiltersdeletedAt { get; set; }
#endif
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Start date of specific timecards desired in YYYY-MM-DD format (use together with end_date)</summary>
            [QueryParameter("start_date")]
            public Date? StartDate { get; set; }
        }
    }
}
#pragma warning restore CS0618
