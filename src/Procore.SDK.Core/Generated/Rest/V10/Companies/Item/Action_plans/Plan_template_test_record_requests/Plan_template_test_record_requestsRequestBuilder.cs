// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Bulk_create;
using Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\companies\{company_id}\action_plans\plan_template_test_record_requests
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Plan_template_test_record_requestsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The bulk_create property</summary>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Bulk_create.Bulk_createRequestBuilder Bulk_create
        {
            get => new global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Bulk_create.Bulk_createRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.Core.rest.v10.companies.item.action_plans.plan_template_test_record_requests.item collection</summary>
        /// <param name="position">Company Action Plan Template Test Record Request ID</param>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Item.Plan_template_test_record_requestsItemRequestBuilder"/></returns>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Item.Plan_template_test_record_requestsItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Item.Plan_template_test_record_requestsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Plan_template_test_record_requestsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/action_plans/plan_template_test_record_requests{?filters%5Bcreated_at%5D*,filters%5Bid%5D,filters%5Bplan_template_id%5D,filters%5Bplan_template_item_id%5D,filters%5Btype%5D,filters%5Bupdated_at%5D*,page*,per_page*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Plan_template_test_record_requestsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/action_plans/plan_template_test_record_requests{?filters%5Bcreated_at%5D*,filters%5Bid%5D,filters%5Bplan_template_id%5D,filters%5Bplan_template_item_id%5D,filters%5Btype%5D,filters%5Bupdated_at%5D*,page*,per_page*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets the list of Company Action Plan Template Test Record Requests
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder.Plan_template_test_record_requestsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder.Plan_template_test_record_requestsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates an Company Action Plan Template Test Record Request
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostResponse?> PostAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostResponse> PostAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requests422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets the list of Company Action Plan Template Test Record Requests
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder.Plan_template_test_record_requestsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder.Plan_template_test_record_requestsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates an Company Action Plan Template Test Record Request
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.Plan_template_test_record_requestsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets the list of Company Action Plan Template Test Record Requests
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Plan_template_test_record_requestsRequestBuilderGetQueryParameters 
        {
            /// <summary>Return item(s) created within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bcreated_at%5D")]
            public Date? FilterscreatedAt { get; set; }
            /// <summary>Return item(s) with the specified IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Return section(s) associated with the specified Action Plan Template ID(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bplan_template_id%5D")]
            public int?[]? FiltersplanTemplateId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bplan_template_id%5D")]
            public int?[] FiltersplanTemplateId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Company Action Plan Template Item ID(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bplan_template_item_id%5D")]
            public int?[]? FiltersplanTemplateItemId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bplan_template_item_id%5D")]
            public int?[] FiltersplanTemplateItemId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Test Record Type(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btype%5D")]
            public string[]? Filterstype { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btype%5D")]
            public string[] Filterstype { get; set; }
#endif
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Direction (asc/desc) can be controlled by the presence or absence of &apos;-&apos; before the sort parameter.</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.Core.Rest.V10.Companies.Item.Action_plans.Plan_template_test_record_requests.GetSortQueryParameterType? Sort { get; set; }
        }
    }
}
#pragma warning restore CS0618
