// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DocumentsGetResponse_files : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Metadata about drawing (if file is drawing)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing? Drawing { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing Drawing { get; set; }
#endif
        /// <summary>Name of the file (as would be presented in bid package zip)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FilePath { get; set; }
#nullable restore
#else
        public string FilePath { get; set; }
#endif
        /// <summary>URI, where the file is accessible at. Could have limited lifetime</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? S3Source { get; set; }
#nullable restore
#else
        public string S3Source { get; set; }
#endif
        /// <summary>Size of the file in bytes</summary>
        public int? Size { get; set; }
        /// <summary>type of the file</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files"/> and sets the default values.
        /// </summary>
        public DocumentsGetResponse_files()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "drawing", n => { Drawing = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing.CreateFromDiscriminatorValue); } },
                { "file_path", n => { FilePath = n.GetStringValue(); } },
                { "s3_source", n => { S3Source = n.GetStringValue(); } },
                { "size", n => { Size = n.GetIntValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing>("drawing", Drawing);
            writer.WriteStringValue("file_path", FilePath);
            writer.WriteStringValue("s3_source", S3Source);
            writer.WriteIntValue("size", Size);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
