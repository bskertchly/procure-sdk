// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents
{
    /// <summary>
    /// Metadata about drawing (if file is drawing)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DocumentsGetResponse_files_drawing : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>DPI of the drawing</summary>
        public double? Dpi { get; set; }
        /// <summary>ID of the drawing</summary>
        public double? DrawingId { get; set; }
        /// <summary>ID of the drawing set</summary>
        public double? DrawingSetId { get; set; }
        /// <summary>Height of the drawing, in pixels</summary>
        public double? Height { get; set; }
        /// <summary>URI, where the drawing, converted to PNG, is accessible at. Could have limited lifetime</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PngS3Source { get; set; }
#nullable restore
#else
        public string PngS3Source { get; set; }
#endif
        /// <summary>Revision property of the drawing</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Revision { get; set; }
#nullable restore
#else
        public string Revision { get; set; }
#endif
        /// <summary>URI, where the drawing&apos;s thumbnail is accessible at. Could have limited lifetime</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThumbnailUrl { get; set; }
#nullable restore
#else
        public string ThumbnailUrl { get; set; }
#endif
        /// <summary>Width of the drawing, in pixels</summary>
        public double? Width { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing"/> and sets the default values.
        /// </summary>
        public DocumentsGetResponse_files_drawing()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Planroom.Bid_packages.Item.Documents.DocumentsGetResponse_files_drawing();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dpi", n => { Dpi = n.GetDoubleValue(); } },
                { "drawing_id", n => { DrawingId = n.GetDoubleValue(); } },
                { "drawing_set_id", n => { DrawingSetId = n.GetDoubleValue(); } },
                { "height", n => { Height = n.GetDoubleValue(); } },
                { "png_s3_source", n => { PngS3Source = n.GetStringValue(); } },
                { "revision", n => { Revision = n.GetStringValue(); } },
                { "thumbnail_url", n => { ThumbnailUrl = n.GetStringValue(); } },
                { "width", n => { Width = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("dpi", Dpi);
            writer.WriteDoubleValue("drawing_id", DrawingId);
            writer.WriteDoubleValue("drawing_set_id", DrawingSetId);
            writer.WriteDoubleValue("height", Height);
            writer.WriteStringValue("png_s3_source", PngS3Source);
            writer.WriteStringValue("revision", Revision);
            writer.WriteStringValue("thumbnail_url", ThumbnailUrl);
            writer.WriteDoubleValue("width", Width);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
