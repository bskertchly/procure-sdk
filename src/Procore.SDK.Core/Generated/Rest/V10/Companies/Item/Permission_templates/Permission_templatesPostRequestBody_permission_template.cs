// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Permission_templatesPostRequestBody_permission_template : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the Company the Permission Template belongs to</summary>
        public int? CompanyId { get; set; }
        /// <summary>The ID of the Permission Template</summary>
        public int? Id { get; set; }
        /// <summary>The name of the Permission Template</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>permitted actions for active tools</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_permissions? Permissions { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_permissions Permissions { get; set; }
#endif
        /// <summary>id of corresponding project if provider_type == Project</summary>
        public int? ProjectId { get; set; }
        /// <summary>Either the company_id or project_id based on provider_type</summary>
        public int? ProviderId { get; set; }
        /// <summary>&apos;Project&apos; or &apos;Company&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderType { get; set; }
#nullable restore
#else
        public string ProviderType { get; set; }
#endif
        /// <summary>&apos;company_tools&apos;, &apos;global&apos; or &apos;project_specific&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>user access levels for active tools</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_user_access_levels? UserAccessLevels { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_user_access_levels UserAccessLevels { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template"/> and sets the default values.
        /// </summary>
        public Permission_templatesPostRequestBody_permission_template()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "company_id", n => { CompanyId = n.GetIntValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "permissions", n => { Permissions = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_permissions>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_permissions.CreateFromDiscriminatorValue); } },
                { "project_id", n => { ProjectId = n.GetIntValue(); } },
                { "provider_id", n => { ProviderId = n.GetIntValue(); } },
                { "provider_type", n => { ProviderType = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "user_access_levels", n => { UserAccessLevels = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_user_access_levels>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_user_access_levels.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("company_id", CompanyId);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_permissions>("permissions", Permissions);
            writer.WriteIntValue("project_id", ProjectId);
            writer.WriteIntValue("provider_id", ProviderId);
            writer.WriteStringValue("provider_type", ProviderType);
            writer.WriteStringValue("type", Type);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Permission_templates.Permission_templatesPostRequestBody_permission_template_user_access_levels>("user_access_levels", UserAccessLevels);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
