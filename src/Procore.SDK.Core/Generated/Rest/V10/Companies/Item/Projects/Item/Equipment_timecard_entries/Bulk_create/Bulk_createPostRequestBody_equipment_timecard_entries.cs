// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Bulk_create
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Bulk_createPostRequestBody_equipment_timecard_entries : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The unique identifier of the crew associated with the equipment timecard entry.</summary>
        public int? CrewId { get; set; }
        /// <summary>The date of the equipment timecard entry in ISO 8601 format.</summary>
        public Date? Date { get; set; }
        /// <summary>The unique identifier of the equipment associated with the equipment timecard entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EquipmentId { get; set; }
#nullable restore
#else
        public string EquipmentId { get; set; }
#endif
        /// <summary>The unique identifier of the location associated with the equipment timecard entry.</summary>
        public int? LocationId { get; set; }
        /// <summary>The unique identifier of the party associated with the equipment timecard entry.</summary>
        public int? PartyId { get; set; }
        /// <summary>The quantity of hours worked for the equipment timecard entry.</summary>
        public double? Quantity { get; set; }
        /// <summary>The unique identifier of the timesheet associated with the equipment timecard entry.</summary>
        public int? TimesheetId { get; set; }
        /// <summary>Enum representing the unit of measure, typically &apos;hours&apos;.</summary>
        public int? UnitOfMeasure { get; set; }
        /// <summary>The Work Breakdown Structure (WBS) code associated with the equipment timecard entry.</summary>
        public int? WbsCodeId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Bulk_create.Bulk_createPostRequestBody_equipment_timecard_entries"/> and sets the default values.
        /// </summary>
        public Bulk_createPostRequestBody_equipment_timecard_entries()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Bulk_create.Bulk_createPostRequestBody_equipment_timecard_entries"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Bulk_create.Bulk_createPostRequestBody_equipment_timecard_entries CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Bulk_create.Bulk_createPostRequestBody_equipment_timecard_entries();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "crew_id", n => { CrewId = n.GetIntValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "equipment_id", n => { EquipmentId = n.GetStringValue(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "party_id", n => { PartyId = n.GetIntValue(); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "timesheet_id", n => { TimesheetId = n.GetIntValue(); } },
                { "unit_of_measure", n => { UnitOfMeasure = n.GetIntValue(); } },
                { "wbs_code_id", n => { WbsCodeId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("crew_id", CrewId);
            writer.WriteDateValue("date", Date);
            writer.WriteStringValue("equipment_id", EquipmentId);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteIntValue("party_id", PartyId);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteIntValue("timesheet_id", TimesheetId);
            writer.WriteIntValue("unit_of_measure", UnitOfMeasure);
            writer.WriteIntValue("wbs_code_id", WbsCodeId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
