// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Uploads
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UploadsPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The content type set through this parameter will be used by the storage system during download, similar to the response_filename. When set to true, the file will be downloaded as an attachment. Otherwise, the file content will be rendered inline in the browser.</summary>
        public bool? AttachmentContentDisposition { get; set; }
        /// <summary>The content-type set through this parameter will be used by the storageservice during download just like the response_filename. Setting thisvalue is less important because HTTP clients and operating systems aregenerally well equipped to determine file types.Setting this parameter is optional and should only be included when youare certain it&apos;s correct or when you want to force a content-type otherthan what the filename extension suggests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResponseContentType { get; set; }
#nullable restore
#else
        public string ResponseContentType { get; set; }
#endif
        /// <summary>By setting a filename you ensure that the storage service knows thefilename of the upload. Files are often downloaded directly from thestorage service and without the filename they will save on the endusers&apos; device without a readable name or extension.Setting this parameter is optional but highly recommended.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResponseFilename { get; set; }
#nullable restore
#else
        public string ResponseFilename { get; set; }
#endif
        /// <summary>Upload segments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody_segments>? Segments { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody_segments> Segments { get; set; }
#endif
        /// <summary>File size in bytes</summary>
        public int? Size { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody"/> and sets the default values.
        /// </summary>
        public UploadsPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attachment_content_disposition", n => { AttachmentContentDisposition = n.GetBoolValue(); } },
                { "response_content_type", n => { ResponseContentType = n.GetStringValue(); } },
                { "response_filename", n => { ResponseFilename = n.GetStringValue(); } },
                { "segments", n => { Segments = n.GetCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody_segments>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody_segments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "size", n => { Size = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("attachment_content_disposition", AttachmentContentDisposition);
            writer.WriteStringValue("response_content_type", ResponseContentType);
            writer.WriteStringValue("response_filename", ResponseFilename);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.Companies.Item.Uploads.UploadsPostRequestBody_segments>("segments", Segments);
            writer.WriteIntValue("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
