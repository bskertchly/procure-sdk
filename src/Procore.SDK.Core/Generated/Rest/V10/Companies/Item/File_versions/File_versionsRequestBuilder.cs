// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.File_versions
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\companies\{company_id}\file_versions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class File_versionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Procore.SDK.Core.rest.v10.companies.item.file_versions.item collection</summary>
        /// <param name="position">ID of the file version</param>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.Item.File_versionsItemRequestBuilder"/></returns>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.Item.File_versionsItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.Item.File_versionsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public File_versionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/file_versions?file_id={file_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public File_versionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/file_versions?file_id={file_id}", rawUrl)
        {
        }
        /// <summary>
        /// Uploads a new version of a specific file in the Company Documents tool.See the Procore Support website articles on [Company Documents](https://support.procore.com/products/online/user-guide/company-level/documents).
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsPostResponse?> PostAsync(MultipartBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder.File_versionsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsPostResponse> PostAsync(MultipartBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder.File_versionsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versions5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsPostResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Uploads a new version of a specific file in the Company Documents tool.See the Procore Support website articles on [Company Documents](https://support.procore.com/products/online/user-guide/company-level/documents).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder.File_versionsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder.File_versionsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "multipart/form-data", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.File_versions.File_versionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Uploads a new version of a specific file in the Company Documents tool.See the Procore Support website articles on [Company Documents](https://support.procore.com/products/online/user-guide/company-level/documents).
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class File_versionsRequestBuilderPostQueryParameters 
        {
            /// <summary>The id of the File</summary>
            [QueryParameter("file_id")]
            public int? FileId { get; set; }
        }
    }
}
#pragma warning restore CS0618
