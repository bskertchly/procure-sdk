// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Bid_packagesGetResponse_bidPackages : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accept_post_due_submissions property</summary>
        public bool? AcceptPostDueSubmissions { get; set; }
        /// <summary>Bid package accounting method, either &apos;amount&apos; or &apos;unit&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountingMethod { get; set; }
#nullable restore
#else
        public string AccountingMethod { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>TODO</summary>
        public bool? AllowBidderSum { get; set; }
        /// <summary>Due date</summary>
        public DateTimeOffset? BidDueDate { get; set; }
        /// <summary>The bid_invites_sent_count property</summary>
        public double? BidInvitesSentCount { get; set; }
        /// <summary>The bids_received_count property</summary>
        public double? BidsReceivedCount { get; set; }
        /// <summary>The enable_prebid_rfi_deadline property</summary>
        public bool? EnablePrebidRfiDeadline { get; set; }
        /// <summary>The enable_prebid_walkthrough property</summary>
        public bool? EnablePrebidWalkthrough { get; set; }
        /// <summary>This is the date at which bids are due for this bid package</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormattedBidDueDate { get; set; }
#nullable restore
#else
        public string FormattedBidDueDate { get; set; }
#endif
        /// <summary>The formatted_bid_email_message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormattedBidEmailMessage { get; set; }
#nullable restore
#else
        public string FormattedBidEmailMessage { get; set; }
#endif
        /// <summary>The formatted_bid_web_message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormattedBidWebMessage { get; set; }
#nullable restore
#else
        public string FormattedBidWebMessage { get; set; }
#endif
        /// <summary>The formatted_pre_bid_walk_through_notes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormattedPreBidWalkThroughNotes { get; set; }
#nullable restore
#else
        public string FormattedPreBidWalkThroughNotes { get; set; }
#endif
        /// <summary>The has_bid_docs property</summary>
        public bool? HasBidDocs { get; set; }
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Links that can be used by Frontend</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages_links? Links { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages_links Links { get; set; }
#endif
        /// <summary>Bid Package Number</summary>
        public int? Number { get; set; }
        /// <summary>The pre_bid_rfi_deadline_date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreBidRfiDeadlineDate { get; set; }
#nullable restore
#else
        public string PreBidRfiDeadlineDate { get; set; }
#endif
        /// <summary>Unique identifier for the project.</summary>
        public int? ProjectId { get; set; }
        /// <summary>Address of bid package project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectLocation { get; set; }
#nullable restore
#else
        public string ProjectLocation { get; set; }
#endif
        /// <summary>Name of bid package project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectName { get; set; }
#nullable restore
#else
        public string ProjectName { get; set; }
#endif
        /// <summary>The sealed property</summary>
        public bool? Sealed { get; set; }
        /// <summary>Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The user_bid_id property</summary>
        public int? UserBidId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages"/> and sets the default values.
        /// </summary>
        public Bid_packagesGetResponse_bidPackages()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accept_post_due_submissions", n => { AcceptPostDueSubmissions = n.GetBoolValue(); } },
                { "accounting_method", n => { AccountingMethod = n.GetStringValue(); } },
                { "allow_bidder_sum", n => { AllowBidderSum = n.GetBoolValue(); } },
                { "bid_due_date", n => { BidDueDate = n.GetDateTimeOffsetValue(); } },
                { "bid_invites_sent_count", n => { BidInvitesSentCount = n.GetDoubleValue(); } },
                { "bids_received_count", n => { BidsReceivedCount = n.GetDoubleValue(); } },
                { "enable_prebid_rfi_deadline", n => { EnablePrebidRfiDeadline = n.GetBoolValue(); } },
                { "enable_prebid_walkthrough", n => { EnablePrebidWalkthrough = n.GetBoolValue(); } },
                { "formatted_bid_due_date", n => { FormattedBidDueDate = n.GetStringValue(); } },
                { "formatted_bid_email_message", n => { FormattedBidEmailMessage = n.GetStringValue(); } },
                { "formatted_bid_web_message", n => { FormattedBidWebMessage = n.GetStringValue(); } },
                { "formatted_pre_bid_walk_through_notes", n => { FormattedPreBidWalkThroughNotes = n.GetStringValue(); } },
                { "has_bid_docs", n => { HasBidDocs = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "links", n => { Links = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages_links>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages_links.CreateFromDiscriminatorValue); } },
                { "number", n => { Number = n.GetIntValue(); } },
                { "pre_bid_rfi_deadline_date", n => { PreBidRfiDeadlineDate = n.GetStringValue(); } },
                { "project_id", n => { ProjectId = n.GetIntValue(); } },
                { "project_location", n => { ProjectLocation = n.GetStringValue(); } },
                { "project_name", n => { ProjectName = n.GetStringValue(); } },
                { "sealed", n => { Sealed = n.GetBoolValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "user_bid_id", n => { UserBidId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("accept_post_due_submissions", AcceptPostDueSubmissions);
            writer.WriteStringValue("accounting_method", AccountingMethod);
            writer.WriteBoolValue("allow_bidder_sum", AllowBidderSum);
            writer.WriteDateTimeOffsetValue("bid_due_date", BidDueDate);
            writer.WriteDoubleValue("bid_invites_sent_count", BidInvitesSentCount);
            writer.WriteDoubleValue("bids_received_count", BidsReceivedCount);
            writer.WriteBoolValue("enable_prebid_rfi_deadline", EnablePrebidRfiDeadline);
            writer.WriteBoolValue("enable_prebid_walkthrough", EnablePrebidWalkthrough);
            writer.WriteStringValue("formatted_bid_due_date", FormattedBidDueDate);
            writer.WriteStringValue("formatted_bid_email_message", FormattedBidEmailMessage);
            writer.WriteStringValue("formatted_bid_web_message", FormattedBidWebMessage);
            writer.WriteStringValue("formatted_pre_bid_walk_through_notes", FormattedPreBidWalkThroughNotes);
            writer.WriteBoolValue("has_bid_docs", HasBidDocs);
            writer.WriteIntValue("id", Id);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Bid_packages.Bid_packagesGetResponse_bidPackages_links>("links", Links);
            writer.WriteIntValue("number", Number);
            writer.WriteStringValue("pre_bid_rfi_deadline_date", PreBidRfiDeadlineDate);
            writer.WriteIntValue("project_id", ProjectId);
            writer.WriteStringValue("project_location", ProjectLocation);
            writer.WriteStringValue("project_name", ProjectName);
            writer.WriteBoolValue("sealed", Sealed);
            writer.WriteStringValue("title", Title);
            writer.WriteIntValue("user_bid_id", UserBidId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
