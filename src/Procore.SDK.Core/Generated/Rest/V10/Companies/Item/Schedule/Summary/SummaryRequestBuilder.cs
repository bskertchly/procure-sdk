// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\companies\{company_id}\schedule\summary
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SummaryRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SummaryRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/schedule/summary?after={after}&before={before}{&limit_per_day*,program_ids*,project_department_ids*,project_ids*,project_office_ids*,project_owner_type_ids*,project_region_ids*,project_stage_ids*,project_type_ids*,resource_ids*,sort_dir*,sort_key*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SummaryRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/schedule/summary?after={after}&before={before}{&limit_per_day*,program_ids*,project_department_ids*,project_ids*,project_office_ids*,project_owner_type_ids*,project_region_ids*,project_stage_ids*,project_type_ids*,resource_ids*,sort_dir*,sort_key*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of the number of tasks and calendar items per project for each day in the specified date range.Tasks and calendar items whose start - finish overlap with the specified date range are included in the sums.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.Summary400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.Summary401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.Summary403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder.SummaryRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder.SummaryRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.Summary400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.Summary401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.Summary403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryGetResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of the number of tasks and calendar items per project for each day in the specified date range.Tasks and calendar items whose start - finish overlap with the specified date range are included in the sums.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder.SummaryRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder.SummaryRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.SummaryRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of the number of tasks and calendar items per project for each day in the specified date range.Tasks and calendar items whose start - finish overlap with the specified date range are included in the sums.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SummaryRequestBuilderGetQueryParameters 
        {
            /// <summary>Beginning of date range to filter by.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("after")]
            public string? After { get; set; }
#nullable restore
#else
            [QueryParameter("after")]
            public string After { get; set; }
#endif
            /// <summary>End of date range to filter by</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("before")]
            public string? Before { get; set; }
#nullable restore
#else
            [QueryParameter("before")]
            public string Before { get; set; }
#endif
            /// <summary>Number of results to return per day</summary>
            [QueryParameter("limit_per_day")]
            public int? LimitPerDay { get; set; }
            /// <summary>Filter by project program IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("program_ids")]
            public int?[]? ProgramIds { get; set; }
#nullable restore
#else
            [QueryParameter("program_ids")]
            public int?[] ProgramIds { get; set; }
#endif
            /// <summary>Filter by project department IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project_department_ids")]
            public int?[]? ProjectDepartmentIds { get; set; }
#nullable restore
#else
            [QueryParameter("project_department_ids")]
            public int?[] ProjectDepartmentIds { get; set; }
#endif
            /// <summary>Filter by project IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project_ids")]
            public int?[]? ProjectIds { get; set; }
#nullable restore
#else
            [QueryParameter("project_ids")]
            public int?[] ProjectIds { get; set; }
#endif
            /// <summary>Filter by project office IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project_office_ids")]
            public int?[]? ProjectOfficeIds { get; set; }
#nullable restore
#else
            [QueryParameter("project_office_ids")]
            public int?[] ProjectOfficeIds { get; set; }
#endif
            /// <summary>Filter by project owner type IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project_owner_type_ids")]
            public int?[]? ProjectOwnerTypeIds { get; set; }
#nullable restore
#else
            [QueryParameter("project_owner_type_ids")]
            public int?[] ProjectOwnerTypeIds { get; set; }
#endif
            /// <summary>Filter by project region IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project_region_ids")]
            public int?[]? ProjectRegionIds { get; set; }
#nullable restore
#else
            [QueryParameter("project_region_ids")]
            public int?[] ProjectRegionIds { get; set; }
#endif
            /// <summary>Filter by project stage IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project_stage_ids")]
            public int?[]? ProjectStageIds { get; set; }
#nullable restore
#else
            [QueryParameter("project_stage_ids")]
            public int?[] ProjectStageIds { get; set; }
#endif
            /// <summary>Filter by project type IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project_type_ids")]
            public int?[]? ProjectTypeIds { get; set; }
#nullable restore
#else
            [QueryParameter("project_type_ids")]
            public int?[] ProjectTypeIds { get; set; }
#endif
            /// <summary>Filter by resource IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resource_ids")]
            public int?[]? ResourceIds { get; set; }
#nullable restore
#else
            [QueryParameter("resource_ids")]
            public int?[] ResourceIds { get; set; }
#endif
            /// <summary>Sort results in ascending or descending order</summary>
            [QueryParameter("sort_dir")]
            public global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.GetSort_dirQueryParameterType? SortDir { get; set; }
            /// <summary>Sort results by a property of projects. Defaults to descending project_event_count.</summary>
            [QueryParameter("sort_key")]
            public global::Procore.SDK.Core.Rest.V10.Companies.Item.Schedule.Summary.GetSort_keyQueryParameterType? SortKey { get; set; }
        }
    }
}
#pragma warning restore CS0618
