// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\companies\{company_id}\configurable_field_sets\find_by_index
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Find_by_indexRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Find_by_indexRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/configurable_field_sets/find_by_index?type={type}{&project_id*,scope%5Baction_plan_type_id%5D*,scope%5Bcategory%5D*,scope%5Bgeneric_tool_id%5D*,scope%5Binspection_type_id%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Find_by_indexRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/configurable_field_sets/find_by_index?type={type}{&project_id*,scope%5Baction_plan_type_id%5D*,scope%5Bcategory%5D*,scope%5Bgeneric_tool_id%5D*,scope%5Binspection_type_id%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns the details for a specified Configurable Field Set if found. If not, template of type Field Set will be returned with ID null.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_index400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_index401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_index403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder.Find_by_indexRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder.Find_by_indexRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_index400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_index401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_index403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexGetResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the details for a specified Configurable Field Set if found. If not, template of type Field Set will be returned with ID null.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder.Find_by_indexRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder.Find_by_indexRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Configurable_field_sets.Find_by_index.Find_by_indexRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns the details for a specified Configurable Field Set if found. If not, template of type Field Set will be returned with ID null.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Find_by_indexRequestBuilderGetQueryParameters 
        {
            /// <summary>Project ID that is associated to the Configurable Field Set, if applicable</summary>
            [QueryParameter("project_id")]
            public int? ProjectId { get; set; }
            /// <summary>Required for an Action Plans Plan Configurable Field Set (type of ConfigurableFieldSet::ActionPlans::Plan)</summary>
            [QueryParameter("scope%5Baction_plan_type_id%5D")]
            public int? ScopeactionPlanTypeId { get; set; }
            /// <summary>Required for an Observations Configurable Field Set (0 = quality, 1 = safety, 2 = commissioning, 3 = warranty, 4 = work to complete)</summary>
            [QueryParameter("scope%5Bcategory%5D")]
            public int? Scopecategory { get; set; }
            /// <summary>Required for a Generic Tool Item Configurable Field Set (type of ConfigurableFieldSet::GenericToolItem)</summary>
            [QueryParameter("scope%5Bgeneric_tool_id%5D")]
            public int? ScopegenericToolId { get; set; }
            /// <summary>Required for an Inspection Configurable Field Set. If a value is provided, only field set of the specific Inspection type is returned. If no value is provided, only field set of unassociated Inspections (Inspections with no type) is returned.</summary>
            [QueryParameter("scope%5Binspection_type_id%5D")]
            public int? ScopeinspectionTypeId { get; set; }
            /// <summary>The type of Configurable Field Set</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
