// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Invite;
using Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\companies\{company_id}\users\{-id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The invite property</summary>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Invite.InviteRequestBuilder Invite
        {
            get => new global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Invite.InviteRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The project_assignments property</summary>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Project_assignmentsRequestBuilder Project_assignments
        {
            get => new global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Project_assignmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/users/{%2Did}{?run_configurable_validations*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/users/{%2Did}{?run_configurable_validations*}", rawUrl)
        {
        }
        /// <summary>
        /// Show detail on a specified User.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.GetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroOneError">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroThreeError">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.GetResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.GetResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroOneError.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroThreeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.GetResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.GetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the specified User.#### Uploading avatarTo upload avatar you must upload whole payload as `multipart/form-data` content-type andspecify each parameter as form-data together with `user[avatar]` as file.#### Country and State codesThe `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification.See [Working with Country Codes](/documentation/country-codes) for additional information.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroZeroError">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroOneError">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroThreeError">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchResponse?> PatchAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder.ItemRequestBuilderPatchQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchResponse> PatchAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder.ItemRequestBuilderPatchQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroZeroError.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroOneError.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.FourZeroThreeError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Show detail on a specified User.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the specified User.#### Uploading avatarTo upload avatar you must upload whole payload as `multipart/form-data` content-type andspecify each parameter as form-data together with `user[avatar]` as file.#### Country and State codesThe `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification.See [Working with Country Codes](/documentation/country-codes) for additional information.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder.ItemRequestBuilderPatchQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.PatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder.ItemRequestBuilderPatchQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Update the specified User.#### Uploading avatarTo upload avatar you must upload whole payload as `multipart/form-data` content-type andspecify each parameter as form-data together with `user[avatar]` as file.#### Country and State codesThe `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification.See [Working with Country Codes](/documentation/country-codes) for additional information.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ItemRequestBuilderPatchQueryParameters 
        {
            /// <summary>If true, validations are run for the corresponding Configurable Field Set.</summary>
            [QueryParameter("run_configurable_validations")]
            public bool? RunConfigurableValidations { get; set; }
        }
    }
}
#pragma warning restore CS0618
