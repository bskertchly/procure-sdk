// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\companies\{company_id}\users\{-id}\project_assignments\filter_options\regions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RegionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/users/{%2Did}/project_assignments/filter_options/regions{?scope*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/users/{%2Did}/project_assignments/filter_options/regions{?scope*}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint returns the list of Regions for the specified User.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder.RegionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder.RegionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.Regions.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// This endpoint returns the list of Regions for the specified User.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder.RegionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder.RegionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.RegionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// This endpoint returns the list of Regions for the specified User.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RegionsRequestBuilderGetQueryParameters 
        {
            /// <summary>The scope to use when getting the filter options for project assignments.The user scope returns only filter options for projects that the user is currently assigned to.The company scope returns all filter options for all projects in the company.The user scope is the default.</summary>
            [QueryParameter("scope")]
            public global::Procore.SDK.Core.Rest.V10.Companies.Item.Users.Item.Project_assignments.Filter_options.Regions.GetScopeQueryParameterType? Scope { get; set; }
        }
    }
}
#pragma warning restore CS0618
