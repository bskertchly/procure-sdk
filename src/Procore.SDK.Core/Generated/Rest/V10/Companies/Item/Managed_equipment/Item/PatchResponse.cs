// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item
{
    /// <summary>
    /// Managed Equipment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PatchResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Comapny ID the Managed Equipment was created with</summary>
        public int? CompanyId { get; set; }
        /// <summary>Is the equipment visible as a company equipment</summary>
        public bool? CompanyVisible { get; set; }
        /// <summary>Date the managed equipment was created</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The created_by property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_created_by? CreatedBy { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_created_by CreatedBy { get; set; }
#endif
        /// <summary>Project ids the equipment is involved in</summary>
        public int? CurrentProjectId { get; set; }
        /// <summary>Date the managed equipment was deleted</summary>
        public DateTimeOffset? DeletedAt { get; set; }
        /// <summary>description of the equipment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Identification number of the equipment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdentificationNumber { get; set; }
#nullable restore
#else
        public string IdentificationNumber { get; set; }
#endif
        /// <summary>Equipment Category</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_category? ManagedEquipmentCategory { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_category ManagedEquipmentCategory { get; set; }
#endif
        /// <summary>ID of the equipment category</summary>
        public int? ManagedEquipmentCategoryId { get; set; }
        /// <summary>Equipment Make</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_make? ManagedEquipmentMake { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_make ManagedEquipmentMake { get; set; }
#endif
        /// <summary>ID of the equipment make</summary>
        public int? ManagedEquipmentMakeId { get; set; }
        /// <summary>Equipment Model</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_model? ManagedEquipmentModel { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_model ManagedEquipmentModel { get; set; }
#endif
        /// <summary>ID of the equipment model</summary>
        public int? ManagedEquipmentModelId { get; set; }
        /// <summary>Equipment Type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_type? ManagedEquipmentType { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_type ManagedEquipmentType { get; set; }
#endif
        /// <summary>ID of the equipment type</summary>
        public int? ManagedEquipmentTypeId { get; set; }
        /// <summary>The name of the install managed equipment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The type of ownership</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ownership { get; set; }
#nullable restore
#else
        public string Ownership { get; set; }
#endif
        /// <summary>Serial number of the equipment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>Status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Date the managed equipment was updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>Year the equipment was manufactured in</summary>
        public int? Year { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse"/> and sets the default values.
        /// </summary>
        public PatchResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "company_id", n => { CompanyId = n.GetIntValue(); } },
                { "company_visible", n => { CompanyVisible = n.GetBoolValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "created_by", n => { CreatedBy = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_created_by>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_created_by.CreateFromDiscriminatorValue); } },
                { "current_project_id", n => { CurrentProjectId = n.GetIntValue(); } },
                { "deleted_at", n => { DeletedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "identification_number", n => { IdentificationNumber = n.GetStringValue(); } },
                { "managed_equipment_category", n => { ManagedEquipmentCategory = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_category>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_category.CreateFromDiscriminatorValue); } },
                { "managed_equipment_category_id", n => { ManagedEquipmentCategoryId = n.GetIntValue(); } },
                { "managed_equipment_make", n => { ManagedEquipmentMake = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_make>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_make.CreateFromDiscriminatorValue); } },
                { "managed_equipment_make_id", n => { ManagedEquipmentMakeId = n.GetIntValue(); } },
                { "managed_equipment_model", n => { ManagedEquipmentModel = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_model>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_model.CreateFromDiscriminatorValue); } },
                { "managed_equipment_model_id", n => { ManagedEquipmentModelId = n.GetIntValue(); } },
                { "managed_equipment_type", n => { ManagedEquipmentType = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_type>(global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_type.CreateFromDiscriminatorValue); } },
                { "managed_equipment_type_id", n => { ManagedEquipmentTypeId = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "ownership", n => { Ownership = n.GetStringValue(); } },
                { "serial_number", n => { SerialNumber = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "year", n => { Year = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("company_id", CompanyId);
            writer.WriteBoolValue("company_visible", CompanyVisible);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_created_by>("created_by", CreatedBy);
            writer.WriteIntValue("current_project_id", CurrentProjectId);
            writer.WriteDateTimeOffsetValue("deleted_at", DeletedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("identification_number", IdentificationNumber);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_category>("managed_equipment_category", ManagedEquipmentCategory);
            writer.WriteIntValue("managed_equipment_category_id", ManagedEquipmentCategoryId);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_make>("managed_equipment_make", ManagedEquipmentMake);
            writer.WriteIntValue("managed_equipment_make_id", ManagedEquipmentMakeId);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_model>("managed_equipment_model", ManagedEquipmentModel);
            writer.WriteIntValue("managed_equipment_model_id", ManagedEquipmentModelId);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.Companies.Item.Managed_equipment.Item.PatchResponse_managed_equipment_type>("managed_equipment_type", ManagedEquipmentType);
            writer.WriteIntValue("managed_equipment_type_id", ManagedEquipmentTypeId);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("ownership", Ownership);
            writer.WriteStringValue("serial_number", SerialNumber);
            writer.WriteStringValue("status", Status);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteIntValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
