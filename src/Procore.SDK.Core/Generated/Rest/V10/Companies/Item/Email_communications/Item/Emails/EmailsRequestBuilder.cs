// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\companies\{company_id}\email_communications\{communication_-id}\emails
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EmailsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Procore.SDK.Core.rest.v10.companies.item.email_communications.item.emails.item collection</summary>
        /// <param name="position">Email ID</param>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Item.WithEmail_ItemRequestBuilder"/></returns>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Item.WithEmail_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("email_id", position);
                return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Item.WithEmail_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EmailsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/email_communications/{communication_%2Did}/emails?topic_id={topic_id}&topic_type={topic_type}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EmailsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/companies/{company_id}/email_communications/{communication_%2Did}/emails?topic_id={topic_id}&topic_type={topic_type}", rawUrl)
        {
        }
        /// <summary>
        /// Creates an email on a given company-level communication
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Emails400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Emails401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Emails403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostResponse?> PostAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder.EmailsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostResponse> PostAsync(global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder.EmailsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Emails400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Emails401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.Emails403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostResponse>(requestInfo, global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates an email on a given company-level communication
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder.EmailsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder.EmailsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.EmailsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Creates an email on a given company-level communication
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EmailsRequestBuilderPostQueryParameters 
        {
            /// <summary>Topic ID</summary>
            [QueryParameter("topic_id")]
            public int? TopicId { get; set; }
            /// <summary>The type of the topic to be associated with the communication</summary>
            [QueryParameter("topic_type")]
            public global::Procore.SDK.Core.Rest.V10.Companies.Item.Email_communications.Item.Emails.PostTopic_typeQueryParameterType? TopicType { get; set; }
        }
    }
}
#pragma warning restore CS0618
