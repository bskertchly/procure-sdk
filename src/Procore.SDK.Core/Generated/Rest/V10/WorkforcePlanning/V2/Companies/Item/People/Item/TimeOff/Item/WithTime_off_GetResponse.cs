// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item
{
    /// <summary>
    /// A single time off record.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTime_off_GetResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether the time off applies to Saturdays.</summary>
        public bool? ApplyToSaturday { get; set; }
        /// <summary>Whether the time off applies to Sundays.</summary>
        public bool? ApplyToSunday { get; set; }
        /// <summary>End time of the time off (formatted as HH:MM am/pm).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BatchEndTime { get; set; }
#nullable restore
#else
        public string BatchEndTime { get; set; }
#endif
        /// <summary>Start time of the time off (formatted as HH:MM am/pm).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BatchStartTime { get; set; }
#nullable restore
#else
        public string BatchStartTime { get; set; }
#endif
        /// <summary>Frequency of repetition (e.g., every 1 week, every 2 weeks).</summary>
        public int? Cadence { get; set; }
        /// <summary>ID of the company this Time Off is associated with.</summary>
        public Guid? CompanyId { get; set; }
        /// <summary>End date of the time off (MM/DD/YY).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDay { get; set; }
#nullable restore
#else
        public string EndDay { get; set; }
#endif
        /// <summary>Unique identifier for the Time Off record.</summary>
        public Guid? Id { get; set; }
        /// <summary>List of instances for repeating time off.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse_instances>? Instances { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse_instances> Instances { get; set; }
#endif
        /// <summary>Whether the time off is paid.</summary>
        public bool? IsPaid { get; set; }
        /// <summary>ID of the person associated with this Time Off entry.</summary>
        public Guid? PersonId { get; set; }
        /// <summary>Reason for the time off.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>The repeat interval for recurring time off.</summary>
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse_repeat? Repeat { get; set; }
        /// <summary>The end date of the repeating time off.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepeatEndDay { get; set; }
#nullable restore
#else
        public string RepeatEndDay { get; set; }
#endif
        /// <summary>Start date of the time off (MM/DD/YY).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDay { get; set; }
#nullable restore
#else
        public string StartDay { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse"/> and sets the default values.
        /// </summary>
        public WithTime_off_GetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apply_to_saturday", n => { ApplyToSaturday = n.GetBoolValue(); } },
                { "apply_to_sunday", n => { ApplyToSunday = n.GetBoolValue(); } },
                { "batch_end_time", n => { BatchEndTime = n.GetStringValue(); } },
                { "batch_start_time", n => { BatchStartTime = n.GetStringValue(); } },
                { "cadence", n => { Cadence = n.GetIntValue(); } },
                { "company_id", n => { CompanyId = n.GetGuidValue(); } },
                { "end_day", n => { EndDay = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "instances", n => { Instances = n.GetCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse_instances>(global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse_instances.CreateFromDiscriminatorValue)?.AsList(); } },
                { "is_paid", n => { IsPaid = n.GetBoolValue(); } },
                { "person_id", n => { PersonId = n.GetGuidValue(); } },
                { "reason", n => { Reason = n.GetStringValue(); } },
                { "repeat", n => { Repeat = n.GetEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse_repeat>(); } },
                { "repeat_end_day", n => { RepeatEndDay = n.GetStringValue(); } },
                { "start_day", n => { StartDay = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("apply_to_saturday", ApplyToSaturday);
            writer.WriteBoolValue("apply_to_sunday", ApplyToSunday);
            writer.WriteStringValue("batch_end_time", BatchEndTime);
            writer.WriteStringValue("batch_start_time", BatchStartTime);
            writer.WriteIntValue("cadence", Cadence);
            writer.WriteGuidValue("company_id", CompanyId);
            writer.WriteStringValue("end_day", EndDay);
            writer.WriteGuidValue("id", Id);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse_instances>("instances", Instances);
            writer.WriteBoolValue("is_paid", IsPaid);
            writer.WriteGuidValue("person_id", PersonId);
            writer.WriteStringValue("reason", Reason);
            writer.WriteEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.TimeOff.Item.WithTime_off_GetResponse_repeat>("repeat", Repeat);
            writer.WriteStringValue("repeat_end_day", RepeatEndDay);
            writer.WriteStringValue("start_day", StartDay);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
