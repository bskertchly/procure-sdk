// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects
{
    /// <summary>
    /// Request body schema for creating a new Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ProjectsPostRequestBody : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>First part of the Project&apos;s address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address1 { get; set; }
#nullable restore
#else
        public string Address1 { get; set; }
#endif
        /// <summary>Second part of the Project&apos;s address (e.g., Apartment, Suite, Unit).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address2 { get; set; }
#nullable restore
#else
        public string Address2 { get; set; }
#endif
        /// <summary>The bid rate for the Project.</summary>
        public double? BidRate { get; set; }
        /// <summary>Categories define buckets for resource assignments. Each Category can have nested Subcategories.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_categories>? Categories { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_categories> Categories { get; set; }
#endif
        /// <summary>The City/Town for the Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CityTown { get; set; }
#nullable restore
#else
        public string CityTown { get; set; }
#endif
        /// <summary>If loading already closed jobs for historical tracking, this field can be populated.</summary>
        public DateTimeOffset? ClosedDate { get; set; }
        /// <summary>Hexadecimal color code for the Project. Helps with categorization and visual distinction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>The Country for the Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Name of the customer associated with the Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerName { get; set; }
#nullable restore
#else
        public string CustomerName { get; set; }
#endif
        /// <summary>Default time the Project&apos;s workday ends. Must follow `HH:MM am/pm` format. Allowed increments: 15 minutes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DailyEndTime { get; set; }
#nullable restore
#else
        public string DailyEndTime { get; set; }
#endif
        /// <summary>Default time the Project&apos;s workday begins. Must follow `HH:MM am/pm` format. Allowed increments: 15 minutes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DailyStartTime { get; set; }
#nullable restore
#else
        public string DailyStartTime { get; set; }
#endif
        /// <summary>Estimated end date for the Project.</summary>
        public DateTimeOffset? EstEndDate { get; set; }
        /// <summary>UUID references to the Groups this Project should be available to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? GroupIds { get; set; }
#nullable restore
#else
        public List<Guid?> GroupIds { get; set; }
#endif
        /// <summary>The name of the Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The percentage of the Project that is complete.</summary>
        public double? PercentComplete { get; set; }
        /// <summary>A unique identifier for the Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectNumber { get; set; }
#nullable restore
#else
        public string ProjectNumber { get; set; }
#endif
        /// <summary>Any categorical classifier you use internally to label your Projects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectType { get; set; }
#nullable restore
#else
        public string ProjectType { get; set; }
#endif
        /// <summary>Assigns specific People to Roles on the Project. Useful for defining responsibilities and for notifications.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_roles>? Roles { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_roles> Roles { get; set; }
#endif
        /// <summary>Project&apos;s start date. Required if `status` is `active`.</summary>
        public DateTimeOffset? StartDate { get; set; }
        /// <summary>The State/Province for the Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateProvince { get; set; }
#nullable restore
#else
        public string StateProvince { get; set; }
#endif
        /// <summary>Controls Project visibility and filtering. `active` - Project is currently in progress. `pending` - Project is planned but not started. `inactive` - Project is no longer active.</summary>
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_status? Status { get; set; }
        /// <summary>Tags can be used as categorical labels or to define requirements for people assigned to the Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_tag_instances>? TagInstances { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_tag_instances> TagInstances { get; set; }
#endif
        /// <summary>The timezone to use for scheduling outbound messages for the Project. If not provided, the Group timezone will be used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>Sets an hourly wage rate for specific Job Titles on this Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_wage_overrides>? WageOverrides { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_wage_overrides> WageOverrides { get; set; }
#endif
        /// <summary>The Zip/Postal Code for the Project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zipcode { get; set; }
#nullable restore
#else
        public string Zipcode { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody"/> and sets the default values.
        /// </summary>
        public ProjectsPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address_1", n => { Address1 = n.GetStringValue(); } },
                { "address_2", n => { Address2 = n.GetStringValue(); } },
                { "bid_rate", n => { BidRate = n.GetDoubleValue(); } },
                { "categories", n => { Categories = n.GetCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_categories>(global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_categories.CreateFromDiscriminatorValue)?.AsList(); } },
                { "city_town", n => { CityTown = n.GetStringValue(); } },
                { "closed_date", n => { ClosedDate = n.GetDateTimeOffsetValue(); } },
                { "color", n => { Color = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "customer_name", n => { CustomerName = n.GetStringValue(); } },
                { "daily_end_time", n => { DailyEndTime = n.GetStringValue(); } },
                { "daily_start_time", n => { DailyStartTime = n.GetStringValue(); } },
                { "est_end_date", n => { EstEndDate = n.GetDateTimeOffsetValue(); } },
                { "group_ids", n => { GroupIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "percent_complete", n => { PercentComplete = n.GetDoubleValue(); } },
                { "project_number", n => { ProjectNumber = n.GetStringValue(); } },
                { "project_type", n => { ProjectType = n.GetStringValue(); } },
                { "roles", n => { Roles = n.GetCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_roles>(global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_roles.CreateFromDiscriminatorValue)?.AsList(); } },
                { "start_date", n => { StartDate = n.GetDateTimeOffsetValue(); } },
                { "state_province", n => { StateProvince = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_status>(); } },
                { "tag_instances", n => { TagInstances = n.GetCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_tag_instances>(global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_tag_instances.CreateFromDiscriminatorValue)?.AsList(); } },
                { "timezone", n => { Timezone = n.GetStringValue(); } },
                { "wage_overrides", n => { WageOverrides = n.GetCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_wage_overrides>(global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_wage_overrides.CreateFromDiscriminatorValue)?.AsList(); } },
                { "zipcode", n => { Zipcode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address_1", Address1);
            writer.WriteStringValue("address_2", Address2);
            writer.WriteDoubleValue("bid_rate", BidRate);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_categories>("categories", Categories);
            writer.WriteStringValue("city_town", CityTown);
            writer.WriteDateTimeOffsetValue("closed_date", ClosedDate);
            writer.WriteStringValue("color", Color);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("customer_name", CustomerName);
            writer.WriteStringValue("daily_end_time", DailyEndTime);
            writer.WriteStringValue("daily_start_time", DailyStartTime);
            writer.WriteDateTimeOffsetValue("est_end_date", EstEndDate);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("group_ids", GroupIds);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("percent_complete", PercentComplete);
            writer.WriteStringValue("project_number", ProjectNumber);
            writer.WriteStringValue("project_type", ProjectType);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_roles>("roles", Roles);
            writer.WriteDateTimeOffsetValue("start_date", StartDate);
            writer.WriteStringValue("state_province", StateProvince);
            writer.WriteEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_status>("status", Status);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_tag_instances>("tag_instances", TagInstances);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Projects.ProjectsPostRequestBody_wage_overrides>("wage_overrides", WageOverrides);
            writer.WriteStringValue("zipcode", Zipcode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
