// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item
{
    /// <summary>
    /// Request body schema for updating a Person. Only send properties that need to be updated.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithPerson_PostRequestBody : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>First part of the Person&apos;s address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address1 { get; set; }
#nullable restore
#else
        public string Address1 { get; set; }
#endif
        /// <summary>Second part of the Person&apos;s address (e.g., Apartment, Suite, Unit).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address2 { get; set; }
#nullable restore
#else
        public string Address2 { get; set; }
#endif
        /// <summary>Determines if the Person can receive email notifications.</summary>
        public bool? CanReceiveEmail { get; set; }
        /// <summary>Determines if the Person can receive mobile push notifications if they have the app installed.</summary>
        public bool? CanReceiveMobile { get; set; }
        /// <summary>Determines if the Person can receive SMS notifications.</summary>
        public bool? CanReceiveSms { get; set; }
        /// <summary>The city or town where the Person is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CityTown { get; set; }
#nullable restore
#else
        public string CityTown { get; set; }
#endif
        /// <summary>The country where the Person is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Date of birth of the Person. Accepts ISO Date String, UTC Date String, or MS Numeric Epoch Time.</summary>
        public Date? Dob { get; set; }
        /// <summary>The email that the Person will log in with. **Required if updating `is_user` to `true`**. Must be unique across the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>Email address of the emergency contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmergencyContactEmail { get; set; }
#nullable restore
#else
        public string EmergencyContactEmail { get; set; }
#endif
        /// <summary>Name of the Person&apos;s emergency contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmergencyContactName { get; set; }
#nullable restore
#else
        public string EmergencyContactName { get; set; }
#endif
        /// <summary>Phone number of the emergency contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmergencyContactNumber { get; set; }
#nullable restore
#else
        public string EmergencyContactNumber { get; set; }
#endif
        /// <summary>The relationship between the Person and their emergency contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmergencyContactRelation { get; set; }
#nullable restore
#else
        public string EmergencyContactRelation { get; set; }
#endif
        /// <summary>Internal employee identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmployeeNumber { get; set; }
#nullable restore
#else
        public string EmployeeNumber { get; set; }
#endif
        /// <summary>First Name of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>Array of UUIDs representing the Groups this Person belongs to. **Cannot be empty** for an assignable resource or a non-admin Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? GroupIds { get; set; }
#nullable restore
#else
        public List<Guid?> GroupIds { get; set; }
#endif
        /// <summary>Date the Person was hired. Accepts ISO Date String, UTC Date String, or MS Numeric Epoch Time.</summary>
        public Date? HiredDate { get; set; }
        /// <summary>Hourly wage rate for the Person. Used for automatic spend tracking.</summary>
        public double? HourlyWage { get; set; }
        /// <summary>Determines if the Person can be assigned to tasks.</summary>
        public bool? IsAssignable { get; set; }
        /// <summary>Specifies if the Person identifies as male.</summary>
        public bool? IsMale { get; set; }
        /// <summary>UUID reference to a Job Title in the LaborChart System.</summary>
        public Guid? JobTitleId { get; set; }
        /// <summary>Language preference. Currently only `english` is supported.</summary>
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody_language? Language { get; set; }
        /// <summary>Last Name of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>UUID of the Notification Profile for the user.</summary>
        public Guid? NotificationProfileId { get; set; }
        /// <summary>UUID of the Permission Level assigned to the Person. **Required when setting `is_user: true`**.</summary>
        public Guid? PermissionLevelId { get; set; }
        /// <summary>The Person&apos;s phone number, including country and area code. Must be **unique** among all registered People.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>The state or province where the Person is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateProvince { get; set; }
#nullable restore
#else
        public string StateProvince { get; set; }
#endif
        /// <summary>The status of the Person. `active` means the person is visible in all pages, while `inactive` hides the person unless filtered. Inactive People do not count against billing plans.</summary>
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody_status? Status { get; set; }
        /// <summary>The postal/zip code of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zipcode { get; set; }
#nullable restore
#else
        public string Zipcode { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody"/> and sets the default values.
        /// </summary>
        public WithPerson_PostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address_1", n => { Address1 = n.GetStringValue(); } },
                { "address_2", n => { Address2 = n.GetStringValue(); } },
                { "can_receive_email", n => { CanReceiveEmail = n.GetBoolValue(); } },
                { "can_receive_mobile", n => { CanReceiveMobile = n.GetBoolValue(); } },
                { "can_receive_sms", n => { CanReceiveSms = n.GetBoolValue(); } },
                { "city_town", n => { CityTown = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "dob", n => { Dob = n.GetDateValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "emergency_contact_email", n => { EmergencyContactEmail = n.GetStringValue(); } },
                { "emergency_contact_name", n => { EmergencyContactName = n.GetStringValue(); } },
                { "emergency_contact_number", n => { EmergencyContactNumber = n.GetStringValue(); } },
                { "emergency_contact_relation", n => { EmergencyContactRelation = n.GetStringValue(); } },
                { "employee_number", n => { EmployeeNumber = n.GetStringValue(); } },
                { "first_name", n => { FirstName = n.GetStringValue(); } },
                { "group_ids", n => { GroupIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "hired_date", n => { HiredDate = n.GetDateValue(); } },
                { "hourly_wage", n => { HourlyWage = n.GetDoubleValue(); } },
                { "is_assignable", n => { IsAssignable = n.GetBoolValue(); } },
                { "is_male", n => { IsMale = n.GetBoolValue(); } },
                { "job_title_id", n => { JobTitleId = n.GetGuidValue(); } },
                { "language", n => { Language = n.GetEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody_language>(); } },
                { "last_name", n => { LastName = n.GetStringValue(); } },
                { "notification_profile_id", n => { NotificationProfileId = n.GetGuidValue(); } },
                { "permission_level_id", n => { PermissionLevelId = n.GetGuidValue(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "state_province", n => { StateProvince = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody_status>(); } },
                { "zipcode", n => { Zipcode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address_1", Address1);
            writer.WriteStringValue("address_2", Address2);
            writer.WriteBoolValue("can_receive_email", CanReceiveEmail);
            writer.WriteBoolValue("can_receive_mobile", CanReceiveMobile);
            writer.WriteBoolValue("can_receive_sms", CanReceiveSms);
            writer.WriteStringValue("city_town", CityTown);
            writer.WriteStringValue("country", Country);
            writer.WriteDateValue("dob", Dob);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("emergency_contact_email", EmergencyContactEmail);
            writer.WriteStringValue("emergency_contact_name", EmergencyContactName);
            writer.WriteStringValue("emergency_contact_number", EmergencyContactNumber);
            writer.WriteStringValue("emergency_contact_relation", EmergencyContactRelation);
            writer.WriteStringValue("employee_number", EmployeeNumber);
            writer.WriteStringValue("first_name", FirstName);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("group_ids", GroupIds);
            writer.WriteDateValue("hired_date", HiredDate);
            writer.WriteDoubleValue("hourly_wage", HourlyWage);
            writer.WriteBoolValue("is_assignable", IsAssignable);
            writer.WriteBoolValue("is_male", IsMale);
            writer.WriteGuidValue("job_title_id", JobTitleId);
            writer.WriteEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody_language>("language", Language);
            writer.WriteStringValue("last_name", LastName);
            writer.WriteGuidValue("notification_profile_id", NotificationProfileId);
            writer.WriteGuidValue("permission_level_id", PermissionLevelId);
            writer.WriteStringValue("phone", Phone);
            writer.WriteStringValue("state_province", StateProvince);
            writer.WriteEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.People.Item.WithPerson_PostRequestBody_status>("status", Status);
            writer.WriteStringValue("zipcode", Zipcode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
