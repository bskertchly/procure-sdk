// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People
{
    /// <summary>
    /// Response schema for a single Person.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class People : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>First part of the Person&apos;s address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address1 { get; set; }
#nullable restore
#else
        public string Address1 { get; set; }
#endif
        /// <summary>Second part of the Person&apos;s address, if applicable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address2 { get; set; }
#nullable restore
#else
        public string Address2 { get; set; }
#endif
        /// <summary>Determines if the Person can receive email notifications.</summary>
        public bool? CanRecieveEmail { get; set; }
        /// <summary>Determines if the Person can receive SMS notifications.</summary>
        public bool? CanRecieveSms { get; set; }
        /// <summary>The city or town where the Person is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CityTown { get; set; }
#nullable restore
#else
        public string CityTown { get; set; }
#endif
        /// <summary>Unique identifier for the Company.</summary>
        public Guid? CompanyId { get; set; }
        /// <summary>The country where the Person is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Timestamp of when the Person was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>Date of birth of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Dob { get; set; }
#nullable restore
#else
        public string Dob { get; set; }
#endif
        /// <summary>The email associated with the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>Email address of the emergency contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmergencyContactEmail { get; set; }
#nullable restore
#else
        public string EmergencyContactEmail { get; set; }
#endif
        /// <summary>Name of the Person’s emergency contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmergencyContactName { get; set; }
#nullable restore
#else
        public string EmergencyContactName { get; set; }
#endif
        /// <summary>Phone number of the emergency contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmergencyContactNumber { get; set; }
#nullable restore
#else
        public string EmergencyContactNumber { get; set; }
#endif
        /// <summary>The relationship between the Person and their emergency contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmergencyContactRelation { get; set; }
#nullable restore
#else
        public string EmergencyContactRelation { get; set; }
#endif
        /// <summary>Internal employee identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmployeeNumber { get; set; }
#nullable restore
#else
        public string EmployeeNumber { get; set; }
#endif
        /// <summary>List of Group IDs the Person belongs to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? GroupIds { get; set; }
#nullable restore
#else
        public List<Guid?> GroupIds { get; set; }
#endif
        /// <summary>Date the Person was hired.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HiredDate { get; set; }
#nullable restore
#else
        public string HiredDate { get; set; }
#endif
        /// <summary>Hourly wage rate for the Person.</summary>
        public double? HourlyWage { get; set; }
        /// <summary>Unique identifier for the Person.</summary>
        public Guid? Id { get; set; }
        /// <summary>Determines if the Person can be assigned to tasks.</summary>
        public bool? IsAssignable { get; set; }
        /// <summary>Specifies if the Person identifies as male.</summary>
        public bool? IsMale { get; set; }
        /// <summary>Determines if the Person can log into the app.</summary>
        public bool? IsUser { get; set; }
        /// <summary>UUID reference to the Person’s Job Title.</summary>
        public Guid? JobTitleId { get; set; }
        /// <summary>First and Last Name of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_name? Name { get; set; }
#nullable restore
#else
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_name Name { get; set; }
#endif
        /// <summary>The Person&apos;s phone number, if available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>The state or province where the Person is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateProvince { get; set; }
#nullable restore
#else
        public string StateProvince { get; set; }
#endif
        /// <summary>Status of the Person.</summary>
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_status? Status { get; set; }
        /// <summary>List of tags applied to the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_tag_instances>? TagInstances { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_tag_instances> TagInstances { get; set; }
#endif
        /// <summary>Timestamp of when the Person was last updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>The postal/zip code of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zipcode { get; set; }
#nullable restore
#else
        public string Zipcode { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People"/> and sets the default values.
        /// </summary>
        public People()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address_1", n => { Address1 = n.GetStringValue(); } },
                { "address_2", n => { Address2 = n.GetStringValue(); } },
                { "can_recieve_email", n => { CanRecieveEmail = n.GetBoolValue(); } },
                { "can_recieve_sms", n => { CanRecieveSms = n.GetBoolValue(); } },
                { "city_town", n => { CityTown = n.GetStringValue(); } },
                { "company_id", n => { CompanyId = n.GetGuidValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "dob", n => { Dob = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "emergency_contact_email", n => { EmergencyContactEmail = n.GetStringValue(); } },
                { "emergency_contact_name", n => { EmergencyContactName = n.GetStringValue(); } },
                { "emergency_contact_number", n => { EmergencyContactNumber = n.GetStringValue(); } },
                { "emergency_contact_relation", n => { EmergencyContactRelation = n.GetStringValue(); } },
                { "employee_number", n => { EmployeeNumber = n.GetStringValue(); } },
                { "group_ids", n => { GroupIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "hired_date", n => { HiredDate = n.GetStringValue(); } },
                { "hourly_wage", n => { HourlyWage = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "is_assignable", n => { IsAssignable = n.GetBoolValue(); } },
                { "is_male", n => { IsMale = n.GetBoolValue(); } },
                { "is_user", n => { IsUser = n.GetBoolValue(); } },
                { "job_title_id", n => { JobTitleId = n.GetGuidValue(); } },
                { "name", n => { Name = n.GetObjectValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_name>(global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_name.CreateFromDiscriminatorValue); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "state_province", n => { StateProvince = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_status>(); } },
                { "tag_instances", n => { TagInstances = n.GetCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_tag_instances>(global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_tag_instances.CreateFromDiscriminatorValue)?.AsList(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
                { "zipcode", n => { Zipcode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address_1", Address1);
            writer.WriteStringValue("address_2", Address2);
            writer.WriteBoolValue("can_recieve_email", CanRecieveEmail);
            writer.WriteBoolValue("can_recieve_sms", CanRecieveSms);
            writer.WriteStringValue("city_town", CityTown);
            writer.WriteGuidValue("company_id", CompanyId);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteStringValue("dob", Dob);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("emergency_contact_email", EmergencyContactEmail);
            writer.WriteStringValue("emergency_contact_name", EmergencyContactName);
            writer.WriteStringValue("emergency_contact_number", EmergencyContactNumber);
            writer.WriteStringValue("emergency_contact_relation", EmergencyContactRelation);
            writer.WriteStringValue("employee_number", EmployeeNumber);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("group_ids", GroupIds);
            writer.WriteStringValue("hired_date", HiredDate);
            writer.WriteDoubleValue("hourly_wage", HourlyWage);
            writer.WriteGuidValue("id", Id);
            writer.WriteBoolValue("is_assignable", IsAssignable);
            writer.WriteBoolValue("is_male", IsMale);
            writer.WriteBoolValue("is_user", IsUser);
            writer.WriteGuidValue("job_title_id", JobTitleId);
            writer.WriteObjectValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_name>("name", Name);
            writer.WriteStringValue("phone", Phone);
            writer.WriteStringValue("state_province", StateProvince);
            writer.WriteEnumValue<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_status>("status", Status);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People_tag_instances>("tag_instances", TagInstances);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteStringValue("zipcode", Zipcode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
