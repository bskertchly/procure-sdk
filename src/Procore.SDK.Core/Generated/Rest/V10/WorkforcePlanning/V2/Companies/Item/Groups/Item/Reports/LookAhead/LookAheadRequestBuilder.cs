// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\workforce-planning\v2\companies\{company_id}\groups\{group_id}\reports\look-ahead
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LookAheadRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LookAheadRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/workforce-planning/v2/companies/{company_id}/groups/{group_id}/reports/look-ahead{?assignmentCount*,assignmentDuration*,assignmentEnd*,assignmentStart*,availableAfterDate*,employee_number*,jobTitle*,jobTitleIds*,projectName*,project_number*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LookAheadRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/workforce-planning/v2/companies/{company_id}/groups/{group_id}/reports/look-ahead{?assignmentCount*,assignmentDuration*,assignmentEnd*,assignmentStart*,availableAfterDate*,employee_number*,jobTitle*,jobTitleIds*,projectName*,project_number*}", rawUrl)
        {
        }
        /// <summary>
        /// Fetches the Look Ahead report which provides future assignments and availability details for People within a specified Group. To span all Groups in the company, use `&quot;all&quot;` in place of `{group_id}`.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead401Error">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder.LookAheadRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder.LookAheadRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead401Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead>(requestInfo, global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAhead.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Fetches the Look Ahead report which provides future assignments and availability details for People within a specified Group. To span all Groups in the company, use `&quot;all&quot;` in place of `{group_id}`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder.LookAheadRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder.LookAheadRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.LookAhead.LookAheadRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Fetches the Look Ahead report which provides future assignments and availability details for People within a specified Group. To span all Groups in the company, use `&quot;all&quot;` in place of `{group_id}`.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LookAheadRequestBuilderGetQueryParameters 
        {
            /// <summary>The number of future assignments to return per person.</summary>
            [QueryParameter("assignmentCount")]
            public int? AssignmentCount { get; set; }
            /// <summary>Whether to include a calculated duration for each assignment.</summary>
            [QueryParameter("assignmentDuration")]
            public bool? AssignmentDuration { get; set; }
            /// <summary>Whether to include the assignment end date.</summary>
            [QueryParameter("assignmentEnd")]
            public bool? AssignmentEnd { get; set; }
            /// <summary>Whether to include the assignment start date.</summary>
            [QueryParameter("assignmentStart")]
            public bool? AssignmentStart { get; set; }
            /// <summary>Whether to include the last day a person is assigned in the future.</summary>
            [QueryParameter("availableAfterDate")]
            public bool? AvailableAfterDate { get; set; }
            /// <summary>Filter results by the exact employee number of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("employee_number")]
            public string? EmployeeNumber { get; set; }
#nullable restore
#else
            [QueryParameter("employee_number")]
            public string EmployeeNumber { get; set; }
#endif
            /// <summary>Whether to include the person&apos;s Job Title.</summary>
            [QueryParameter("jobTitle")]
            public bool? JobTitle { get; set; }
            /// <summary>An array of UUIDs representing the Job Titles to include in the report. People with Job Titles not in this list will be excluded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("jobTitleIds")]
            public Guid?[]? JobTitleIds { get; set; }
#nullable restore
#else
            [QueryParameter("jobTitleIds")]
            public Guid?[] JobTitleIds { get; set; }
#endif
            /// <summary>Whether to include the project name for each assignment.</summary>
            [QueryParameter("projectName")]
            public bool? ProjectName { get; set; }
            /// <summary>Filters items by their exact project number. The query performs an exact match. Example usage: `/v2/companies/{company_id}/...?project_number=BR-2024`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project_number")]
            public string? ProjectNumber { get; set; }
#nullable restore
#else
            [QueryParameter("project_number")]
            public string ProjectNumber { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
