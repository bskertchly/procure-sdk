// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\workforce-planning\v2\companies\{company_id}\groups\{group_id}\reports\tag-action
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TagActionRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TagActionRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/workforce-planning/v2/companies/{company_id}/groups/{group_id}/reports/tag-action{?employee_number*,jobTitle*,tagIds*,warningTags*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TagActionRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/workforce-planning/v2/companies/{company_id}/groups/{group_id}/reports/tag-action{?employee_number*,jobTitle*,tagIds*,warningTags*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves a list of People who have Tags that are either expired or within their expiration warning period. This report is executed under the context of the specified Group ID. If you want to fetch data for all groups in a company, use `all` in place of `{group_id}`.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction401Error">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder.TagActionRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder.TagActionRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction401Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction>(requestInfo, global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagAction.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Retrieves a list of People who have Tags that are either expired or within their expiration warning period. This report is executed under the context of the specified Group ID. If you want to fetch data for all groups in a company, use `all` in place of `{group_id}`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder.TagActionRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder.TagActionRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Reports.TagAction.TagActionRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves a list of People who have Tags that are either expired or within their expiration warning period. This report is executed under the context of the specified Group ID. If you want to fetch data for all groups in a company, use `all` in place of `{group_id}`.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TagActionRequestBuilderGetQueryParameters 
        {
            /// <summary>Filter results by the exact employee number of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("employee_number")]
            public string? EmployeeNumber { get; set; }
#nullable restore
#else
            [QueryParameter("employee_number")]
            public string EmployeeNumber { get; set; }
#endif
            /// <summary>Whether to include the person&apos;s Job Title.</summary>
            [QueryParameter("jobTitle")]
            public bool? JobTitle { get; set; }
            /// <summary>Array of UUIDs representing the Tags you want to filter the report by. If not provided, the report includes all Tags available to the Group.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tagIds")]
            public Guid?[]? TagIds { get; set; }
#nullable restore
#else
            [QueryParameter("tagIds")]
            public Guid?[] TagIds { get; set; }
#endif
            /// <summary>Determines whether Tags within their expiration warning period should be included in the report. If set to `false`, only expired Tags will be included.</summary>
            [QueryParameter("warningTags")]
            public bool? WarningTags { get; set; }
        }
    }
}
#pragma warning restore CS0618
