// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\workforce-planning\v2\companies\{company_id}\groups\{group_id}\groups\people
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PeopleRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PeopleRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/workforce-planning/v2/companies/{company_id}/groups/{group_id}/groups/people{?created_after*,created_at*,created_before*,custom_fields_integration_name*,email*,employee_number*,first_name*,last_name*,page*,updated_after*,updated_at*,updated_before*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PeopleRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/workforce-planning/v2/companies/{company_id}/groups/{group_id}/groups/people{?created_after*,created_at*,created_before*,custom_fields_integration_name*,email*,employee_number*,first_name*,last_name*,page*,updated_after*,updated_at*,updated_before*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns array of Person objects.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder.PeopleRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder.PeopleRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People404Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People>(requestInfo, global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.People.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns array of Person objects.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder.PeopleRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder.PeopleRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.Core.Rest.V10.WorkforcePlanning.V2.Companies.Item.Groups.Item.Groups.People.PeopleRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns array of Person objects.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PeopleRequestBuilderGetQueryParameters 
        {
            /// <summary>Filters items created on or after the specified date (inclusive). Accepts an ISO 8601 date string.</summary>
            [QueryParameter("created_after")]
            public Date? CreatedAfter { get; set; }
            /// <summary>Filters items based on their creation timestamp. Accepts an ISO 8601 date string.</summary>
            [QueryParameter("created_at")]
            public Date? CreatedAt { get; set; }
            /// <summary>Filters items created on or before the specified date (inclusive). Accepts an ISO 8601 date string.</summary>
            [QueryParameter("created_before")]
            public Date? CreatedBefore { get; set; }
            /// <summary>Filter results by a **Custom Field&apos;s** `integration_name`. This allows searching based on custom-defined attributes in the system. Example usage: `/v2/companies/{company_id}/...?my_custom_field=northwest`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("custom_fields_integration_name")]
            public string? CustomFieldsIntegrationName { get; set; }
#nullable restore
#else
            [QueryParameter("custom_fields_integration_name")]
            public string CustomFieldsIntegrationName { get; set; }
#endif
            /// <summary>Filter results by the exact email address of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("email")]
            public string? Email { get; set; }
#nullable restore
#else
            [QueryParameter("email")]
            public string Email { get; set; }
#endif
            /// <summary>Filter results by the exact employee number of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("employee_number")]
            public string? EmployeeNumber { get; set; }
#nullable restore
#else
            [QueryParameter("employee_number")]
            public string EmployeeNumber { get; set; }
#endif
            /// <summary>Filter results by the exact first name of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("first_name")]
            public string? FirstName { get; set; }
#nullable restore
#else
            [QueryParameter("first_name")]
            public string FirstName { get; set; }
#endif
            /// <summary>Filter results by the exact last name of the Person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("last_name")]
            public string? LastName { get; set; }
#nullable restore
#else
            [QueryParameter("last_name")]
            public string LastName { get; set; }
#endif
            /// <summary>This is a **0-based index** representing the page slice of the data you want to retrieve. Each page contains up to **400 items**.### **📌 Pageable Endpoints** People endpoints that return multiple records **support pagination**. It is recommended to use this feature to prevent network timeouts from excessively large data requests.### **📌 Response Structure** A successful response will include the following properties:- **`possible_pages`** *(integer)* → Total number of pages available to retrieve all data. - **`current_page`** *(integer)* → The **0-based index** of the page retrieved. - **`data`** *(array)* → List of records returned for the requested page (up to 400 items per page).If a **page value exceeds** `possible_pages`, the `data` property will return an **empty array**.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Filters items updated on or after the specified date (inclusive). Accepts an ISO 8601 date string.</summary>
            [QueryParameter("updated_after")]
            public Date? UpdatedAfter { get; set; }
            /// <summary>Filters items based on their last updated timestamp. Accepts an ISO 8601 date string.</summary>
            [QueryParameter("updated_at")]
            public Date? UpdatedAt { get; set; }
            /// <summary>Filters items updated on or before the specified date (inclusive). Accepts an ISO 8601 date string.</summary>
            [QueryParameter("updated_before")]
            public Date? UpdatedBefore { get; set; }
        }
    }
}
#pragma warning restore CS0618
