// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.FieldProductivity.Rest.V10.Timecard_entries.Item
{
    /// <summary>
    /// Timecard Entry object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Timecard_entriesPatchRequestBody_timecard_entry : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Billable status of the Timecard Entry</summary>
        public bool? Billable { get; set; }
        /// <summary>The datetime a timecard clock in was punched</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClockInTime { get; set; }
#nullable restore
#else
        public string ClockInTime { get; set; }
#endif
        /// <summary>The datetime a timecard clock out was punched</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClockOutTime { get; set; }
#nullable restore
#else
        public string ClockOutTime { get; set; }
#endif
        /// <summary>The ID of the Cost Code of the Timecard Entry</summary>
        public int? CostCodeId { get; set; }
        /// <summary>The Date of the Timecard Entry</summary>
        public Date? Date { get; set; }
        /// <summary>The Description of the Timecard Entry</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The Hours of the Timecard Entry</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hours { get; set; }
#nullable restore
#else
        public string Hours { get; set; }
#endif
        /// <summary>The ID of the Line Item Type of the Timecard Entry</summary>
        public int? LineItemTypeId { get; set; }
        /// <summary>The ID of the Login Information of the Timecard Entry</summary>
        public int? LoginInformationId { get; set; }
        /// <summary>Value of related external data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginData { get; set; }
#nullable restore
#else
        public string OriginData { get; set; }
#endif
        /// <summary>ID of related external data</summary>
        public int? OriginId { get; set; }
        /// <summary>The ID of the Party of the Timecard Entry</summary>
        public int? PartyId { get; set; }
        /// <summary>The ID of the Timecard Time Type of the Timecard Entry</summary>
        public int? TimecardTimeTypeId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.FieldProductivity.Rest.V10.Timecard_entries.Item.Timecard_entriesPatchRequestBody_timecard_entry"/> and sets the default values.
        /// </summary>
        public Timecard_entriesPatchRequestBody_timecard_entry()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.FieldProductivity.Rest.V10.Timecard_entries.Item.Timecard_entriesPatchRequestBody_timecard_entry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.FieldProductivity.Rest.V10.Timecard_entries.Item.Timecard_entriesPatchRequestBody_timecard_entry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.FieldProductivity.Rest.V10.Timecard_entries.Item.Timecard_entriesPatchRequestBody_timecard_entry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billable", n => { Billable = n.GetBoolValue(); } },
                { "clock_in_time", n => { ClockInTime = n.GetStringValue(); } },
                { "clock_out_time", n => { ClockOutTime = n.GetStringValue(); } },
                { "cost_code_id", n => { CostCodeId = n.GetIntValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "hours", n => { Hours = n.GetStringValue(); } },
                { "line_item_type_id", n => { LineItemTypeId = n.GetIntValue(); } },
                { "login_information_id", n => { LoginInformationId = n.GetIntValue(); } },
                { "origin_data", n => { OriginData = n.GetStringValue(); } },
                { "origin_id", n => { OriginId = n.GetIntValue(); } },
                { "party_id", n => { PartyId = n.GetIntValue(); } },
                { "timecard_time_type_id", n => { TimecardTimeTypeId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("billable", Billable);
            writer.WriteStringValue("clock_in_time", ClockInTime);
            writer.WriteStringValue("clock_out_time", ClockOutTime);
            writer.WriteIntValue("cost_code_id", CostCodeId);
            writer.WriteDateValue("date", Date);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("hours", Hours);
            writer.WriteIntValue("line_item_type_id", LineItemTypeId);
            writer.WriteIntValue("login_information_id", LoginInformationId);
            writer.WriteStringValue("origin_data", OriginData);
            writer.WriteIntValue("origin_id", OriginId);
            writer.WriteIntValue("party_id", PartyId);
            writer.WriteIntValue("timecard_time_type_id", TimecardTimeTypeId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
