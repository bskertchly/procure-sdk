// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ItemsGetResponse_type : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Flag denoting if the Observation Type is available for use</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Observation Type category</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type_category? Category { get; set; }
        /// <summary>Observation Type category (snake_case)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CategoryKey { get; set; }
#nullable restore
#else
        public string CategoryKey { get; set; }
#endif
        /// <summary>Flag denoting if the Company is available for use</summary>
        public bool? CompanyActive { get; set; }
        /// <summary>Observation Type ID</summary>
        public int? Id { get; set; }
        /// <summary>Flag denoting if the in use is available for use</summary>
        public bool? InUse { get; set; }
        /// <summary>kind</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Kind { get; set; }
#nullable restore
#else
        public string Kind { get; set; }
#endif
        /// <summary>returns the localized observation_type name. It&apos;ll return custom traslations depending on the param sent in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalizedName { get; set; }
#nullable restore
#else
        public string LocalizedName { get; set; }
#endif
        /// <summary>Type name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Company&apos;s custom translations for observation type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type_name_translations? NameTranslations { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type_name_translations NameTranslations { get; set; }
#endif
        /// <summary>Flag denoting if the Parent is available for use</summary>
        public bool? ParentInactive { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type"/> and sets the default values.
        /// </summary>
        public ItemsGetResponse_type()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "category", n => { Category = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type_category>(); } },
                { "category_key", n => { CategoryKey = n.GetStringValue(); } },
                { "company_active", n => { CompanyActive = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "in_use", n => { InUse = n.GetBoolValue(); } },
                { "kind", n => { Kind = n.GetStringValue(); } },
                { "localized_name", n => { LocalizedName = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "name_translations", n => { NameTranslations = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type_name_translations>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type_name_translations.CreateFromDiscriminatorValue); } },
                { "parent_inactive", n => { ParentInactive = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type_category>("category", Category);
            writer.WriteStringValue("category_key", CategoryKey);
            writer.WriteBoolValue("company_active", CompanyActive);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("in_use", InUse);
            writer.WriteStringValue("kind", Kind);
            writer.WriteStringValue("localized_name", LocalizedName);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsGetResponse_type_name_translations>("name_translations", NameTranslations);
            writer.WriteBoolValue("parent_inactive", ParentInactive);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
