// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_logs.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Work_logsPatchRequestBody_work_log : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Comments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comments { get; set; }
#nullable restore
#else
        public string Comments { get; set; }
#endif
        /// <summary>Format: YYYY-MM-DD Example: 2016-04-19</summary>
        public Date? Date { get; set; }
        /// <summary>Scheduled work hourly rate</summary>
        public float? HourlyRate { get; set; }
        /// <summary>Scheduled work hours</summary>
        public float? Hours { get; set; }
        /// <summary>If scheduled work is reimbursable</summary>
        public bool? Reimbursable { get; set; }
        /// <summary>Resource Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceName { get; set; }
#nullable restore
#else
        public string ResourceName { get; set; }
#endif
        /// <summary>If scheduled worker kept the work log schedule</summary>
        public bool? Showed { get; set; }
        /// <summary>Scheduled number of workers</summary>
        public int? Workers { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_logs.Item.Work_logsPatchRequestBody_work_log"/> and sets the default values.
        /// </summary>
        public Work_logsPatchRequestBody_work_log()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_logs.Item.Work_logsPatchRequestBody_work_log"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_logs.Item.Work_logsPatchRequestBody_work_log CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_logs.Item.Work_logsPatchRequestBody_work_log();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "comments", n => { Comments = n.GetStringValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "hourly_rate", n => { HourlyRate = n.GetFloatValue(); } },
                { "hours", n => { Hours = n.GetFloatValue(); } },
                { "reimbursable", n => { Reimbursable = n.GetBoolValue(); } },
                { "resource_name", n => { ResourceName = n.GetStringValue(); } },
                { "showed", n => { Showed = n.GetBoolValue(); } },
                { "workers", n => { Workers = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("comments", Comments);
            writer.WriteDateValue("date", Date);
            writer.WriteFloatValue("hourly_rate", HourlyRate);
            writer.WriteFloatValue("hours", Hours);
            writer.WriteBoolValue("reimbursable", Reimbursable);
            writer.WriteStringValue("resource_name", ResourceName);
            writer.WriteBoolValue("showed", Showed);
            writer.WriteIntValue("workers", Workers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
