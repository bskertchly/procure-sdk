// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids
{
    /// <summary>
    /// Summary
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Bids : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Bid awarded to vendor</summary>
        public bool? Awarded { get; set; }
        /// <summary>Comments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidderComments { get; set; }
#nullable restore
#else
        public string BidderComments { get; set; }
#endif
        /// <summary>Bid Form ID</summary>
        public int? BidFormId { get; set; }
        /// <summary>Bid Form Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidFormTitle { get; set; }
#nullable restore
#else
        public string BidFormTitle { get; set; }
#endif
        /// <summary>Bid Package ID</summary>
        public int? BidPackageId { get; set; }
        /// <summary>Bid Package title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidPackageTitle { get; set; }
#nullable restore
#else
        public string BidPackageTitle { get; set; }
#endif
        /// <summary>Bid Requester Info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_bid_requester? BidRequester { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_bid_requester BidRequester { get; set; }
#endif
        /// <summary>Bid status</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_bid_status? BidStatus { get; set; }
        /// <summary>Company ID</summary>
        public int? CompanyId { get; set; }
        /// <summary>Date/time the Bid Package was created</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Due Date</summary>
        public DateTimeOffset? DueDate { get; set; }
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Date/time the Bid Package invitation was last sent</summary>
        public DateTimeOffset? InvitationLastSentAt { get; set; }
        /// <summary>Bidder committed</summary>
        public bool? IsBidderCommitted { get; set; }
        /// <summary>Lump sum (overall) amount</summary>
        public float? LumpSumAmount { get; set; }
        /// <summary>Lump sum bidding enabled</summary>
        public bool? LumpSumEnabled { get; set; }
        /// <summary>Project Info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_project? Project { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_project Project { get; set; }
#endif
        /// <summary>Vendor submitted Bid</summary>
        public bool? Submitted { get; set; }
        /// <summary>Date/time the Bid Package was last updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>Bid Vendor Info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_vendor? Vendor { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_vendor Vendor { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids"/> and sets the default values.
        /// </summary>
        public Bids()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "awarded", n => { Awarded = n.GetBoolValue(); } },
                { "bid_form_id", n => { BidFormId = n.GetIntValue(); } },
                { "bid_form_title", n => { BidFormTitle = n.GetStringValue(); } },
                { "bid_package_id", n => { BidPackageId = n.GetIntValue(); } },
                { "bid_package_title", n => { BidPackageTitle = n.GetStringValue(); } },
                { "bid_requester", n => { BidRequester = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_bid_requester>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_bid_requester.CreateFromDiscriminatorValue); } },
                { "bid_status", n => { BidStatus = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_bid_status>(); } },
                { "bidder_comments", n => { BidderComments = n.GetStringValue(); } },
                { "company_id", n => { CompanyId = n.GetIntValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "due_date", n => { DueDate = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "invitation_last_sent_at", n => { InvitationLastSentAt = n.GetDateTimeOffsetValue(); } },
                { "is_bidder_committed", n => { IsBidderCommitted = n.GetBoolValue(); } },
                { "lump_sum_amount", n => { LumpSumAmount = n.GetFloatValue(); } },
                { "lump_sum_enabled", n => { LumpSumEnabled = n.GetBoolValue(); } },
                { "project", n => { Project = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_project>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_project.CreateFromDiscriminatorValue); } },
                { "submitted", n => { Submitted = n.GetBoolValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "vendor", n => { Vendor = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_vendor>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_vendor.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("awarded", Awarded);
            writer.WriteStringValue("bidder_comments", BidderComments);
            writer.WriteIntValue("bid_form_id", BidFormId);
            writer.WriteStringValue("bid_form_title", BidFormTitle);
            writer.WriteIntValue("bid_package_id", BidPackageId);
            writer.WriteStringValue("bid_package_title", BidPackageTitle);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_bid_requester>("bid_requester", BidRequester);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_bid_status>("bid_status", BidStatus);
            writer.WriteIntValue("company_id", CompanyId);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteDateTimeOffsetValue("due_date", DueDate);
            writer.WriteIntValue("id", Id);
            writer.WriteDateTimeOffsetValue("invitation_last_sent_at", InvitationLastSentAt);
            writer.WriteBoolValue("is_bidder_committed", IsBidderCommitted);
            writer.WriteFloatValue("lump_sum_amount", LumpSumAmount);
            writer.WriteBoolValue("lump_sum_enabled", LumpSumEnabled);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_project>("project", Project);
            writer.WriteBoolValue("submitted", Submitted);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bids.Bids_vendor>("vendor", Vendor);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
