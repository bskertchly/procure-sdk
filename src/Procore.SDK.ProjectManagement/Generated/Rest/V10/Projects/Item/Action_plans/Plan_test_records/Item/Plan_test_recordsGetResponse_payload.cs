// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item
{
    /// <summary>
    /// Contains specific attributes depending on the type of Action Plan Test Record
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Plan_test_recordsGetResponse_payload : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The attachment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload_attachment? Attachment { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload_attachment Attachment { get; set; }
#endif
        /// <summary>Checklist ID</summary>
        public int? ChecklistId { get; set; }
        /// <summary>Checklist Template ID</summary>
        public int? ChecklistTemplateId { get; set; }
        /// <summary>Form ID</summary>
        public int? FormId { get; set; }
        /// <summary>Form Template ID</summary>
        public int? FormTemplateId { get; set; }
        /// <summary>Generic Tool ID</summary>
        public int? GenericToolId { get; set; }
        /// <summary>Generic Tool Item ID</summary>
        public int? GenericToolItemId { get; set; }
        /// <summary>Meeting ID</summary>
        public int? MeetingId { get; set; }
        /// <summary>Observation Item ID</summary>
        public int? ObservationItemId { get; set; }
        /// <summary>Submittal Log ID</summary>
        public int? SubmittalLogId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload"/> and sets the default values.
        /// </summary>
        public Plan_test_recordsGetResponse_payload()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attachment", n => { Attachment = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload_attachment>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload_attachment.CreateFromDiscriminatorValue); } },
                { "checklist_id", n => { ChecklistId = n.GetIntValue(); } },
                { "checklist_template_id", n => { ChecklistTemplateId = n.GetIntValue(); } },
                { "form_id", n => { FormId = n.GetIntValue(); } },
                { "form_template_id", n => { FormTemplateId = n.GetIntValue(); } },
                { "generic_tool_id", n => { GenericToolId = n.GetIntValue(); } },
                { "generic_tool_item_id", n => { GenericToolItemId = n.GetIntValue(); } },
                { "meeting_id", n => { MeetingId = n.GetIntValue(); } },
                { "observation_item_id", n => { ObservationItemId = n.GetIntValue(); } },
                { "submittal_log_id", n => { SubmittalLogId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_test_records.Item.Plan_test_recordsGetResponse_payload_attachment>("attachment", Attachment);
            writer.WriteIntValue("checklist_id", ChecklistId);
            writer.WriteIntValue("checklist_template_id", ChecklistTemplateId);
            writer.WriteIntValue("form_id", FormId);
            writer.WriteIntValue("form_template_id", FormTemplateId);
            writer.WriteIntValue("generic_tool_id", GenericToolId);
            writer.WriteIntValue("generic_tool_item_id", GenericToolItemId);
            writer.WriteIntValue("meeting_id", MeetingId);
            writer.WriteIntValue("observation_item_id", ObservationItemId);
            writer.WriteIntValue("submittal_log_id", SubmittalLogId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
