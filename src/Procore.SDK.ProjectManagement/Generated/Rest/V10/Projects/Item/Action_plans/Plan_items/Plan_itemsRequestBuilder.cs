// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Bulk_update;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Create_from_item;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\action_plans\plan_items
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Plan_itemsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The bulk_update property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Bulk_update.Bulk_updateRequestBuilder Bulk_update
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Bulk_update.Bulk_updateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The create_from_item property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Create_from_item.Create_from_itemRequestBuilder Create_from_item
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Create_from_item.Create_from_itemRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.action_plans.plan_items.item collection</summary>
        /// <param name="position">Action Plan Item ID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Item.Plan_itemsItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Item.Plan_itemsItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Item.Plan_itemsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Plan_itemsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/action_plans/plan_items{?filters%5Bassignee_party_id_or_role_id%5D,filters%5Battachment_id%5D,filters%5Bcreated_at%5D*,filters%5Bdrawing_revision_id%5D,filters%5Bdue_at%5D*,filters%5Bfile_version_id%5D,filters%5Bform_id%5D,filters%5Bgeneric_tool_item_id%5D,filters%5Bid%5D,filters%5Bmeeting_id%5D,filters%5Bobservation_item_id%5D,filters%5Bplan_id%5D,filters%5Bplan_section_id%5D,filters%5Bplan_test_record_request_id%5D,filters%5Bquery%5D*,filters%5Brecord_checklist_template_id%5D*,filters%5Brecord_generic_tool_id%5D*,filters%5Breference_type%5D,filters%5Bspecification_section_id%5D,filters%5Bstatus_id%5D,filters%5Bsubmittal_log_id%5D,filters%5Bupdated_at%5D*,filters%5Bverification_method_id%5D,page*,per_page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Plan_itemsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/action_plans/plan_items{?filters%5Bassignee_party_id_or_role_id%5D,filters%5Battachment_id%5D,filters%5Bcreated_at%5D*,filters%5Bdrawing_revision_id%5D,filters%5Bdue_at%5D*,filters%5Bfile_version_id%5D,filters%5Bform_id%5D,filters%5Bgeneric_tool_item_id%5D,filters%5Bid%5D,filters%5Bmeeting_id%5D,filters%5Bobservation_item_id%5D,filters%5Bplan_id%5D,filters%5Bplan_section_id%5D,filters%5Bplan_test_record_request_id%5D,filters%5Bquery%5D*,filters%5Brecord_checklist_template_id%5D*,filters%5Brecord_generic_tool_id%5D*,filters%5Breference_type%5D,filters%5Bspecification_section_id%5D,filters%5Bstatus_id%5D,filters%5Bsubmittal_log_id%5D,filters%5Bupdated_at%5D*,filters%5Bverification_method_id%5D,page*,per_page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all Action Plan Items for a given Project
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder.Plan_itemsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder.Plan_itemsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates an Action Plan Item for a given Action Plan Section.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all Action Plan Items for a given Project
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder.Plan_itemsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder.Plan_itemsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates an Action Plan Item for a given Action Plan Section.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_itemsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all Action Plan Items for a given Project
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Plan_itemsRequestBuilderGetQueryParameters 
        {
            /// <summary>Return item(s) associated with the specified Action Plan Assignee party ID(s) or role ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bassignee_party_id_or_role_id%5D")]
            public int?[]? FiltersassigneePartyIdOrRoleId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bassignee_party_id_or_role_id%5D")]
            public int?[] FiltersassigneePartyIdOrRoleId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan reference attachment ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Battachment_id%5D")]
            public int?[]? FiltersattachmentId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Battachment_id%5D")]
            public int?[] FiltersattachmentId { get; set; }
#endif
            /// <summary>Return item(s) created within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bcreated_at%5D")]
            public Date? FilterscreatedAt { get; set; }
            /// <summary>Return item(s) associated with the specified Action Plan reference drawing revision ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bdrawing_revision_id%5D")]
            public int?[]? FiltersdrawingRevisionId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bdrawing_revision_id%5D")]
            public int?[] FiltersdrawingRevisionId { get; set; }
#endif
            /// <summary>Return item(s) due within the specified date range.</summary>
            [QueryParameter("filters%5Bdue_at%5D")]
            public DateTimeOffset? FiltersdueAt { get; set; }
            /// <summary>Return item(s) associated with the specified Action Plan reference file version ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bfile_version_id%5D")]
            public int?[]? FiltersfileVersionId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bfile_version_id%5D")]
            public int?[] FiltersfileVersionId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan reference Form ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bform_id%5D")]
            public int?[]? FiltersformId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bform_id%5D")]
            public int?[] FiltersformId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan reference Generic Tool Item ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bgeneric_tool_item_id%5D")]
            public int?[]? FiltersgenericToolItemId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bgeneric_tool_item_id%5D")]
            public int?[] FiltersgenericToolItemId { get; set; }
#endif
            /// <summary>Return item(s) with the specified IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan reference Meeting ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bmeeting_id%5D")]
            public int?[]? FiltersmeetingId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bmeeting_id%5D")]
            public int?[] FiltersmeetingId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan reference Observation Item ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bobservation_item_id%5D")]
            public int?[]? FiltersobservationItemId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bobservation_item_id%5D")]
            public int?[] FiltersobservationItemId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bplan_id%5D")]
            public int?[]? FiltersplanId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bplan_id%5D")]
            public int?[] FiltersplanId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan Section(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bplan_section_id%5D")]
            public int?[]? FiltersplanSectionId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bplan_section_id%5D")]
            public int?[] FiltersplanSectionId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan Test Record Request ID(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bplan_test_record_request_id%5D")]
            public int?[]? FiltersplanTestRecordRequestId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bplan_test_record_request_id%5D")]
            public int?[] FiltersplanTestRecordRequestId { get; set; }
#endif
            /// <summary>Return item(s) containing search query</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bquery%5D")]
            public string? Filtersquery { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bquery%5D")]
            public string Filtersquery { get; set; }
#endif
            /// <summary>Return item(s) with the specified checklist template id.</summary>
            [QueryParameter("filters%5Brecord_checklist_template_id%5D")]
            public int? FiltersrecordChecklistTemplateId { get; set; }
            /// <summary>Return item(s) with the specified Generic Tool ID.</summary>
            [QueryParameter("filters%5Brecord_generic_tool_id%5D")]
            public int? FiltersrecordGenericToolId { get; set; }
            /// <summary>Return item(s) associated with the specified Action Plan reference type(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Breference_type%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.GetFiltersReference_typeQueryParameterType[]? FiltersreferenceType { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Breference_type%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.GetFiltersReference_typeQueryParameterType[] FiltersreferenceType { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan reference specification section id ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bspecification_section_id%5D")]
            public int?[]? FiltersspecificationSectionId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bspecification_section_id%5D")]
            public int?[] FiltersspecificationSectionId { get; set; }
#endif
            /// <summary>Array of Status IDs. A single Status ID is also accepted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bstatus_id%5D")]
            public int?[]? FiltersstatusId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bstatus_id%5D")]
            public int?[] FiltersstatusId { get; set; }
#endif
            /// <summary>Return item(s) associated with the specified Action Plan reference submittal log ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bsubmittal_log_id%5D")]
            public int?[]? FilterssubmittalLogId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bsubmittal_log_id%5D")]
            public int?[] FilterssubmittalLogId { get; set; }
#endif
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
            /// <summary>Return item(s) associated with the specified Action Plan Assignee verification method ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bverification_method_id%5D")]
            public int?[]? FiltersverificationMethodId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bverification_method_id%5D")]
            public int?[] FiltersverificationMethodId { get; set; }
#endif
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
        }
    }
}
#pragma warning restore CS0618
