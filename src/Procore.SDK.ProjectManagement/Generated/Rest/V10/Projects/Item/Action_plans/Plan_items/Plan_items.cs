// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items
{
    /// <summary>
    /// Action Plan Item (Show)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Plan_items : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time the Action Plan Item was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>Description of the Action Plan Item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Due Date of the Action Plan Item</summary>
        public DateTimeOffset? DueAt { get; set; }
        /// <summary>Action Plan Item holding type specifies whether the current item holds all the succeeding items in the section or the plan</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_holding_type? HoldingType { get; set; }
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Indicates whether current Action Plan Item is blocked by another Action Plan Item</summary>
        public bool? IsBlocked { get; set; }
        /// <summary>Indicates whether current Action Plan Item is blocking other Action Plan Items</summary>
        public bool? IsBlocking { get; set; }
        /// <summary>Notes for the Action Plan Item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>Plan ID the Action Plan Item belongs to</summary>
        public int? PlanId { get; set; }
        /// <summary>The plan_item_assignees property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_plan_item_assignees>? PlanItemAssignees { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_plan_item_assignees> PlanItemAssignees { get; set; }
#endif
        /// <summary>Action Plan Section ID the Item belongs to</summary>
        public int? PlanSectionId { get; set; }
        /// <summary>Position of the Action Plan Item</summary>
        public int? Position { get; set; }
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_status? Status { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_status Status { get; set; }
#endif
        /// <summary>Template Item ID the Action Plan Item originated from</summary>
        public int? TemplateItemId { get; set; }
        /// <summary>Title of the Action Plan Item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Time the Action Plan Item was updated</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items"/> and sets the default values.
        /// </summary>
        public Plan_items()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "due_at", n => { DueAt = n.GetDateTimeOffsetValue(); } },
                { "holding_type", n => { HoldingType = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_holding_type>(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "is_blocked", n => { IsBlocked = n.GetBoolValue(); } },
                { "is_blocking", n => { IsBlocking = n.GetBoolValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "plan_id", n => { PlanId = n.GetIntValue(); } },
                { "plan_item_assignees", n => { PlanItemAssignees = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_plan_item_assignees>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_plan_item_assignees.CreateFromDiscriminatorValue)?.AsList(); } },
                { "plan_section_id", n => { PlanSectionId = n.GetIntValue(); } },
                { "position", n => { Position = n.GetIntValue(); } },
                { "status", n => { Status = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_status>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_status.CreateFromDiscriminatorValue); } },
                { "template_item_id", n => { TemplateItemId = n.GetIntValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteDateTimeOffsetValue("due_at", DueAt);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_holding_type>("holding_type", HoldingType);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("is_blocked", IsBlocked);
            writer.WriteBoolValue("is_blocking", IsBlocking);
            writer.WriteStringValue("notes", Notes);
            writer.WriteIntValue("plan_id", PlanId);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_plan_item_assignees>("plan_item_assignees", PlanItemAssignees);
            writer.WriteIntValue("plan_section_id", PlanSectionId);
            writer.WriteIntValue("position", Position);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Action_plans.Plan_items.Plan_items_status>("status", Status);
            writer.WriteIntValue("template_item_id", TemplateItemId);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
