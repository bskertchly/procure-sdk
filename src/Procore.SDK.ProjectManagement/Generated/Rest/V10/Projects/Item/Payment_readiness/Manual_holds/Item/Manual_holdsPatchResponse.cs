// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item
{
    /// <summary>
    /// Manual hold for an invoice
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Manual_holdsPatchResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Attachments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse_attachments>? Attachments { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse_attachments> Attachments { get; set; }
#endif
        /// <summary>Company ID</summary>
        public int? CompanyId { get; set; }
        /// <summary>Timestamp of creation</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Full name of user who created the manual hold</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; set; }
#nullable restore
#else
        public string CreatedBy { get; set; }
#endif
        /// <summary>Description of the hold</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Type of hold. Can either be &apos;invoice&apos; or &apos;vendor&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HoldType { get; set; }
#nullable restore
#else
        public string HoldType { get; set; }
#endif
        /// <summary>Primary ID of the manual hold</summary>
        public int? Id { get; set; }
        /// <summary>ID of the invoice for which the hold is created. This is required if the hold_type is `invoice`.</summary>
        public int? InvoiceId { get; set; }
        /// <summary>Project ID</summary>
        public int? ProjectId { get; set; }
        /// <summary>Either &apos;applied&apos; or &apos;released&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Timestamp of creation</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>Full name of the user who last updated the manual hold</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedBy { get; set; }
#nullable restore
#else
        public string UpdatedBy { get; set; }
#endif
        /// <summary>Id of the vendor for which the hold is created. This is required if the hold_type is `vendor`.</summary>
        public int? VendorId { get; set; }
        /// <summary>If true manual holds will be visible to vendors</summary>
        public bool? VisibleToVendor { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse"/> and sets the default values.
        /// </summary>
        public Manual_holdsPatchResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attachments", n => { Attachments = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse_attachments>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse_attachments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "company_id", n => { CompanyId = n.GetIntValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "created_by", n => { CreatedBy = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "hold_type", n => { HoldType = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "invoice_id", n => { InvoiceId = n.GetIntValue(); } },
                { "project_id", n => { ProjectId = n.GetIntValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "updated_by", n => { UpdatedBy = n.GetStringValue(); } },
                { "vendor_id", n => { VendorId = n.GetIntValue(); } },
                { "visible_to_vendor", n => { VisibleToVendor = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Payment_readiness.Manual_holds.Item.Manual_holdsPatchResponse_attachments>("attachments", Attachments);
            writer.WriteIntValue("company_id", CompanyId);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("created_by", CreatedBy);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("hold_type", HoldType);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("invoice_id", InvoiceId);
            writer.WriteIntValue("project_id", ProjectId);
            writer.WriteStringValue("status", Status);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("updated_by", UpdatedBy);
            writer.WriteIntValue("vendor_id", VendorId);
            writer.WriteBoolValue("visible_to_vendor", VisibleToVendor);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
