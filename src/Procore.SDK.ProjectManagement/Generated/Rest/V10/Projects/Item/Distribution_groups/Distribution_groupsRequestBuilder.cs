// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\distribution_groups
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Distribution_groupsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.distribution_groups.item collection</summary>
        /// <param name="position">Unique identifier for the distribution group.</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Item.WithDistribution_group_ItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Item.WithDistribution_group_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("distribution_group_id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Item.WithDistribution_group_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Distribution_groupsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/distribution_groups{?domain_id*,filters%5Bsearch%5D*,include_ancestors*,min_ual*,page*,per_page*,sort*,ual*,view*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Distribution_groupsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/distribution_groups{?domain_id*,filters%5Bsearch%5D*,include_ancestors*,min_ual*,page*,per_page*,sort*,ual*,view*}", rawUrl)
        {
        }
        /// <summary>
        /// Return a list of all Distribution Groups associated with a Project.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groups&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groups>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groupsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groups>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groupsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groups>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groups.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Create a new Distribution Group associated with the given Project.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups404Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groups422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Return a list of all Distribution Groups associated with a Project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groupsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groupsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new Distribution Group associated with the given Project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember1"/>, <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember2"/>, <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember3"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Distribution_groups : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember1? DistributionGroupsMember1 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember1 DistributionGroupsMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember2? DistributionGroupsMember2 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember2 DistributionGroupsMember2 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember3? DistributionGroupsMember3 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember3 DistributionGroupsMember3 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groups"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groups CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsRequestBuilder.Distribution_groups();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DistributionGroupsMember1 = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DistributionGroupsMember2 = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember2();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DistributionGroupsMember3 = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember3();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DistributionGroupsMember1 != null)
                {
                    return DistributionGroupsMember1.GetFieldDeserializers();
                }
                else if(DistributionGroupsMember2 != null)
                {
                    return DistributionGroupsMember2.GetFieldDeserializers();
                }
                else if(DistributionGroupsMember3 != null)
                {
                    return DistributionGroupsMember3.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DistributionGroupsMember1 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember1>(null, DistributionGroupsMember1);
                }
                else if(DistributionGroupsMember2 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember2>(null, DistributionGroupsMember2);
                }
                else if(DistributionGroupsMember3 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.Distribution_groupsMember3>(null, DistributionGroupsMember3);
                }
            }
        }
        /// <summary>
        /// Return a list of all Distribution Groups associated with a Project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Distribution_groupsRequestBuilderGetQueryParameters 
        {
            /// <summary>Parameter affecting the scope for the Distribution Groups, by default it is the Domain ID of the Submittals Tool. Will return only Distributions Groups who users that have access to the Tool specified by the domain_id. Only applies to requests that also have include_ancestors set to &apos;true&apos;.</summary>
            [QueryParameter("domain_id")]
            public int? DomainId { get; set; }
            /// <summary>Returns item(s) matching the specified search query string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bsearch%5D")]
            public string? Filterssearch { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bsearch%5D")]
            public string Filterssearch { get; set; }
#endif
            /// <summary>Parameter affecting what groups will be returned from this endpoint. When &apos;true&apos;, this endpoint will only return distribution groups with users that match the provided (or default) `domain_id` and `min_ual` / `ual`.  Company level distribution groups will be returned as well if they have users matching the provided (or default) permissions.  If `extended` view is requested, only the users with matching permissions will be returned in the response. When `include_ancestors` is false or absent, only Project level groups will be returned.</summary>
            [QueryParameter("include_ancestors")]
            public bool? IncludeAncestors { get; set; }
            /// <summary>Parameter affecting the scope for the Distribution Groups, by default it is the &apos;read&apos; user access level. Will return only Distributions Groups who users that have the min ual specified by the &apos;min_ual&apos;. Only applies to requests that also have include_ancestors set to &apos;true&apos;.</summary>
            [QueryParameter("min_ual")]
            public int? MinUal { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Return items with the specified sort.</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.GetSortQueryParameterType? Sort { get; set; }
            /// <summary>Parameter affecting the scope for the Distribution Groups.  Will return only Distributions Groups who users that have the exact ual specified by the &apos;ual&apos;. If provided, this will take precendence over min_ual.  Only applies to requests that also have include_ancestors set to &apos;true&apos;.</summary>
            [QueryParameter("ual")]
            public int? Ual { get; set; }
            /// <summary>Parameter affecting what level of detail will be returned from the endpoint. &apos;extended&apos; will include the users included in each distribution group.</summary>
            [QueryParameter("view")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Distribution_groups.GetViewQueryParameterType? View { get; set; }
        }
    }
}
#pragma warning restore CS0618
