// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Actions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Alerts;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Configuration;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Environmentals;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Filter_options;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Item;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Near_misses;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Property_damages;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Witness_statements;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\incidents
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IncidentsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The actions property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Actions.ActionsRequestBuilder Actions
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Actions.ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The alerts property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Alerts.AlertsRequestBuilder Alerts
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Alerts.AlertsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The configuration property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Configuration.ConfigurationRequestBuilder Configuration
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Configuration.ConfigurationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The environmentals property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Environmentals.EnvironmentalsRequestBuilder Environmentals
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Environmentals.EnvironmentalsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The filter_options property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Filter_options.Filter_optionsRequestBuilder Filter_options
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Filter_options.Filter_optionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The injuries property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder Injuries
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The near_misses property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Near_misses.Near_missesRequestBuilder Near_misses
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Near_misses.Near_missesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The property_damages property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Property_damages.Property_damagesRequestBuilder Property_damages
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Property_damages.Property_damagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The witness_statements property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Witness_statements.Witness_statementsRequestBuilder Witness_statements
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Witness_statements.Witness_statementsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.incidents.item collection</summary>
        /// <param name="position">Incident ID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Item.ItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Item.ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("%2Did", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Item.ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IncidentsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/incidents{?filters%5Bcontributing_behavior_id%5D,filters%5Bcontributing_condition_id%5D,filters%5Bcreated_at%5D*,filters%5Bevent_date%5D*,filters%5Bhazard_id%5D,filters%5Bid%5D,filters%5Blocation_id%5D,filters%5Bquery%5D*,filters%5Brecordable%5D*,filters%5Bstatus%5D,filters%5Btime_unknown%5D*,filters%5Bupdated_at%5D*,page*,per_page*,run_configurable_validations*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IncidentsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/incidents{?filters%5Bcontributing_behavior_id%5D,filters%5Bcontributing_condition_id%5D,filters%5Bcreated_at%5D*,filters%5Bevent_date%5D*,filters%5Bhazard_id%5D,filters%5Bid%5D,filters%5Blocation_id%5D,filters%5Bquery%5D*,filters%5Brecordable%5D*,filters%5Bstatus%5D,filters%5Btime_unknown%5D*,filters%5Bupdated_at%5D*,page*,per_page*,run_configurable_validations*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Incidents for a given project.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder.IncidentsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder.IncidentsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates an Incident in a given project.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents422Error">When receiving a 422 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder.IncidentsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder.IncidentsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents422Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Incidents5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of Incidents for a given project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder.IncidentsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder.IncidentsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates an Incident in a given project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder.IncidentsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder.IncidentsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of Incidents for a given project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IncidentsRequestBuilderGetQueryParameters 
        {
            /// <summary>Contributing Behavior ID. Returns item(s) with the specified Contributing Behavior ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bcontributing_behavior_id%5D")]
            public int?[]? FilterscontributingBehaviorId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bcontributing_behavior_id%5D")]
            public int?[] FilterscontributingBehaviorId { get; set; }
#endif
            /// <summary>Contributing Condition ID. Returns item(s) with the specified Contributing Condition ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bcontributing_condition_id%5D")]
            public int?[]? FilterscontributingConditionId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bcontributing_condition_id%5D")]
            public int?[] FilterscontributingConditionId { get; set; }
#endif
            /// <summary>Return item(s) created within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bcreated_at%5D")]
            public Date? FilterscreatedAt { get; set; }
            /// <summary>Returns item(s) with an event date within the specified ISO 8601 datetime range.</summary>
            [QueryParameter("filters%5Bevent_date%5D")]
            public Date? FilterseventDate { get; set; }
            /// <summary>Hazard ID. Returns item(s) with the specified Hazard ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bhazard_id%5D")]
            public int?[]? FiltershazardId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bhazard_id%5D")]
            public int?[] FiltershazardId { get; set; }
#endif
            /// <summary>Return item(s) with the specified IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Return item(s) with the specified Location IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[]? FilterslocationId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[] FilterslocationId { get; set; }
#endif
            /// <summary>Return item(s) containing query. Searchable fields include Incident title, Creator, Witness Statement, Incident Action description, Incident Action Type, Contributing Behavior, Contributing Condition, Hazard, and Location.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bquery%5D")]
            public string? Filtersquery { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bquery%5D")]
            public string Filtersquery { get; set; }
#endif
            /// <summary>Return item(s) that are recordable.</summary>
            [QueryParameter("filters%5Brecordable%5D")]
            public bool? Filtersrecordable { get; set; }
            /// <summary>Returns item(s) matching the specified status value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bstatus%5D")]
            public string[]? Filtersstatus { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bstatus%5D")]
            public string[] Filtersstatus { get; set; }
#endif
            /// <summary>If true, returns item(s) where the time of Incident occurrence is unknown.</summary>
            [QueryParameter("filters%5Btime_unknown%5D")]
            public bool? FilterstimeUnknown { get; set; }
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Number of items returned per page (Min: 1, Max: 1000). Defaults to 1000 when parameter is not provided.</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.GetSortQueryParameterType? Sort { get; set; }
        }
        /// <summary>
        /// Creates an Incident in a given project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IncidentsRequestBuilderPostQueryParameters 
        {
            /// <summary>Whether or not Configurable validations from the Incident/Injury Configurable Field Set should be run (default: false).See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.</summary>
            [QueryParameter("run_configurable_validations")]
            public bool? RunConfigurableValidations { get; set; }
        }
    }
}
#pragma warning restore CS0618
