// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Filter_options;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\incidents\injuries
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InjuriesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The filter_options property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Filter_options.Filter_optionsRequestBuilder Filter_options
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Filter_options.Filter_optionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.incidents.injuries.item collection</summary>
        /// <param name="position">Injury ID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Item.InjuriesItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Item.InjuriesItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Item.InjuriesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InjuriesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/incidents/injuries{?filters%5Baffected_body_part%5D,filters%5Baffected_company_id%5D,filters%5Baffected_party_id%5D,filters%5Baffected_person_id%5D,filters%5Baffliction_type_id%5D,filters%5Bbody_part_id%5D,filters%5Bcreated_at%5D*,filters%5Bfiling_type%5D,filters%5Bharm_source_id%5D,filters%5Bmanaged_equipment_id%5D*,filters%5Bquery%5D*,filters%5Brecordable%5D*,filters%5Bwork_activity_id%5D,incident_id*,page*,per_page*,run_configurable_validations*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InjuriesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/incidents/injuries{?filters%5Baffected_body_part%5D,filters%5Baffected_company_id%5D,filters%5Baffected_party_id%5D,filters%5Baffected_person_id%5D,filters%5Baffliction_type_id%5D,filters%5Bbody_part_id%5D,filters%5Bcreated_at%5D*,filters%5Bfiling_type%5D,filters%5Bharm_source_id%5D,filters%5Bmanaged_equipment_id%5D*,filters%5Bquery%5D*,filters%5Brecordable%5D*,filters%5Bwork_activity_id%5D,incident_id*,page*,per_page*,run_configurable_validations*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Injuries for a given project.NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder.InjuriesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder.InjuriesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates an Injury record.NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries422Error">When receiving a 422 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder.InjuriesRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder.InjuriesRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries422Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.Injuries5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of Injuries for a given project.NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder.InjuriesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder.InjuriesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates an Injury record.NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder.InjuriesRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder.InjuriesRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.InjuriesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of Injuries for a given project.NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class InjuriesRequestBuilderGetQueryParameters 
        {
            /// <summary>Return item(s) with any of the specified Affected Body Parts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Baffected_body_part%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.GetFiltersAffected_body_partQueryParameterType[]? FiltersaffectedBodyPart { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Baffected_body_part%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.GetFiltersAffected_body_partQueryParameterType[] FiltersaffectedBodyPart { get; set; }
#endif
            /// <summary>Array of Company IDs. Returns item(s) with the specified affected Company IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Baffected_company_id%5D")]
            public int?[]? FiltersaffectedCompanyId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Baffected_company_id%5D")]
            public int?[] FiltersaffectedCompanyId { get; set; }
#endif
            /// <summary>Array of Affected Party IDs. Returns item(s) with the specified Affected Party IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Baffected_party_id%5D")]
            public int?[]? FiltersaffectedPartyId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Baffected_party_id%5D")]
            public int?[] FiltersaffectedPartyId { get; set; }
#endif
            /// <summary>Array of Person IDs. Returns item(s) with the specified affected Person IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Baffected_person_id%5D")]
            public int?[]? FiltersaffectedPersonId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Baffected_person_id%5D")]
            public int?[] FiltersaffectedPersonId { get; set; }
#endif
            /// <summary>Return item(s) with the specified Affliction Type IDs</summary>
            [QueryParameter("filters%5Baffliction_type_id%5D")]
            public int? FiltersafflictionTypeId { get; set; }
            /// <summary>Return item(s) with the specified Body Part IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bbody_part_id%5D")]
            public int?[]? FiltersbodyPartId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bbody_part_id%5D")]
            public int?[] FiltersbodyPartId { get; set; }
#endif
            /// <summary>Return item(s) created within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bcreated_at%5D")]
            public Date? FilterscreatedAt { get; set; }
            /// <summary>Return item(s) with the specified filing types. The `recordable` filing_type filter value is deprecated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bfiling_type%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.GetFiltersFiling_typeQueryParameterType[]? FiltersfilingType { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bfiling_type%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.GetFiltersFiling_typeQueryParameterType[] FiltersfilingType { get; set; }
#endif
            /// <summary>Array of Harm Source IDs. Returns item(s) with the specified Harm Source IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bharm_source_id%5D")]
            public int?[]? FiltersharmSourceId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bharm_source_id%5D")]
            public int?[] FiltersharmSourceId { get; set; }
#endif
            /// <summary>Return item(s) with the specified Managed Equipment ID.</summary>
            [QueryParameter("filters%5Bmanaged_equipment_id%5D")]
            public int? FiltersmanagedEquipmentId { get; set; }
            /// <summary>Return item(s) containing query</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bquery%5D")]
            public string? Filtersquery { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bquery%5D")]
            public string Filtersquery { get; set; }
#endif
            /// <summary>Return item(s) that are recordable.</summary>
            [QueryParameter("filters%5Brecordable%5D")]
            public bool? Filtersrecordable { get; set; }
            /// <summary>Array of Work Activity IDs. Returns item(s) with the specified Work Activity IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bwork_activity_id%5D")]
            public int?[]? FiltersworkActivityId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bwork_activity_id%5D")]
            public int?[] FiltersworkActivityId { get; set; }
#endif
            /// <summary>Incident ID. When provided, the list will be scoped to only the Injuries for a given Incident.</summary>
            [QueryParameter("incident_id")]
            public int? IncidentId { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.Injuries.GetSortQueryParameterType? Sort { get; set; }
        }
        /// <summary>
        /// Creates an Injury record.NOTE: The afflictions and affected_body_part keys are deprecated. Please disregard and use the affected_body_parts and affliction_type keys as documented below.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class InjuriesRequestBuilderPostQueryParameters 
        {
            /// <summary>Whether or not Configurable validations from the Injury Configurable Field Set should be run (default: false).See (https://developers.procore.com/reference/configurable-field-sets#list-project-configurable-field-sets) for a list of Configurable validations enabled on this project.</summary>
            [QueryParameter("run_configurable_validations")]
            public bool? RunConfigurableValidations { get; set; }
        }
    }
}
#pragma warning restore CS0618
