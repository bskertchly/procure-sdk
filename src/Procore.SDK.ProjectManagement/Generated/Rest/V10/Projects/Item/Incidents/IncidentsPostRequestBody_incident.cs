// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IncidentsPostRequestBody_incident : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of a Contributing Behavior</summary>
        public int? ContributingBehaviorId { get; set; }
        /// <summary>The ID of a Contributing Condition</summary>
        public int? ContributingConditionId { get; set; }
        /// <summary>Value of the custom field. The data type of the value passed in corresponds with the data_type of the Custom Field Definition.For a lov_entry data_type the value passed in should be the ID of one of the Custom Field Definition&apos;s LOV Entries. For a lov_entries data_type the value passed in should be an array of IDs of the Custom Field Definition&apos;s LOV Entries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident.IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id? CustomFieldCustomFieldDefinitionId { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident.IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id CustomFieldCustomFieldDefinitionId { get; set; }
#endif
        /// <summary>Description of the Incident</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>An Array of the IDs of the Distribution Members</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? DistributionMemberIds { get; set; }
#nullable restore
#else
        public List<int?> DistributionMemberIds { get; set; }
#endif
        /// <summary>Drawing Revisions to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? DrawingRevisionIds { get; set; }
#nullable restore
#else
        public List<int?> DrawingRevisionIds { get; set; }
#endif
        /// <summary>Associated Environmentals to create</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_environmentals>? Environmentals { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_environmentals> Environmentals { get; set; }
#endif
        /// <summary>Iso8601 datetime of Incident occurrence. If time is unknown, send in the date at 0:00 project time converted to UTC.</summary>
        public DateTimeOffset? EventDate { get; set; }
        /// <summary>File Versions to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FileVersionIds { get; set; }
#nullable restore
#else
        public List<int?> FileVersionIds { get; set; }
#endif
        /// <summary>Forms to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FormIds { get; set; }
#nullable restore
#else
        public List<int?> FormIds { get; set; }
#endif
        /// <summary>The ID of a Hazard</summary>
        public int? HazardId { get; set; }
        /// <summary>Images to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ImageIds { get; set; }
#nullable restore
#else
        public List<int?> ImageIds { get; set; }
#endif
        /// <summary>Associated Injuries to create</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_injuries>? Injuries { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_injuries> Injuries { get; set; }
#endif
        /// <summary>The ID of a Location</summary>
        public int? LocationId { get; set; }
        /// <summary>Associated Near Misses to create</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_near_misses>? NearMisses { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_near_misses> NearMisses { get; set; }
#endif
        /// <summary>Indicates whether an Incident is private</summary>
        public bool? Private { get; set; }
        /// <summary>Associated Property Damages to create</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_property_damages>? PropertyDamages { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_property_damages> PropertyDamages { get; set; }
#endif
        /// <summary>Indicates whether an Incident is recordable</summary>
        public bool? Recordable { get; set; }
        /// <summary>Status</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_status? Status { get; set; }
        /// <summary>Indicates that the time of the Incident occurrence is unknown</summary>
        public bool? TimeUnknown { get; set; }
        /// <summary>Incident Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Array of uploaded file UUIDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UploadUuids { get; set; }
#nullable restore
#else
        public List<string> UploadUuids { get; set; }
#endif
        /// <summary>Associated Witness Statement to create</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_witness_statements_attributes>? WitnessStatementsAttributes { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_witness_statements_attributes> WitnessStatementsAttributes { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident"/> and sets the default values.
        /// </summary>
        public IncidentsPostRequestBody_incident()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "contributing_behavior_id", n => { ContributingBehaviorId = n.GetIntValue(); } },
                { "contributing_condition_id", n => { ContributingConditionId = n.GetIntValue(); } },
                { "custom_field_%{custom_field_definition_id}", n => { CustomFieldCustomFieldDefinitionId = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident.IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident.IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "distribution_member_ids", n => { DistributionMemberIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "drawing_revision_ids", n => { DrawingRevisionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "environmentals", n => { Environmentals = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_environmentals>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_environmentals.CreateFromDiscriminatorValue)?.AsList(); } },
                { "event_date", n => { EventDate = n.GetDateTimeOffsetValue(); } },
                { "file_version_ids", n => { FileVersionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "form_ids", n => { FormIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "hazard_id", n => { HazardId = n.GetIntValue(); } },
                { "image_ids", n => { ImageIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "injuries", n => { Injuries = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_injuries>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_injuries.CreateFromDiscriminatorValue)?.AsList(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "near_misses", n => { NearMisses = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_near_misses>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_near_misses.CreateFromDiscriminatorValue)?.AsList(); } },
                { "private", n => { Private = n.GetBoolValue(); } },
                { "property_damages", n => { PropertyDamages = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_property_damages>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_property_damages.CreateFromDiscriminatorValue)?.AsList(); } },
                { "recordable", n => { Recordable = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_status>(); } },
                { "time_unknown", n => { TimeUnknown = n.GetBoolValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "upload_uuids", n => { UploadUuids = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "witness_statements_attributes", n => { WitnessStatementsAttributes = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_witness_statements_attributes>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_witness_statements_attributes.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("contributing_behavior_id", ContributingBehaviorId);
            writer.WriteIntValue("contributing_condition_id", ContributingConditionId);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident.IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id>("custom_field_%{custom_field_definition_id}", CustomFieldCustomFieldDefinitionId);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfPrimitiveValues<int?>("distribution_member_ids", DistributionMemberIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("drawing_revision_ids", DrawingRevisionIds);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_environmentals>("environmentals", Environmentals);
            writer.WriteDateTimeOffsetValue("event_date", EventDate);
            writer.WriteCollectionOfPrimitiveValues<int?>("file_version_ids", FileVersionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("form_ids", FormIds);
            writer.WriteIntValue("hazard_id", HazardId);
            writer.WriteCollectionOfPrimitiveValues<int?>("image_ids", ImageIds);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_injuries>("injuries", Injuries);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_near_misses>("near_misses", NearMisses);
            writer.WriteBoolValue("private", Private);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_property_damages>("property_damages", PropertyDamages);
            writer.WriteBoolValue("recordable", Recordable);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_status>("status", Status);
            writer.WriteBoolValue("time_unknown", TimeUnknown);
            writer.WriteStringValue("title", Title);
            writer.WriteCollectionOfPrimitiveValues<string>("upload_uuids", UploadUuids);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident_witness_statements_attributes>("witness_statements_attributes", WitnessStatementsAttributes);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="bool"/>, <see cref="double"/>, <see cref="string"/>, List&lt;int&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="bool"/></summary>
            public bool? Boolean { get; set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double { get; set; }
            /// <summary>Composed type representation for type List&lt;int&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<int?>? Integer { get; set; }
#nullable restore
#else
            public List<int?> Integer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident.IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident.IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Incidents.IncidentsPostRequestBody_incident.IncidentsPostRequestBody_incident_custom_field_Custom_field_definition_id();
                if(parseNode.GetBoolValue() is bool booleanValue)
                {
                    result.Boolean = booleanValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetCollectionOfPrimitiveValues<int?>()?.AsList() is List<int?> integerValue)
                {
                    result.Integer = integerValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Boolean != null)
                {
                    writer.WriteBoolValue(null, Boolean);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(Integer != null)
                {
                    writer.WriteCollectionOfPrimitiveValues<int?>(null, Integer);
                }
            }
        }
    }
}
#pragma warning restore CS0618
