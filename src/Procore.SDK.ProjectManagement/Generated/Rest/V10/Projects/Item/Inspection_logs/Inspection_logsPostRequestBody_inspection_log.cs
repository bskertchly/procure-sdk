// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Inspection_logs
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Inspection_logsPostRequestBody_inspection_log : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Area within the specified location</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Area { get; set; }
#nullable restore
#else
        public string Area { get; set; }
#endif
        /// <summary>Additional comments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comments { get; set; }
#nullable restore
#else
        public string Comments { get; set; }
#endif
        /// <summary>Date of inspection. Format: YYYY-MM-DD Example: 2016-04-19</summary>
        public Date? Date { get; set; }
        /// <summary>Datetime of record. Mutually exclusive with the date property.</summary>
        public DateTimeOffset? Datetime { get; set; }
        /// <summary>Ending time of inspection - hour</summary>
        public int? EndHour { get; set; }
        /// <summary>Ending time of inspection - minute</summary>
        public int? EndMinute { get; set; }
        /// <summary>Type of inspector that performing the inspection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InspectingEntity { get; set; }
#nullable restore
#else
        public string InspectingEntity { get; set; }
#endif
        /// <summary>Type of inspection performed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InspectionType { get; set; }
#nullable restore
#else
        public string InspectionType { get; set; }
#endif
        /// <summary>Name of the inspector</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InspectorName { get; set; }
#nullable restore
#else
        public string InspectorName { get; set; }
#endif
        /// <summary>The ID of the Location of the Inspection Log. `location_id` takes precedence over `mt_location`</summary>
        public int? LocationId { get; set; }
        /// <summary>Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided. Look at Daily Log Guide for more info.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MtLocation { get; set; }
#nullable restore
#else
        public List<string> MtLocation { get; set; }
#endif
        /// <summary>Starting time of inspection - hour</summary>
        public int? StartHour { get; set; }
        /// <summary>Starting time of inspection - minute</summary>
        public int? StartMinute { get; set; }
        /// <summary>ID of the Vendor associated to the inspection log</summary>
        public int? VendorId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Inspection_logs.Inspection_logsPostRequestBody_inspection_log"/> and sets the default values.
        /// </summary>
        public Inspection_logsPostRequestBody_inspection_log()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Inspection_logs.Inspection_logsPostRequestBody_inspection_log"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Inspection_logs.Inspection_logsPostRequestBody_inspection_log CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Inspection_logs.Inspection_logsPostRequestBody_inspection_log();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "area", n => { Area = n.GetStringValue(); } },
                { "comments", n => { Comments = n.GetStringValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "datetime", n => { Datetime = n.GetDateTimeOffsetValue(); } },
                { "end_hour", n => { EndHour = n.GetIntValue(); } },
                { "end_minute", n => { EndMinute = n.GetIntValue(); } },
                { "inspecting_entity", n => { InspectingEntity = n.GetStringValue(); } },
                { "inspection_type", n => { InspectionType = n.GetStringValue(); } },
                { "inspector_name", n => { InspectorName = n.GetStringValue(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "mt_location", n => { MtLocation = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "start_hour", n => { StartHour = n.GetIntValue(); } },
                { "start_minute", n => { StartMinute = n.GetIntValue(); } },
                { "vendor_id", n => { VendorId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("area", Area);
            writer.WriteStringValue("comments", Comments);
            writer.WriteDateValue("date", Date);
            writer.WriteDateTimeOffsetValue("datetime", Datetime);
            writer.WriteIntValue("end_hour", EndHour);
            writer.WriteIntValue("end_minute", EndMinute);
            writer.WriteStringValue("inspecting_entity", InspectingEntity);
            writer.WriteStringValue("inspection_type", InspectionType);
            writer.WriteStringValue("inspector_name", InspectorName);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteCollectionOfPrimitiveValues<string>("mt_location", MtLocation);
            writer.WriteIntValue("start_hour", StartHour);
            writer.WriteIntValue("start_minute", StartMinute);
            writer.WriteIntValue("vendor_id", VendorId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
