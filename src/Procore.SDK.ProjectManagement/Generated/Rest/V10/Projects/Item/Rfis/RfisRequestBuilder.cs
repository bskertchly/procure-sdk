// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Default_distribution;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Filter_options;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Item;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Potential_assignees;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Potential_rfi_managers;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Recycle_bin;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.WithIdPdf;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\rfis
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RfisRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The default_distribution property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Default_distribution.Default_distributionRequestBuilder Default_distribution
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Default_distribution.Default_distributionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The filter_options property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Filter_options.Filter_optionsRequestBuilder Filter_options
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Filter_options.Filter_optionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The potential_assignees property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Potential_assignees.Potential_assigneesRequestBuilder Potential_assignees
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Potential_assignees.Potential_assigneesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The potential_rfi_managers property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Potential_rfi_managers.Potential_rfi_managersRequestBuilder Potential_rfi_managers
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Potential_rfi_managers.Potential_rfi_managersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recycle_bin property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Recycle_bin.Recycle_binRequestBuilder Recycle_bin
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Recycle_bin.Recycle_binRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.rfis.item collection</summary>
        /// <param name="position">RFI ID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Item.ItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Item.ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("%2Did", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Item.ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RfisRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/rfis{?filters%5Bassigned_id%5D*,filters%5Bball_in_court_id%5D*,filters%5Bcost_code_id%5D*,filters%5Bcreated_at%5D*,filters%5Bid%5D,filters%5Blocation_id%5D,filters%5Bnumber%5D*,filters%5Bprefix_stage_id%5D*,filters%5Breceived_from_login_information_id%5D*,filters%5Bresponsible_contractor_id%5D*,filters%5Brfi_manager_id%5D*,filters%5Bstatus%5D*,filters%5Bupdated_at%5D*,page*,per_page*,run_configurable_validations*,search*,sort%5Battribute%5D*,sort%5Bdirection%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RfisRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/rfis{?filters%5Bassigned_id%5D*,filters%5Bball_in_court_id%5D*,filters%5Bcost_code_id%5D*,filters%5Bcreated_at%5D*,filters%5Bid%5D,filters%5Blocation_id%5D,filters%5Bnumber%5D*,filters%5Bprefix_stage_id%5D*,filters%5Breceived_from_login_information_id%5D*,filters%5Bresponsible_contractor_id%5D*,filters%5Brfi_manager_id%5D*,filters%5Bstatus%5D*,filters%5Bupdated_at%5D*,page*,per_page*,run_configurable_validations*,search*,sort%5Battribute%5D*,sort%5Bdirection%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all RFIs in a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Update specified RFIs in a specified project. Specify the RFIs by their IDs. Pass in the same values for each specified RFI for the action to succeed.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PatchAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderPatchQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PatchAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderPatchQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new RFI in a specified Project.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.Rfis404Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all RFIs in a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update specified RFIs in a specified project. Specify the RFIs by their IDs. Pass in the same values for each specified RFI for the action to succeed.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderPatchQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderPatchQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Creates a new RFI in a specified Project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder.RfisRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\rfis\{id}.pdf
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.WithIdPdf.WithIdPdfRequestBuilder"/></returns>
        /// <param name="id">RFI ID</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.WithIdPdf.WithIdPdfRequestBuilder WithIdPdf(int? id)
        {
            _ = id ?? throw new ArgumentNullException(nameof(id));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.WithIdPdf.WithIdPdfRequestBuilder(PathParameters, RequestAdapter, id);
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.RfisRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all RFIs in a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RfisRequestBuilderGetQueryParameters 
        {
            /// <summary>Assigned ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bassigned_id%5D")]
            public string? FiltersassignedId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bassigned_id%5D")]
            public string FiltersassignedId { get; set; }
#endif
            /// <summary>User ID. Return item(s) where the specified User ID is the Ball in Court.</summary>
            [QueryParameter("filters%5Bball_in_court_id%5D")]
            public int? FiltersballInCourtId { get; set; }
            /// <summary>Cost Code ID. Returns item(s) with the specified Cost Code ID or within the specified range of Cost Code IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bcost_code_id%5D")]
            public string? FilterscostCodeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bcost_code_id%5D")]
            public string FilterscostCodeId { get; set; }
#endif
            /// <summary>Return item(s) created within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bcreated_at%5D")]
            public Date? FilterscreatedAt { get; set; }
            /// <summary>Return item(s) with the specified IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[]? FilterslocationId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[] FilterslocationId { get; set; }
#endif
            /// <summary>Return item(s) with the specified RFI Number.</summary>
            [QueryParameter("filters%5Bnumber%5D")]
            public int? Filtersnumber { get; set; }
            /// <summary>Return item(s) with the specified RFI Prefix Stage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bprefix_stage_id%5D")]
            public string? FiltersprefixStageId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bprefix_stage_id%5D")]
            public string FiltersprefixStageId { get; set; }
#endif
            /// <summary>Received From Login Information ID. Returns item(s) with the specified Received From Login Information ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Breceived_from_login_information_id%5D")]
            public string? FiltersreceivedFromLoginInformationId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Breceived_from_login_information_id%5D")]
            public string FiltersreceivedFromLoginInformationId { get; set; }
#endif
            /// <summary>Responsible Contractor ID</summary>
            [QueryParameter("filters%5Bresponsible_contractor_id%5D")]
            public int? FiltersresponsibleContractorId { get; set; }
            /// <summary>Return item(s) with the specified RFI Manager ID.</summary>
            [QueryParameter("filters%5Brfi_manager_id%5D")]
            public int? FiltersrfiManagerId { get; set; }
            /// <summary>Return item(s) with the specified RFI Status.</summary>
            [QueryParameter("filters%5Bstatus%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.GetFiltersStatusQueryParameterType? Filtersstatus { get; set; }
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Search for RFIs by subject or number. This parameter will return all RFIs that match the search term.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            /// <summary>The attribute by which to sort the list of RFIs</summary>
            [QueryParameter("sort%5Battribute%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.GetSortAttributeQueryParameterType? Sortattribute { get; set; }
            /// <summary>If passed a sort attribute, determines which direction to sort</summary>
            [QueryParameter("sort%5Bdirection%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Rfis.GetSortDirectionQueryParameterType? Sortdirection { get; set; }
        }
        /// <summary>
        /// Update specified RFIs in a specified project. Specify the RFIs by their IDs. Pass in the same values for each specified RFI for the action to succeed.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RfisRequestBuilderPatchQueryParameters 
        {
            /// <summary>If true, validations are run for the corresponding Configurable Field Set.</summary>
            [QueryParameter("run_configurable_validations")]
            public bool? RunConfigurableValidations { get; set; }
        }
        /// <summary>
        /// Creates a new RFI in a specified Project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RfisRequestBuilderPostQueryParameters 
        {
            /// <summary>If true, validations are run for the corresponding Configurable Field Set.</summary>
            [QueryParameter("run_configurable_validations")]
            public bool? RunConfigurableValidations { get; set; }
        }
    }
}
#pragma warning restore CS0618
