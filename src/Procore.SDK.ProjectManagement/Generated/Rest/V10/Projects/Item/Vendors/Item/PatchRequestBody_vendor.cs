// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PatchRequestBody_vendor : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Abbreviated name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AbbreviatedName { get; set; }
#nullable restore
#else
        public string AbbreviatedName { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>Authorized bidder status</summary>
        public bool? AuthorizedBidder { get; set; }
        /// <summary>Bidding statuses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor_bidding? Bidding { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor_bidding Bidding { get; set; }
#endif
        /// <summary>Business phone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessPhone { get; set; }
#nullable restore
#else
        public string BusinessPhone { get; set; }
#endif
        /// <summary>City</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>Country code (ISO-3166 Alpha-2 format)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>Email address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress { get; set; }
#nullable restore
#else
        public string EmailAddress { get; set; }
#endif
        /// <summary>Fax number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FaxNumber { get; set; }
#nullable restore
#else
        public string FaxNumber { get; set; }
#endif
        /// <summary>Active status</summary>
        public bool? IsActive { get; set; }
        /// <summary>Labor union</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LaborUnion { get; set; }
#nullable restore
#else
        public string LaborUnion { get; set; }
#endif
        /// <summary>License number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LicenseNumber { get; set; }
#nullable restore
#else
        public string LicenseNumber { get; set; }
#endif
        /// <summary>Mobile phone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone { get; set; }
#nullable restore
#else
        public string MobilePhone { get; set; }
#endif
        /// <summary>Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Non union prevailing wage status</summary>
        public bool? NonUnionPrevailingWage { get; set; }
        /// <summary>Notes (notes/keywords/tags)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>Origin Code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginCode { get; set; }
#nullable restore
#else
        public string OriginCode { get; set; }
#endif
        /// <summary>Origin Data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginData { get; set; }
#nullable restore
#else
        public string OriginData { get; set; }
#endif
        /// <summary>Origin ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginId { get; set; }
#nullable restore
#else
        public string OriginId { get; set; }
#endif
        /// <summary>Parent Vendor ID. Cannot be the same as ID. Only two levels of hierarchy are supported (parent/child).</summary>
        public int? ParentId { get; set; }
        /// <summary>Prequalified status</summary>
        public bool? Prequalified { get; set; }
        /// <summary>Primary Contact ID</summary>
        public int? PrimaryContactId { get; set; }
        /// <summary>State code (ISO-3166 Alpha-2 format)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateCode { get; set; }
#nullable restore
#else
        public string StateCode { get; set; }
#endif
        /// <summary>Vendor&apos;s Trade Name, also known as Doing Business As (DBA).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TradeName { get; set; }
#nullable restore
#else
        public string TradeName { get; set; }
#endif
        /// <summary>Union member status</summary>
        public bool? UnionMember { get; set; }
        /// <summary>Website url</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Website { get; set; }
#nullable restore
#else
        public string Website { get; set; }
#endif
        /// <summary>Zip code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zip { get; set; }
#nullable restore
#else
        public string Zip { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor"/> and sets the default values.
        /// </summary>
        public PatchRequestBody_vendor()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "abbreviated_name", n => { AbbreviatedName = n.GetStringValue(); } },
                { "address", n => { Address = n.GetStringValue(); } },
                { "authorized_bidder", n => { AuthorizedBidder = n.GetBoolValue(); } },
                { "bidding", n => { Bidding = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor_bidding>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor_bidding.CreateFromDiscriminatorValue); } },
                { "business_phone", n => { BusinessPhone = n.GetStringValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "country_code", n => { CountryCode = n.GetStringValue(); } },
                { "email_address", n => { EmailAddress = n.GetStringValue(); } },
                { "fax_number", n => { FaxNumber = n.GetStringValue(); } },
                { "is_active", n => { IsActive = n.GetBoolValue(); } },
                { "labor_union", n => { LaborUnion = n.GetStringValue(); } },
                { "license_number", n => { LicenseNumber = n.GetStringValue(); } },
                { "mobile_phone", n => { MobilePhone = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "non_union_prevailing_wage", n => { NonUnionPrevailingWage = n.GetBoolValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "origin_code", n => { OriginCode = n.GetStringValue(); } },
                { "origin_data", n => { OriginData = n.GetStringValue(); } },
                { "origin_id", n => { OriginId = n.GetStringValue(); } },
                { "parent_id", n => { ParentId = n.GetIntValue(); } },
                { "prequalified", n => { Prequalified = n.GetBoolValue(); } },
                { "primary_contact_id", n => { PrimaryContactId = n.GetIntValue(); } },
                { "state_code", n => { StateCode = n.GetStringValue(); } },
                { "trade_name", n => { TradeName = n.GetStringValue(); } },
                { "union_member", n => { UnionMember = n.GetBoolValue(); } },
                { "website", n => { Website = n.GetStringValue(); } },
                { "zip", n => { Zip = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("abbreviated_name", AbbreviatedName);
            writer.WriteStringValue("address", Address);
            writer.WriteBoolValue("authorized_bidder", AuthorizedBidder);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Item.PatchRequestBody_vendor_bidding>("bidding", Bidding);
            writer.WriteStringValue("business_phone", BusinessPhone);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("country_code", CountryCode);
            writer.WriteStringValue("email_address", EmailAddress);
            writer.WriteStringValue("fax_number", FaxNumber);
            writer.WriteBoolValue("is_active", IsActive);
            writer.WriteStringValue("labor_union", LaborUnion);
            writer.WriteStringValue("license_number", LicenseNumber);
            writer.WriteStringValue("mobile_phone", MobilePhone);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("non_union_prevailing_wage", NonUnionPrevailingWage);
            writer.WriteStringValue("notes", Notes);
            writer.WriteStringValue("origin_code", OriginCode);
            writer.WriteStringValue("origin_data", OriginData);
            writer.WriteStringValue("origin_id", OriginId);
            writer.WriteIntValue("parent_id", ParentId);
            writer.WriteBoolValue("prequalified", Prequalified);
            writer.WriteIntValue("primary_contact_id", PrimaryContactId);
            writer.WriteStringValue("state_code", StateCode);
            writer.WriteStringValue("trade_name", TradeName);
            writer.WriteBoolValue("union_member", UnionMember);
            writer.WriteStringValue("website", Website);
            writer.WriteStringValue("zip", Zip);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
