// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Inactive : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Abbreviated name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AbbreviatedName { get; set; }
#nullable restore
#else
        public string AbbreviatedName { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>Attachments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_attachments>? Attachments { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_attachments> Attachments { get; set; }
#endif
        /// <summary>Authorized bidder status</summary>
        public bool? AuthorizedBidder { get; set; }
        /// <summary>Business id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessId { get; set; }
#nullable restore
#else
        public string BusinessId { get; set; }
#endif
        /// <summary>Business phone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessPhone { get; set; }
#nullable restore
#else
        public string BusinessPhone { get; set; }
#endif
        /// <summary>business register</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_business_register? BusinessRegister { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_business_register BusinessRegister { get; set; }
#endif
        /// <summary>City</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>Company</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Company { get; set; }
#nullable restore
#else
        public string Company { get; set; }
#endif
        /// <summary>Denotes whether this is the Company&apos;s Vendor</summary>
        public bool? CompanyVendor { get; set; }
        /// <summary>Count of active Contacts associated with the vendor record</summary>
        public int? ContactCount { get; set; }
        /// <summary>Country code (ISO-3166 Alpha-2 format)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>Created at</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Email address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress { get; set; }
#nullable restore
#else
        public string EmailAddress { get; set; }
#endif
        /// <summary>Fax number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FaxNumber { get; set; }
#nullable restore
#else
        public string FaxNumber { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>Active status</summary>
        public bool? IsActive { get; set; }
        /// <summary>Connected status</summary>
        public bool? IsConnected { get; set; }
        /// <summary>Labor union</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LaborUnion { get; set; }
#nullable restore
#else
        public string LaborUnion { get; set; }
#endif
        /// <summary>License number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LicenseNumber { get; set; }
#nullable restore
#else
        public string LicenseNumber { get; set; }
#endif
        /// <summary>API Links</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive__links? Links { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive__links Links { get; set; }
#endif
        /// <summary>Logo url</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Logo { get; set; }
#nullable restore
#else
        public string Logo { get; set; }
#endif
        /// <summary>Mobile phone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone { get; set; }
#nullable restore
#else
        public string MobilePhone { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Non union prevailing wage status</summary>
        public bool? NonUnionPrevailingWage { get; set; }
        /// <summary>Notes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>Origin Code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginCode { get; set; }
#nullable restore
#else
        public string OriginCode { get; set; }
#endif
        /// <summary>Origin data</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginData { get; set; }
#nullable restore
#else
        public string OriginData { get; set; }
#endif
        /// <summary>Origin ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginId { get; set; }
#nullable restore
#else
        public string OriginId { get; set; }
#endif
        /// <summary>Prequalified status</summary>
        public bool? Prequalified { get; set; }
        /// <summary>Primary contact</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_primary_contact? PrimaryContact { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_primary_contact PrimaryContact { get; set; }
#endif
        /// <summary>State code (ISO-3166 Alpha-2 format)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateCode { get; set; }
#nullable restore
#else
        public string StateCode { get; set; }
#endif
        /// <summary>Synced to ERP</summary>
        public bool? SyncedToErp { get; set; }
        /// <summary>Vendor&apos;s Trade Name, also known as Doing Business As (DBA).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TradeName { get; set; }
#nullable restore
#else
        public string TradeName { get; set; }
#endif
        /// <summary>Union member status</summary>
        public bool? UnionMember { get; set; }
        /// <summary>Updated at</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The vendor_group property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_vendor_group? VendorGroup { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_vendor_group VendorGroup { get; set; }
#endif
        /// <summary>Website url</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Website { get; set; }
#nullable restore
#else
        public string Website { get; set; }
#endif
        /// <summary>Zip code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zip { get; set; }
#nullable restore
#else
        public string Zip { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive"/> and sets the default values.
        /// </summary>
        public Inactive()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "abbreviated_name", n => { AbbreviatedName = n.GetStringValue(); } },
                { "address", n => { Address = n.GetStringValue(); } },
                { "attachments", n => { Attachments = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_attachments>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_attachments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "authorized_bidder", n => { AuthorizedBidder = n.GetBoolValue(); } },
                { "business_id", n => { BusinessId = n.GetStringValue(); } },
                { "business_phone", n => { BusinessPhone = n.GetStringValue(); } },
                { "business_register", n => { BusinessRegister = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_business_register>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_business_register.CreateFromDiscriminatorValue); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "company", n => { Company = n.GetStringValue(); } },
                { "company_vendor", n => { CompanyVendor = n.GetBoolValue(); } },
                { "contact_count", n => { ContactCount = n.GetIntValue(); } },
                { "country_code", n => { CountryCode = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "email_address", n => { EmailAddress = n.GetStringValue(); } },
                { "fax_number", n => { FaxNumber = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "is_active", n => { IsActive = n.GetBoolValue(); } },
                { "is_connected", n => { IsConnected = n.GetBoolValue(); } },
                { "labor_union", n => { LaborUnion = n.GetStringValue(); } },
                { "license_number", n => { LicenseNumber = n.GetStringValue(); } },
                { "_links", n => { Links = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive__links>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive__links.CreateFromDiscriminatorValue); } },
                { "logo", n => { Logo = n.GetStringValue(); } },
                { "mobile_phone", n => { MobilePhone = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "non_union_prevailing_wage", n => { NonUnionPrevailingWage = n.GetBoolValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "origin_code", n => { OriginCode = n.GetStringValue(); } },
                { "origin_data", n => { OriginData = n.GetStringValue(); } },
                { "origin_id", n => { OriginId = n.GetStringValue(); } },
                { "prequalified", n => { Prequalified = n.GetBoolValue(); } },
                { "primary_contact", n => { PrimaryContact = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_primary_contact>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_primary_contact.CreateFromDiscriminatorValue); } },
                { "state_code", n => { StateCode = n.GetStringValue(); } },
                { "synced_to_erp", n => { SyncedToErp = n.GetBoolValue(); } },
                { "trade_name", n => { TradeName = n.GetStringValue(); } },
                { "union_member", n => { UnionMember = n.GetBoolValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "vendor_group", n => { VendorGroup = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_vendor_group>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_vendor_group.CreateFromDiscriminatorValue); } },
                { "website", n => { Website = n.GetStringValue(); } },
                { "zip", n => { Zip = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("abbreviated_name", AbbreviatedName);
            writer.WriteStringValue("address", Address);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_attachments>("attachments", Attachments);
            writer.WriteBoolValue("authorized_bidder", AuthorizedBidder);
            writer.WriteStringValue("business_id", BusinessId);
            writer.WriteStringValue("business_phone", BusinessPhone);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_business_register>("business_register", BusinessRegister);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("company", Company);
            writer.WriteBoolValue("company_vendor", CompanyVendor);
            writer.WriteIntValue("contact_count", ContactCount);
            writer.WriteStringValue("country_code", CountryCode);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("email_address", EmailAddress);
            writer.WriteStringValue("fax_number", FaxNumber);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("is_active", IsActive);
            writer.WriteBoolValue("is_connected", IsConnected);
            writer.WriteStringValue("labor_union", LaborUnion);
            writer.WriteStringValue("license_number", LicenseNumber);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive__links>("_links", Links);
            writer.WriteStringValue("logo", Logo);
            writer.WriteStringValue("mobile_phone", MobilePhone);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("non_union_prevailing_wage", NonUnionPrevailingWage);
            writer.WriteStringValue("notes", Notes);
            writer.WriteStringValue("origin_code", OriginCode);
            writer.WriteStringValue("origin_data", OriginData);
            writer.WriteStringValue("origin_id", OriginId);
            writer.WriteBoolValue("prequalified", Prequalified);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_primary_contact>("primary_contact", PrimaryContact);
            writer.WriteStringValue("state_code", StateCode);
            writer.WriteBoolValue("synced_to_erp", SyncedToErp);
            writer.WriteStringValue("trade_name", TradeName);
            writer.WriteBoolValue("union_member", UnionMember);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Vendors.Inactive.Inactive_vendor_group>("vendor_group", VendorGroup);
            writer.WriteStringValue("website", Website);
            writer.WriteStringValue("zip", Zip);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
