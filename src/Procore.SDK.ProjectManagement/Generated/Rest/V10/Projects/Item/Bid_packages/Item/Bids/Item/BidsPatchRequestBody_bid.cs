// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BidsPatchRequestBody_bid : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Comments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidderComments { get; set; }
#nullable restore
#else
        public string BidderComments { get; set; }
#endif
        /// <summary>Exclusions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidderExclusion { get; set; }
#nullable restore
#else
        public string BidderExclusion { get; set; }
#endif
        /// <summary>Inclusions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidderInclusion { get; set; }
#nullable restore
#else
        public string BidderInclusion { get; set; }
#endif
        /// <summary>Bidder committed</summary>
        public bool? IsBidderCommitted { get; set; }
        /// <summary>Lump sum (overall) amount</summary>
        public float? LumpSumAmount { get; set; }
        /// <summary>Array of Login IDs to add as recipients</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? RecipientIds { get; set; }
#nullable restore
#else
        public List<int?> RecipientIds { get; set; }
#endif
        /// <summary>Vendor submitted Bid</summary>
        public bool? Submitted { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.Item.BidsPatchRequestBody_bid"/> and sets the default values.
        /// </summary>
        public BidsPatchRequestBody_bid()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.Item.BidsPatchRequestBody_bid"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.Item.BidsPatchRequestBody_bid CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.Item.BidsPatchRequestBody_bid();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bidder_comments", n => { BidderComments = n.GetStringValue(); } },
                { "bidder_exclusion", n => { BidderExclusion = n.GetStringValue(); } },
                { "bidder_inclusion", n => { BidderInclusion = n.GetStringValue(); } },
                { "is_bidder_committed", n => { IsBidderCommitted = n.GetBoolValue(); } },
                { "lump_sum_amount", n => { LumpSumAmount = n.GetFloatValue(); } },
                { "recipient_ids", n => { RecipientIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "submitted", n => { Submitted = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bidder_comments", BidderComments);
            writer.WriteStringValue("bidder_exclusion", BidderExclusion);
            writer.WriteStringValue("bidder_inclusion", BidderInclusion);
            writer.WriteBoolValue("is_bidder_committed", IsBidderCommitted);
            writer.WriteFloatValue("lump_sum_amount", LumpSumAmount);
            writer.WriteCollectionOfPrimitiveValues<int?>("recipient_ids", RecipientIds);
            writer.WriteBoolValue("submitted", Submitted);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
