// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids
{
    /// <summary>
    /// Bid
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BidsPostResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Attachments.To upload attachments you must upload the entire payload as `multipart/form-data` content-type andspecify each parameter as form-data together with `attachments[]` as files.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_attachments>? Attachments { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_attachments> Attachments { get; set; }
#endif
        /// <summary>Attachment count. It&apos;s an optional parameter when the blind bidding is on.</summary>
        public int? AttachmentsCount { get; set; }
        /// <summary>Streaming URL to download all attachments. It&apos;s an optional parameter when the blind bidding is on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AttachmentsZipStreamingUrl { get; set; }
#nullable restore
#else
        public string AttachmentsZipStreamingUrl { get; set; }
#endif
        /// <summary>Bid awarded to vendor</summary>
        public bool? Awarded { get; set; }
        /// <summary>Bid Convertible to Purchase Order</summary>
        public bool? BidConvertibleToPurchaseOrder { get; set; }
        /// <summary>Bid Convertible to Subcontract</summary>
        public bool? BidConvertibleToSubcontract { get; set; }
        /// <summary>Comments made on bid sheet. It&apos;s an optional parameter when the blind bidding is on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidderComments { get; set; }
#nullable restore
#else
        public string BidderComments { get; set; }
#endif
        /// <summary>Exclusion comments made on bid sheet. It&apos;s an optional parameter when the blind bidding is on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidderExclusion { get; set; }
#nullable restore
#else
        public string BidderExclusion { get; set; }
#endif
        /// <summary>Inclusion comments made on bid sheet. It&apos;s an optional parameter when the blind bidding is on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidderInclusion { get; set; }
#nullable restore
#else
        public string BidderInclusion { get; set; }
#endif
        /// <summary>Notes. It&apos;s an optional parameter when the blind bidding is on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidderNotes { get; set; }
#nullable restore
#else
        public string BidderNotes { get; set; }
#endif
        /// <summary>Bidders can add line items</summary>
        public bool? BiddersCanAddLineItems { get; set; }
        /// <summary>Bid Form Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidFormTitle { get; set; }
#nullable restore
#else
        public string BidFormTitle { get; set; }
#endif
        /// <summary>Items</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_items>? BidItems { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_items> BidItems { get; set; }
#endif
        /// <summary>Bid Package ID</summary>
        public int? BidPackageId { get; set; }
        /// <summary>Package Title</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BidPackageTitle { get; set; }
#nullable restore
#else
        public string BidPackageTitle { get; set; }
#endif
        /// <summary>Bid Requester Info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_requester? BidRequester { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_requester BidRequester { get; set; }
#endif
        /// <summary>This status is combination of the `invitation_last_sent_at`, `is_bidder_committed`, `submitted`, &amp; `awarded` values.The `not_invited`  status is the same as `invitation_last_sent_at` being null,     `is_bidder_committed` being null,  `submitted` being false, &amp; `awarded` not being true.The `undecided`    status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being null,  `submitted` being false, &amp; `awarded` not being true.The `will_not_bid` status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being false, `submitted` being false, &amp; `awarded` not being true.The `will_bid`     status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being false, &amp; `awarded` not being true.The `submitted`    status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being true,  &amp; `awarded` not being true.The `awarded`      status is the same as `invitation_last_sent_at` not being null, `is_bidder_committed` being true,  `submitted` being true,  &amp; `awarded` being true.</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_status? BidStatus { get; set; }
        /// <summary>Company ID</summary>
        public int? CompanyId { get; set; }
        /// <summary>Contract button disabled reason</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractButtonDisabledReason { get; set; }
#nullable restore
#else
        public string ContractButtonDisabledReason { get; set; }
#endif
        /// <summary>Cost Codes associated with items</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_cost_codes>? CostCodes { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_cost_codes> CostCodes { get; set; }
#endif
        /// <summary>Created at</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Deleted at</summary>
        public DateTimeOffset? DeletedAt { get; set; }
        /// <summary>Due date</summary>
        public DateTimeOffset? DueDate { get; set; }
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Date/time the Bid invitation was last sent</summary>
        public DateTimeOffset? InvitationLastSentAt { get; set; }
        /// <summary>Bidder committed</summary>
        public bool? IsBidderCommitted { get; set; }
        /// <summary>The links property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_links? Links { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_links Links { get; set; }
#endif
        /// <summary>Lump sum (overall) amount. It&apos;s an optional parameter when the blind bidding is on.</summary>
        public float? LumpSumAmount { get; set; }
        /// <summary>Lump sum bidding enabled</summary>
        public bool? LumpSumEnabled { get; set; }
        /// <summary>Email address associated with creating communications for bid</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mailto { get; set; }
#nullable restore
#else
        public string Mailto { get; set; }
#endif
        /// <summary>Purchase Order button disabled reason</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PoButtonDisabledReason { get; set; }
#nullable restore
#else
        public string PoButtonDisabledReason { get; set; }
#endif
        /// <summary>Project Info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_project? Project { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_project Project { get; set; }
#endif
        /// <summary>Login IDs of all recipients on a bid</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? RecipientIds { get; set; }
#nullable restore
#else
        public List<int?> RecipientIds { get; set; }
#endif
        /// <summary>Detailed recipient informations on bid</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_recipient_list>? RecipientList { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_recipient_list> RecipientList { get; set; }
#endif
        /// <summary>Recipient emails and phone numbers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RecipientListWithEmailAndNumber { get; set; }
#nullable restore
#else
        public List<string> RecipientListWithEmailAndNumber { get; set; }
#endif
        /// <summary>Vendor submitted bid</summary>
        public bool? Submitted { get; set; }
        /// <summary>Updated at</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>Bid Vendor Info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_vendor? Vendor { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_vendor Vendor { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse"/> and sets the default values.
        /// </summary>
        public BidsPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attachments", n => { Attachments = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_attachments>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_attachments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "attachments_count", n => { AttachmentsCount = n.GetIntValue(); } },
                { "attachments_zip_streaming_url", n => { AttachmentsZipStreamingUrl = n.GetStringValue(); } },
                { "awarded", n => { Awarded = n.GetBoolValue(); } },
                { "bid_convertible_to_purchase_order", n => { BidConvertibleToPurchaseOrder = n.GetBoolValue(); } },
                { "bid_convertible_to_subcontract", n => { BidConvertibleToSubcontract = n.GetBoolValue(); } },
                { "bid_form_title", n => { BidFormTitle = n.GetStringValue(); } },
                { "bid_items", n => { BidItems = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_items>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_items.CreateFromDiscriminatorValue)?.AsList(); } },
                { "bid_package_id", n => { BidPackageId = n.GetIntValue(); } },
                { "bid_package_title", n => { BidPackageTitle = n.GetStringValue(); } },
                { "bid_requester", n => { BidRequester = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_requester>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_requester.CreateFromDiscriminatorValue); } },
                { "bid_status", n => { BidStatus = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_status>(); } },
                { "bidder_comments", n => { BidderComments = n.GetStringValue(); } },
                { "bidder_exclusion", n => { BidderExclusion = n.GetStringValue(); } },
                { "bidder_inclusion", n => { BidderInclusion = n.GetStringValue(); } },
                { "bidder_notes", n => { BidderNotes = n.GetStringValue(); } },
                { "bidders_can_add_line_items", n => { BiddersCanAddLineItems = n.GetBoolValue(); } },
                { "company_id", n => { CompanyId = n.GetIntValue(); } },
                { "contract_button_disabled_reason", n => { ContractButtonDisabledReason = n.GetStringValue(); } },
                { "cost_codes", n => { CostCodes = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_cost_codes>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_cost_codes.CreateFromDiscriminatorValue)?.AsList(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "deleted_at", n => { DeletedAt = n.GetDateTimeOffsetValue(); } },
                { "due_date", n => { DueDate = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "invitation_last_sent_at", n => { InvitationLastSentAt = n.GetDateTimeOffsetValue(); } },
                { "is_bidder_committed", n => { IsBidderCommitted = n.GetBoolValue(); } },
                { "links", n => { Links = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_links>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_links.CreateFromDiscriminatorValue); } },
                { "lump_sum_amount", n => { LumpSumAmount = n.GetFloatValue(); } },
                { "lump_sum_enabled", n => { LumpSumEnabled = n.GetBoolValue(); } },
                { "mailto", n => { Mailto = n.GetStringValue(); } },
                { "po_button_disabled_reason", n => { PoButtonDisabledReason = n.GetStringValue(); } },
                { "project", n => { Project = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_project>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_project.CreateFromDiscriminatorValue); } },
                { "recipient_ids", n => { RecipientIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "recipient_list", n => { RecipientList = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_recipient_list>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_recipient_list.CreateFromDiscriminatorValue)?.AsList(); } },
                { "recipient_list_with_email_and_number", n => { RecipientListWithEmailAndNumber = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "submitted", n => { Submitted = n.GetBoolValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "vendor", n => { Vendor = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_vendor>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_vendor.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_attachments>("attachments", Attachments);
            writer.WriteIntValue("attachments_count", AttachmentsCount);
            writer.WriteStringValue("attachments_zip_streaming_url", AttachmentsZipStreamingUrl);
            writer.WriteBoolValue("awarded", Awarded);
            writer.WriteBoolValue("bid_convertible_to_purchase_order", BidConvertibleToPurchaseOrder);
            writer.WriteBoolValue("bid_convertible_to_subcontract", BidConvertibleToSubcontract);
            writer.WriteStringValue("bidder_comments", BidderComments);
            writer.WriteStringValue("bidder_exclusion", BidderExclusion);
            writer.WriteStringValue("bidder_inclusion", BidderInclusion);
            writer.WriteStringValue("bidder_notes", BidderNotes);
            writer.WriteBoolValue("bidders_can_add_line_items", BiddersCanAddLineItems);
            writer.WriteStringValue("bid_form_title", BidFormTitle);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_items>("bid_items", BidItems);
            writer.WriteIntValue("bid_package_id", BidPackageId);
            writer.WriteStringValue("bid_package_title", BidPackageTitle);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_requester>("bid_requester", BidRequester);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_bid_status>("bid_status", BidStatus);
            writer.WriteIntValue("company_id", CompanyId);
            writer.WriteStringValue("contract_button_disabled_reason", ContractButtonDisabledReason);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_cost_codes>("cost_codes", CostCodes);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteDateTimeOffsetValue("deleted_at", DeletedAt);
            writer.WriteDateTimeOffsetValue("due_date", DueDate);
            writer.WriteIntValue("id", Id);
            writer.WriteDateTimeOffsetValue("invitation_last_sent_at", InvitationLastSentAt);
            writer.WriteBoolValue("is_bidder_committed", IsBidderCommitted);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_links>("links", Links);
            writer.WriteFloatValue("lump_sum_amount", LumpSumAmount);
            writer.WriteBoolValue("lump_sum_enabled", LumpSumEnabled);
            writer.WriteStringValue("mailto", Mailto);
            writer.WriteStringValue("po_button_disabled_reason", PoButtonDisabledReason);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_project>("project", Project);
            writer.WriteCollectionOfPrimitiveValues<int?>("recipient_ids", RecipientIds);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_recipient_list>("recipient_list", RecipientList);
            writer.WriteCollectionOfPrimitiveValues<string>("recipient_list_with_email_and_number", RecipientListWithEmailAndNumber);
            writer.WriteBoolValue("submitted", Submitted);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Bid_packages.Item.Bids.BidsPostResponse_vendor>("vendor", Vendor);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
