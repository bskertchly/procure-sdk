// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Waste_logs.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Waste_logsPatchRequestBody_waste_log : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Waste log approximate quantity</summary>
        public int? ApproximateQuantity { get; set; }
        /// <summary>Format: YYYY-MM-DD Example: 2016-04-19</summary>
        public Date? Date { get; set; }
        /// <summary>Datetime of record. Mutually exclusive with the date property.</summary>
        public DateTimeOffset? Datetime { get; set; }
        /// <summary>Description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Waste disposal location</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisposalLocation { get; set; }
#nullable restore
#else
        public string DisposalLocation { get; set; }
#endif
        /// <summary>Type of waste disposed of</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Material { get; set; }
#nullable restore
#else
        public string Material { get; set; }
#endif
        /// <summary>Method used to dispose of the waste</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MethodOfDisposal { get; set; }
#nullable restore
#else
        public string MethodOfDisposal { get; set; }
#endif
        /// <summary>Time of waste disposal - hour</summary>
        public int? TimeHour { get; set; }
        /// <summary>Time of waste disposal - minute</summary>
        public int? TimeMinute { get; set; }
        /// <summary>ID of the Vendor who disposed of the waste</summary>
        public int? VendorId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Waste_logs.Item.Waste_logsPatchRequestBody_waste_log"/> and sets the default values.
        /// </summary>
        public Waste_logsPatchRequestBody_waste_log()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Waste_logs.Item.Waste_logsPatchRequestBody_waste_log"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Waste_logs.Item.Waste_logsPatchRequestBody_waste_log CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Waste_logs.Item.Waste_logsPatchRequestBody_waste_log();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "approximate_quantity", n => { ApproximateQuantity = n.GetIntValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "datetime", n => { Datetime = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "disposal_location", n => { DisposalLocation = n.GetStringValue(); } },
                { "material", n => { Material = n.GetStringValue(); } },
                { "method_of_disposal", n => { MethodOfDisposal = n.GetStringValue(); } },
                { "time_hour", n => { TimeHour = n.GetIntValue(); } },
                { "time_minute", n => { TimeMinute = n.GetIntValue(); } },
                { "vendor_id", n => { VendorId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("approximate_quantity", ApproximateQuantity);
            writer.WriteDateValue("date", Date);
            writer.WriteDateTimeOffsetValue("datetime", Datetime);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("disposal_location", DisposalLocation);
            writer.WriteStringValue("material", Material);
            writer.WriteStringValue("method_of_disposal", MethodOfDisposal);
            writer.WriteIntValue("time_hour", TimeHour);
            writer.WriteIntValue("time_minute", TimeMinute);
            writer.WriteIntValue("vendor_id", VendorId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
