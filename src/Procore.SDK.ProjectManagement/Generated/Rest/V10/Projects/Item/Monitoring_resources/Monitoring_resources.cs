// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Monitoring_resources : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ID of the associated Budget Line Item</summary>
        public int? BudgetLineItemId { get; set; }
        /// <summary>The currency_configuration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources_currency_configuration? CurrencyConfiguration { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources_currency_configuration CurrencyConfiguration { get; set; }
#endif
        /// <summary>Description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>End date, formatted based on the project&apos;s locale</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>Forecast to complete</summary>
        public float? ForecastToComplete { get; set; }
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Planned total cost</summary>
        public float? PlannedTotalCost { get; set; }
        /// <summary>Start date, formatted based on the project&apos;s locale</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>Total units</summary>
        public int? TotalUnits { get; set; }
        /// <summary>Unit cost</summary>
        public float? UnitCost { get; set; }
        /// <summary>Unit of measure</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources_unit_of_measure? UnitOfMeasure { get; set; }
        /// <summary>Units remaining, calculated as of today or as of the provided forecast_start_date parameter</summary>
        public int? UnitsRemaining { get; set; }
        /// <summary>Utilization</summary>
        public float? Utilization { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources"/> and sets the default values.
        /// </summary>
        public Monitoring_resources()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "budget_line_item_id", n => { BudgetLineItemId = n.GetIntValue(); } },
                { "currency_configuration", n => { CurrencyConfiguration = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources_currency_configuration>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources_currency_configuration.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "end_date", n => { EndDate = n.GetStringValue(); } },
                { "forecast_to_complete", n => { ForecastToComplete = n.GetFloatValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "planned_total_cost", n => { PlannedTotalCost = n.GetFloatValue(); } },
                { "start_date", n => { StartDate = n.GetStringValue(); } },
                { "total_units", n => { TotalUnits = n.GetIntValue(); } },
                { "unit_cost", n => { UnitCost = n.GetFloatValue(); } },
                { "unit_of_measure", n => { UnitOfMeasure = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources_unit_of_measure>(); } },
                { "units_remaining", n => { UnitsRemaining = n.GetIntValue(); } },
                { "utilization", n => { Utilization = n.GetFloatValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("budget_line_item_id", BudgetLineItemId);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources_currency_configuration>("currency_configuration", CurrencyConfiguration);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("end_date", EndDate);
            writer.WriteFloatValue("forecast_to_complete", ForecastToComplete);
            writer.WriteIntValue("id", Id);
            writer.WriteFloatValue("planned_total_cost", PlannedTotalCost);
            writer.WriteStringValue("start_date", StartDate);
            writer.WriteIntValue("total_units", TotalUnits);
            writer.WriteFloatValue("unit_cost", UnitCost);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Monitoring_resources.Monitoring_resources_unit_of_measure>("unit_of_measure", UnitOfMeasure);
            writer.WriteIntValue("units_remaining", UnitsRemaining);
            writer.WriteFloatValue("utilization", Utilization);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
