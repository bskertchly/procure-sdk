// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Weather_logs.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Weather_logsPatchRequestBody_weather_log : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Average temperature for the workday</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Average { get; set; }
#nullable restore
#else
        public string Average { get; set; }
#endif
        /// <summary>Type of calamity the jobsite was subject to - &quot;&quot;, &quot;Earthquake&quot;, &quot;Fire&quot;, &quot;Flash Flood&quot;, &quot;Landslide&quot;, &quot;Tornado&quot;, &quot;Hurricane&quot;, &quot;Snow&quot;,&quot;Other&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Calamity { get; set; }
#nullable restore
#else
        public string Calamity { get; set; }
#endif
        /// <summary>Additional comments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comments { get; set; }
#nullable restore
#else
        public string Comments { get; set; }
#endif
        /// <summary>Format: YYYY-MM-DD Example: 2016-04-19</summary>
        public Date? Date { get; set; }
        /// <summary>Ground condition - &quot;&quot;, &quot;Dry&quot;, &quot;Wet/Muddy&quot;, &quot;Flooded&quot;,&quot;Snow&quot;,&quot;Frozen&quot;,&quot;-----&quot;,&quot;High Tide&quot;,&quot;Low Tide&quot;, &quot;Heavy Surf/Swell&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ground { get; set; }
#nullable restore
#else
        public string Ground { get; set; }
#endif
        /// <summary>Weather delay status</summary>
        public int? IsWeatherDelay { get; set; }
        /// <summary>Precipitation conditions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Precipitation { get; set; }
#nullable restore
#else
        public string Precipitation { get; set; }
#endif
        /// <summary>Sky condition - &quot;&quot;, &quot;Clear&quot;, &quot;Cloudy&quot;, &quot;Overcast&quot;, &quot;Fog&quot;, &quot;Mist&quot;, &quot;Rain&quot;, &quot;Snow&quot;, &quot;Ice/Sleet/Hail&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sky { get; set; }
#nullable restore
#else
        public string Sky { get; set; }
#endif
        /// <summary>Weather temperature - &quot;&quot;, &quot;Very Hot&quot;, &quot;Hot&quot;, &quot;Mild&quot;, &quot;Cold&quot;, &quot;Very Cold&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Temperature { get; set; }
#nullable restore
#else
        public string Temperature { get; set; }
#endif
        /// <summary>UTC time weather conditions were observed. The date of observation must match entry&apos;s date.</summary>
        public Time? Time { get; set; }
        /// <summary>Wind condition - &quot;&quot;, &quot;Calm&quot;, &quot;Light Wind&quot;, &quot;High Wind&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Wind { get; set; }
#nullable restore
#else
        public string Wind { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Weather_logs.Item.Weather_logsPatchRequestBody_weather_log"/> and sets the default values.
        /// </summary>
        public Weather_logsPatchRequestBody_weather_log()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Weather_logs.Item.Weather_logsPatchRequestBody_weather_log"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Weather_logs.Item.Weather_logsPatchRequestBody_weather_log CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Weather_logs.Item.Weather_logsPatchRequestBody_weather_log();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "average", n => { Average = n.GetStringValue(); } },
                { "calamity", n => { Calamity = n.GetStringValue(); } },
                { "comments", n => { Comments = n.GetStringValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "ground", n => { Ground = n.GetStringValue(); } },
                { "is_weather_delay", n => { IsWeatherDelay = n.GetIntValue(); } },
                { "precipitation", n => { Precipitation = n.GetStringValue(); } },
                { "sky", n => { Sky = n.GetStringValue(); } },
                { "temperature", n => { Temperature = n.GetStringValue(); } },
                { "time", n => { Time = n.GetTimeValue(); } },
                { "wind", n => { Wind = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("average", Average);
            writer.WriteStringValue("calamity", Calamity);
            writer.WriteStringValue("comments", Comments);
            writer.WriteDateValue("date", Date);
            writer.WriteStringValue("ground", Ground);
            writer.WriteIntValue("is_weather_delay", IsWeatherDelay);
            writer.WriteStringValue("precipitation", Precipitation);
            writer.WriteStringValue("sky", Sky);
            writer.WriteStringValue("temperature", Temperature);
            writer.WriteTimeValue("time", Time);
            writer.WriteStringValue("wind", Wind);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
