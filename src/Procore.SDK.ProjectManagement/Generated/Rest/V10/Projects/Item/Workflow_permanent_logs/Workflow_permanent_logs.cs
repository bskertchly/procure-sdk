// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs
{
    /// <summary>
    /// Workflow Permanent Log
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Workflow_permanent_logs : IAdditionalDataHolder, IParsable
    {
        /// <summary>Name of the activity logged</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Activity { get; set; }
#nullable restore
#else
        public string Activity { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The attachments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs_attachments>? Attachments { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs_attachments> Attachments { get; set; }
#endif
        /// <summary>How long the assignee was responsible prior to acting</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BallInCourtDuration { get; set; }
#nullable restore
#else
        public string BallInCourtDuration { get; set; }
#endif
        /// <summary>Comments provided by the assignee when acting in the workflow</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comments { get; set; }
#nullable restore
#else
        public string Comments { get; set; }
#endif
        /// <summary>Log recorded at</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Name of the user performing the activity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PerformedBy { get; set; }
#nullable restore
#else
        public string PerformedBy { get; set; }
#endif
        /// <summary>Name of the workflow role</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserRole { get; set; }
#nullable restore
#else
        public string UserRole { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs"/> and sets the default values.
        /// </summary>
        public Workflow_permanent_logs()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activity", n => { Activity = n.GetStringValue(); } },
                { "attachments", n => { Attachments = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs_attachments>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs_attachments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ball_in_court_duration", n => { BallInCourtDuration = n.GetStringValue(); } },
                { "comments", n => { Comments = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "performed_by", n => { PerformedBy = n.GetStringValue(); } },
                { "user_role", n => { UserRole = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("activity", Activity);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Workflow_permanent_logs.Workflow_permanent_logs_attachments>("attachments", Attachments);
            writer.WriteStringValue("ball_in_court_duration", BallInCourtDuration);
            writer.WriteStringValue("comments", Comments);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("performed_by", PerformedBy);
            writer.WriteStringValue("user_role", UserRole);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
