// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Ids;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Item;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Search;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\managed_equipment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Managed_equipmentRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The ids property</summary>
        [Obsolete("")]
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Ids.IdsRequestBuilder Ids
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Ids.IdsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        [Obsolete("")]
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Search.SearchRequestBuilder Search
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.managed_equipment.item collection</summary>
        /// <param name="position">Id of the equipment</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Item.Managed_equipmentItemRequestBuilder"/></returns>
        [Obsolete("")]
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Item.Managed_equipmentItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Item.Managed_equipmentItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Managed_equipmentRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/managed_equipment{?filters%5Bcompany_visible%5D*,filters%5Bcurrent_project_id%5D*,filters%5Binduction_status%5D*,filters%5Blast_service_date%5D*,filters%5Bmanaged_equipment_category_id%5D*,filters%5Bmanaged_equipment_id%5D*,filters%5Bmanaged_equipment_make_id%5D*,filters%5Bmanaged_equipment_model_id%5D*,filters%5Bmanaged_equipment_type_id%5D*,filters%5Bnext_service_date%5D*,filters%5Boffsite%5D,filters%5Bonsite%5D,filters%5Bownership%5D*,filters%5Bstatus%5D,filters%5Bupdated_at%5D*,filters%5Bvendor_id%5D*,filters%5Byear%5D*,page*,per_page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Managed_equipmentRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/managed_equipment{?filters%5Bcompany_visible%5D*,filters%5Bcurrent_project_id%5D*,filters%5Binduction_status%5D*,filters%5Blast_service_date%5D*,filters%5Bmanaged_equipment_category_id%5D*,filters%5Bmanaged_equipment_id%5D*,filters%5Bmanaged_equipment_make_id%5D*,filters%5Bmanaged_equipment_model_id%5D*,filters%5Bmanaged_equipment_type_id%5D*,filters%5Bnext_service_date%5D*,filters%5Boffsite%5D,filters%5Bonsite%5D,filters%5Bownership%5D*,filters%5Bstatus%5D,filters%5Bupdated_at%5D*,filters%5Bvendor_id%5D*,filters%5Byear%5D*,page*,per_page*}", rawUrl)
        {
        }
        /// <summary>
        /// Return a list of all equipment with details for a specified project.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment403Error">When receiving a 403 status code</exception>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder.Managed_equipmentRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder.Managed_equipmentRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Create a new equipment associated with the specified project.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment422Error">When receiving a 422 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment5XXError">When receiving a 5XX status code</exception>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment422Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipment5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Return a list of all equipment with details for a specified project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder.Managed_equipmentRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder.Managed_equipmentRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new equipment associated with the specified project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        [Obsolete("")]
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.Managed_equipmentRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Return a list of all equipment with details for a specified project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Managed_equipmentRequestBuilderGetQueryParameters 
        {
            /// <summary>If true, return item(s) with &apos;company visible&apos; status.</summary>
            [QueryParameter("filters%5Bcompany_visible%5D")]
            public bool? FilterscompanyVisible { get; set; }
            /// <summary>Return item(s) with the specified current project ID.</summary>
            [QueryParameter("filters%5Bcurrent_project_id%5D")]
            public int? FilterscurrentProjectId { get; set; }
            /// <summary>Returns item(s) with the specified inudction status.</summary>
            [QueryParameter("filters%5Binduction_status%5D")]
            public bool? FiltersinductionStatus { get; set; }
            /// <summary>Return item(s) with a last service date within the specified ISO 8601 datetime range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Blast_service_date%5D")]
            public string? FilterslastServiceDate { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Blast_service_date%5D")]
            public string FilterslastServiceDate { get; set; }
#endif
            /// <summary>Return item(s) with the specified Managed Equipment Category ID.</summary>
            [QueryParameter("filters%5Bmanaged_equipment_category_id%5D")]
            public int? FiltersmanagedEquipmentCategoryId { get; set; }
            /// <summary>Return item(s) with the specified Managed Equipment ID.</summary>
            [QueryParameter("filters%5Bmanaged_equipment_id%5D")]
            public int? FiltersmanagedEquipmentId { get; set; }
            /// <summary>Return item(s) with the specified Managed Equipment Make ID.</summary>
            [QueryParameter("filters%5Bmanaged_equipment_make_id%5D")]
            public int? FiltersmanagedEquipmentMakeId { get; set; }
            /// <summary>Return item(s) with the specified Managed Equipment Model ID.</summary>
            [QueryParameter("filters%5Bmanaged_equipment_model_id%5D")]
            public int? FiltersmanagedEquipmentModelId { get; set; }
            /// <summary>Return item(s) with the specified Managed Equipment Type ID.</summary>
            [QueryParameter("filters%5Bmanaged_equipment_type_id%5D")]
            public int? FiltersmanagedEquipmentTypeId { get; set; }
            /// <summary>Return item(s) with a next service date within the specified ISO 8601 datetime range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bnext_service_date%5D")]
            public string? FiltersnextServiceDate { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bnext_service_date%5D")]
            public string FiltersnextServiceDate { get; set; }
#endif
            /// <summary>Offsite Dates. Returns item(s) with the specified range of offsite dates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Boffsite%5D")]
            public string[]? Filtersoffsite { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Boffsite%5D")]
            public string[] Filtersoffsite { get; set; }
#endif
            /// <summary>Onsite Dates. Returns item(s) with the specified range of onsite dates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bonsite%5D")]
            public string[]? Filtersonsite { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bonsite%5D")]
            public string[] Filtersonsite { get; set; }
#endif
            /// <summary>Returns only item(s) with the specified ownership value. Must be one of Owned, Rented, or Sub.</summary>
            [QueryParameter("filters%5Bownership%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Managed_equipment.GetFiltersOwnershipQueryParameterType? Filtersownership { get; set; }
            /// <summary>Returns item(s) matching the specified status value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bstatus%5D")]
            public string[]? Filtersstatus { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bstatus%5D")]
            public string[] Filtersstatus { get; set; }
#endif
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
            /// <summary>Return item(s) with the specified Vendor ID.</summary>
            [QueryParameter("filters%5Bvendor_id%5D")]
            public int? FiltersvendorId { get; set; }
            /// <summary>Return item(s) with the specified year.</summary>
            [QueryParameter("filters%5Byear%5D")]
            public int? Filtersyear { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
        }
    }
}
#pragma warning restore CS0618
