// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\uploads
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UploadsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.uploads.item collection</summary>
        /// <param name="position">Upload UUID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Item.WithUuItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Item.WithUuItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("uuid", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Item.WithUuItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UploadsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/uploads", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UploadsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/uploads", rawUrl)
        {
        }
        /// <summary>
        /// Creating an Upload is the first step in associating a file to a resourcein Procore. Creating an Upload can be seen as fetching instruction on howto post your file directly to Procore&apos;s storage service.The instructions contain three properties: a UUID to reference theUpload, a URL which has to be used to post the file, and fields whichneed to be posted together with the file.To upload the file you must POST to the URL in the _url_ property witha multipart/form-data body (see RFC 2388). Make sure to include **all**the names and values from _fields_ without altering them. The URL andfields necessary to complete the upload may vary between companies andmay also change over time so none of these may be hard-coded. Finally adda field named _file_ with the actual file data.Uploads are associated to the Company that owns the project so they canuse company specific upload settings. The currently authenticated userwill become the owner of the Upload and only that user can use the Uploadin subsequent requests.You will have to initiate the upload within one hour or you can expecta 403 Forbidden response. Other errors are usually clearly explained inthe response body.For an example of how to associate a finalized upload to another resourcein Procore see the Photos resource. An Upload will have to be associatedto another resource within a week or it will be automatically deleted fromProcore servers.Note that there is also a variant of this API endpoint that works using aCompany ID.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder.UploadsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads5XXError">When receiving a 5XX status code</exception>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder.UploadsPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder.UploadsPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.Uploads5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder.UploadsPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder.UploadsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creating an Upload is the first step in associating a file to a resourcein Procore. Creating an Upload can be seen as fetching instruction on howto post your file directly to Procore&apos;s storage service.The instructions contain three properties: a UUID to reference theUpload, a URL which has to be used to post the file, and fields whichneed to be posted together with the file.To upload the file you must POST to the URL in the _url_ property witha multipart/form-data body (see RFC 2388). Make sure to include **all**the names and values from _fields_ without altering them. The URL andfields necessary to complete the upload may vary between companies andmay also change over time so none of these may be hard-coded. Finally adda field named _file_ with the actual file data.Uploads are associated to the Company that owns the project so they canuse company specific upload settings. The currently authenticated userwill become the owner of the Upload and only that user can use the Uploadin subsequent requests.You will have to initiate the upload within one hour or you can expecta 403 Forbidden response. Other errors are usually clearly explained inthe response body.For an example of how to associate a finalized upload to another resourcein Procore see the Photos resource. An Upload will have to be associatedto another resource within a week or it will be automatically deleted fromProcore servers.Note that there is also a variant of this API endpoint that works using aCompany ID.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "multipart/form-data", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        [Obsolete("")]
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember1"/>, <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember2"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UploadsPostResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember1? UploadsPostResponseMember1 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember1 UploadsPostResponseMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember2? UploadsPostResponseMember2 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember2 UploadsPostResponseMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder.UploadsPostResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder.UploadsPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsRequestBuilder.UploadsPostResponse();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.UploadsPostResponseMember1 = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.UploadsPostResponseMember2 = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember2();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(UploadsPostResponseMember1 != null)
                {
                    return UploadsPostResponseMember1.GetFieldDeserializers();
                }
                else if(UploadsPostResponseMember2 != null)
                {
                    return UploadsPostResponseMember2.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(UploadsPostResponseMember1 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember1>(null, UploadsPostResponseMember1);
                }
                else if(UploadsPostResponseMember2 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Uploads.UploadsPostResponseMember2>(null, UploadsPostResponseMember2);
                }
            }
        }
    }
}
#pragma warning restore CS0618
