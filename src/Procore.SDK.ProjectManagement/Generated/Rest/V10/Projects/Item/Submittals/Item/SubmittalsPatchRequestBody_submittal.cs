// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SubmittalsPatchRequestBody_submittal : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The Actual Delivery Date of the Submittal*This field can only be set if the project has submittal delivery information enabled</summary>
        public Date? ActualDeliveryDate { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The buffer working days for the dynamic submittal plan calculation *This field is only available to be set if Dynamic Submittal Plan is enabled</summary>
        public int? BufferTime { get; set; }
        /// <summary>The Confirmed Delivery Date of the Submittal*This field can only be set if the project has submittal delivery information enabled</summary>
        public Date? ConfirmedDeliveryDate { get; set; }
        /// <summary>The ID of the Cost Code of the Submittal*This field can only be set by admins</summary>
        public int? CostCodeId { get; set; }
        /// <summary>Value of the custom field. The data type of the value passed in corresponds with the data_type of the Custom Field Definition.For a lov_entry data_type the value passed in should be the ID of one of the Custom Field Definition&apos;s LOV Entries. For a lov_entries data_type the value passed in should be an array of IDs of the Custom Field Definition&apos;s LOV Entries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal.SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id? CustomFieldCustomFieldDefinitionId { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal.SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id CustomFieldCustomFieldDefinitionId { get; set; }
#endif
        /// <summary>*This field can only be set by admins</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomTextarea1 { get; set; }
#nullable restore
#else
        public string CustomTextarea1 { get; set; }
#endif
        /// <summary>*This field can only be set by admins</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomTextfield1 { get; set; }
#nullable restore
#else
        public string CustomTextfield1 { get; set; }
#endif
        /// <summary>The Description of the Submittal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The Design Team Review Time of the Submittal (in days)*This field can only be set if the project has schedule calculations enabled</summary>
        public int? DesignTeamReviewTime { get; set; }
        /// <summary>The IDs of the Distribution Members of the Submittal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? DistributionMemberIds { get; set; }
#nullable restore
#else
        public List<int?> DistributionMemberIds { get; set; }
#endif
        /// <summary>The Due Date of the Submittal*This field is not available to be set if sequential approvers is enabled</summary>
        public Date? DueDate { get; set; }
        /// <summary>The field that controls if the dynamic submittal plan is for record only or not *This field is only available to be set if Dynamic Submittal Plan is enabled</summary>
        public bool? ForRecordOnly { get; set; }
        /// <summary>The Internal Review Time of the Submtital (in days)*This field can only be set if the project has schedule calculations enabled</summary>
        public int? InternalReviewTime { get; set; }
        /// <summary>The Issue Date of the Submittal*This field can only be set by admins</summary>
        public Date? IssueDate { get; set; }
        /// <summary>The Lead Time of the Submittal (in days)*This field can only be set by admins or if the project has schedule calculations enabled</summary>
        public int? LeadTime { get; set; }
        /// <summary>The Location of the Submittal</summary>
        public int? LocationId { get; set; }
        /// <summary>The Number of the Submittal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>Whether the Submittal is Private or not</summary>
        public bool? Private { get; set; }
        /// <summary>An array of Prostore File IDs. The Prostore Files will be associated with the Submittal as attachments.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ProstoreFileIds { get; set; }
#nullable restore
#else
        public List<int?> ProstoreFileIds { get; set; }
#endif
        /// <summary>The Received Date of the Submittal*This field can only be set by admins</summary>
        public Date? ReceivedDate { get; set; }
        /// <summary>The Received From of the Submittal</summary>
        public int? ReceivedFromId { get; set; }
        /// <summary>The Required On Site Date of the Submittal*This field can only be set by admins or if the project has schedule calculations enabled</summary>
        public Date? RequiredOnSiteDate { get; set; }
        /// <summary>The Responsible Contractor of the Submittal</summary>
        public int? ResponsibleContractorId { get; set; }
        /// <summary>The Revision of the Submittal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Revision { get; set; }
#nullable restore
#else
        public string Revision { get; set; }
#endif
        /// <summary>The ID of the Scheduled Task of the Submittal*This field can only be set if the project has submittal delivery information enabled and the user has permissions to view the calendar tool</summary>
        public int? ScheduledTaskId { get; set; }
        /// <summary>The key of the Scheduled Task of the Submittal. Note that use of this parameter is deprecated. Please use `scheduled_task_id` instead.*This field can only be set if the project has submittal delivery information enabled and the user has permissions to view the calendar tool</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScheduledTaskKey { get; set; }
#nullable restore
#else
        public string ScheduledTaskKey { get; set; }
#endif
        /// <summary>The ID of the Source Submittal.*By setting this field, the submittal will be created as a revision of source submittal.</summary>
        public int? SourceSubmittalLogId { get; set; }
        /// <summary>The ID of the latest Submittal Revision.</summary>
        public int? SourceSubmittalRevisionId { get; set; }
        /// <summary>The ID of the Specification Section of the Submittal</summary>
        public int? SpecificationSectionId { get; set; }
        /// <summary>The ID of the Submittal Status of the Submittal*This field can only be set by admins</summary>
        public int? StatusId { get; set; }
        /// <summary>The ID of the Sub Job of the Submittal</summary>
        public int? SubJobId { get; set; }
        /// <summary>The Submit By Date of the Submittal*This field can only be set by admins</summary>
        public Date? SubmitBy { get; set; }
        /// <summary>The ID of the Submittal Manager of the Submittal*This field can only be set by admins</summary>
        public int? SubmittalManagerId { get; set; }
        /// <summary>The ID of the Submittal Package of the Submittal*This field can only be set by admins</summary>
        public int? SubmittalPackageId { get; set; }
        /// <summary>The Title of the Submittal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The Submittal Type of the Submittal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal"/> and sets the default values.
        /// </summary>
        public SubmittalsPatchRequestBody_submittal()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actual_delivery_date", n => { ActualDeliveryDate = n.GetDateValue(); } },
                { "buffer_time", n => { BufferTime = n.GetIntValue(); } },
                { "confirmed_delivery_date", n => { ConfirmedDeliveryDate = n.GetDateValue(); } },
                { "cost_code_id", n => { CostCodeId = n.GetIntValue(); } },
                { "custom_field_%{custom_field_definition_id}", n => { CustomFieldCustomFieldDefinitionId = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal.SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal.SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id.CreateFromDiscriminatorValue); } },
                { "custom_textarea_1", n => { CustomTextarea1 = n.GetStringValue(); } },
                { "custom_textfield_1", n => { CustomTextfield1 = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "design_team_review_time", n => { DesignTeamReviewTime = n.GetIntValue(); } },
                { "distribution_member_ids", n => { DistributionMemberIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "due_date", n => { DueDate = n.GetDateValue(); } },
                { "for_record_only", n => { ForRecordOnly = n.GetBoolValue(); } },
                { "internal_review_time", n => { InternalReviewTime = n.GetIntValue(); } },
                { "issue_date", n => { IssueDate = n.GetDateValue(); } },
                { "lead_time", n => { LeadTime = n.GetIntValue(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "private", n => { Private = n.GetBoolValue(); } },
                { "prostore_file_ids", n => { ProstoreFileIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "received_date", n => { ReceivedDate = n.GetDateValue(); } },
                { "received_from_id", n => { ReceivedFromId = n.GetIntValue(); } },
                { "required_on_site_date", n => { RequiredOnSiteDate = n.GetDateValue(); } },
                { "responsible_contractor_id", n => { ResponsibleContractorId = n.GetIntValue(); } },
                { "revision", n => { Revision = n.GetStringValue(); } },
                { "scheduled_task_id", n => { ScheduledTaskId = n.GetIntValue(); } },
                { "scheduled_task_key", n => { ScheduledTaskKey = n.GetStringValue(); } },
                { "source_submittal_log_id", n => { SourceSubmittalLogId = n.GetIntValue(); } },
                { "source_submittal_revision_id", n => { SourceSubmittalRevisionId = n.GetIntValue(); } },
                { "specification_section_id", n => { SpecificationSectionId = n.GetIntValue(); } },
                { "status_id", n => { StatusId = n.GetIntValue(); } },
                { "sub_job_id", n => { SubJobId = n.GetIntValue(); } },
                { "submit_by", n => { SubmitBy = n.GetDateValue(); } },
                { "submittal_manager_id", n => { SubmittalManagerId = n.GetIntValue(); } },
                { "submittal_package_id", n => { SubmittalPackageId = n.GetIntValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateValue("actual_delivery_date", ActualDeliveryDate);
            writer.WriteIntValue("buffer_time", BufferTime);
            writer.WriteDateValue("confirmed_delivery_date", ConfirmedDeliveryDate);
            writer.WriteIntValue("cost_code_id", CostCodeId);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal.SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id>("custom_field_%{custom_field_definition_id}", CustomFieldCustomFieldDefinitionId);
            writer.WriteStringValue("custom_textarea_1", CustomTextarea1);
            writer.WriteStringValue("custom_textfield_1", CustomTextfield1);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("design_team_review_time", DesignTeamReviewTime);
            writer.WriteCollectionOfPrimitiveValues<int?>("distribution_member_ids", DistributionMemberIds);
            writer.WriteDateValue("due_date", DueDate);
            writer.WriteBoolValue("for_record_only", ForRecordOnly);
            writer.WriteIntValue("internal_review_time", InternalReviewTime);
            writer.WriteDateValue("issue_date", IssueDate);
            writer.WriteIntValue("lead_time", LeadTime);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteStringValue("number", Number);
            writer.WriteBoolValue("private", Private);
            writer.WriteCollectionOfPrimitiveValues<int?>("prostore_file_ids", ProstoreFileIds);
            writer.WriteDateValue("received_date", ReceivedDate);
            writer.WriteIntValue("received_from_id", ReceivedFromId);
            writer.WriteDateValue("required_on_site_date", RequiredOnSiteDate);
            writer.WriteIntValue("responsible_contractor_id", ResponsibleContractorId);
            writer.WriteStringValue("revision", Revision);
            writer.WriteIntValue("scheduled_task_id", ScheduledTaskId);
            writer.WriteStringValue("scheduled_task_key", ScheduledTaskKey);
            writer.WriteIntValue("source_submittal_log_id", SourceSubmittalLogId);
            writer.WriteIntValue("source_submittal_revision_id", SourceSubmittalRevisionId);
            writer.WriteIntValue("specification_section_id", SpecificationSectionId);
            writer.WriteIntValue("status_id", StatusId);
            writer.WriteIntValue("sub_job_id", SubJobId);
            writer.WriteDateValue("submit_by", SubmitBy);
            writer.WriteIntValue("submittal_manager_id", SubmittalManagerId);
            writer.WriteIntValue("submittal_package_id", SubmittalPackageId);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="bool"/>, <see cref="double"/>, <see cref="string"/>, List&lt;int&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="bool"/></summary>
            public bool? Boolean { get; set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double { get; set; }
            /// <summary>Composed type representation for type List&lt;int&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<int?>? Integer { get; set; }
#nullable restore
#else
            public List<int?> Integer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal.SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal.SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody_submittal.SubmittalsPatchRequestBody_submittal_custom_field_Custom_field_definition_id();
                if(parseNode.GetBoolValue() is bool booleanValue)
                {
                    result.Boolean = booleanValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetCollectionOfPrimitiveValues<int?>()?.AsList() is List<int?> integerValue)
                {
                    result.Integer = integerValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Boolean != null)
                {
                    writer.WriteBoolValue(null, Boolean);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(Integer != null)
                {
                    writer.WriteCollectionOfPrimitiveValues<int?>(null, Integer);
                }
            }
        }
    }
}
#pragma warning restore CS0618
