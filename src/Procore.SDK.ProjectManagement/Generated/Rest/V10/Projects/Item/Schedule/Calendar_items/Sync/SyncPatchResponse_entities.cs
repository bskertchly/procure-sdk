// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync
{
    /// <summary>
    /// Schedule Calendar Item
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SyncPatchResponse_entities : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The assigned property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_assigned? Assigned { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_assigned Assigned { get; set; }
#endif
        /// <summary>Calendar Item color (as a hex triplet)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>The created_by property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_created_by? CreatedBy { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_created_by CreatedBy { get; set; }
#endif
        /// <summary>Calendar Item description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Calendar Item finish date</summary>
        public Date? Finish { get; set; }
        /// <summary>ToDo full outline path (corresponds to matching field on Tasks)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullOutlinePath { get; set; }
#nullable restore
#else
        public string FullOutlinePath { get; set; }
#endif
        /// <summary>Calendar Item ID</summary>
        public int? Id { get; set; }
        /// <summary>Calendar Item milestone status</summary>
        public bool? Milestone { get; set; }
        /// <summary>Calendar Item name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Calendar Item completion percentage</summary>
        public int? Percentage { get; set; }
        /// <summary>Calendar Item private status</summary>
        public bool? Private { get; set; }
        /// <summary>Calendar Item start date</summary>
        public Date? Start { get; set; }
        /// <summary>Calendar Item name (corresponds to matching field on Tasks)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskName { get; set; }
#nullable restore
#else
        public string TaskName { get; set; }
#endif
        /// <summary>Calendar Item last updated at</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities"/> and sets the default values.
        /// </summary>
        public SyncPatchResponse_entities()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assigned", n => { Assigned = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_assigned>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_assigned.CreateFromDiscriminatorValue); } },
                { "color", n => { Color = n.GetStringValue(); } },
                { "created_by", n => { CreatedBy = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_created_by>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_created_by.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "finish", n => { Finish = n.GetDateValue(); } },
                { "full_outline_path", n => { FullOutlinePath = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "milestone", n => { Milestone = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "percentage", n => { Percentage = n.GetIntValue(); } },
                { "private", n => { Private = n.GetBoolValue(); } },
                { "start", n => { Start = n.GetDateValue(); } },
                { "task_name", n => { TaskName = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_assigned>("assigned", Assigned);
            writer.WriteStringValue("color", Color);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Sync.SyncPatchResponse_entities_created_by>("created_by", CreatedBy);
            writer.WriteStringValue("description", Description);
            writer.WriteDateValue("finish", Finish);
            writer.WriteStringValue("full_outline_path", FullOutlinePath);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("milestone", Milestone);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("percentage", Percentage);
            writer.WriteBoolValue("private", Private);
            writer.WriteDateValue("start", Start);
            writer.WriteStringValue("task_name", TaskName);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
