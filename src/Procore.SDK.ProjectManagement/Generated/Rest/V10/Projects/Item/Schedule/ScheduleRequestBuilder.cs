// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Imports;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookaheads;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Settings;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\schedule
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ScheduleRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The calendar_items property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Calendar_itemsRequestBuilder Calendar_items
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Calendar_itemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The imports property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Imports.ImportsRequestBuilder Imports
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Imports.ImportsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lookahead_tasks property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksRequestBuilder Lookahead_tasks
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lookaheads property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookaheads.LookaheadsRequestBuilder Lookaheads
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookaheads.LookaheadsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Settings.SettingsRequestBuilder Settings
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ScheduleRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/schedule", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ScheduleRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/schedule", rawUrl)
        {
        }
        /// <summary>
        /// Returns metadata about this Project&apos;s Schedule, including information about the Schedule integration configuration for the current project.#### Schedule Types| Type                                                 | Key                           ||------------------------------------------------------|-------------------------------|| File-based schedule integration via web browser      | &quot;Microsoft Project&quot;           || File-based schedule integration via Procore Drive    | &quot;Microsoft Project 2010&quot;      || File-based schedule integration via Procore Documents| &quot;Microsoft Project Documents&quot; || Primavera P6 database integration via Procore Drive  | &quot;Primavera P6&quot;                |Note that the schedule types listed as &quot;Microsoft Project&quot;, &quot;Microsoft Project 2010&quot;, and &quot;Microsoft Project Documents&quot; are functionally identical.In all cases Procore can consume any supported schedule file type and extract data from it, not just Microsoft Project.Schedule files can be uploaded either via Procore Drive, via the Procore Documents tool, or via the Procore Schedule tool,regardless of which of these three types is selected. Where Primavera P6 database integration via Procore Drive is in use, the `p6_id`attribute returned by this API indicates which P6 project Procore Drive is extracting data from.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Schedule403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleGetResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleGetResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Schedule403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleGetResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates the Schedule integration type for a project.#### Schedule Types| Type                                                 | Key                           ||------------------------------------------------------|-------------------------------|| File-based schedule integration via web browser      | &quot;Microsoft Project&quot;           || File-based schedule integration via Procore Drive    | &quot;Microsoft Project 2010&quot;      || File-based schedule integration via Procore Documents| &quot;Microsoft Project Documents&quot; || Primavera P6 database integration via Procore Drive  | &quot;Primavera P6&quot;                |Note that the schedule types listed as &quot;Microsoft Project&quot;, &quot;Microsoft Project 2010&quot;, and &quot;Microsoft Project Documents&quot; are functionally identical.In all cases Procore can consume any supported schedule file type and extract data from it, not just Microsoft Project.Schedule files can be uploaded either via Procore Drive, via the Procore Documents tool, or via the Procore Schedule tool,regardless of which of these three types is selected. Where Primavera P6 database integration via Procore Drive is in use, the `p6_id`attribute returned by this API indicates which P6 project Procore Drive is extracting data from.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Schedule403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchResponse?> PatchAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchResponse> PatchAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Schedule403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns metadata about this Project&apos;s Schedule, including information about the Schedule integration configuration for the current project.#### Schedule Types| Type                                                 | Key                           ||------------------------------------------------------|-------------------------------|| File-based schedule integration via web browser      | &quot;Microsoft Project&quot;           || File-based schedule integration via Procore Drive    | &quot;Microsoft Project 2010&quot;      || File-based schedule integration via Procore Documents| &quot;Microsoft Project Documents&quot; || Primavera P6 database integration via Procore Drive  | &quot;Primavera P6&quot;                |Note that the schedule types listed as &quot;Microsoft Project&quot;, &quot;Microsoft Project 2010&quot;, and &quot;Microsoft Project Documents&quot; are functionally identical.In all cases Procore can consume any supported schedule file type and extract data from it, not just Microsoft Project.Schedule files can be uploaded either via Procore Drive, via the Procore Documents tool, or via the Procore Schedule tool,regardless of which of these three types is selected. Where Primavera P6 database integration via Procore Drive is in use, the `p6_id`attribute returned by this API indicates which P6 project Procore Drive is extracting data from.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates the Schedule integration type for a project.#### Schedule Types| Type                                                 | Key                           ||------------------------------------------------------|-------------------------------|| File-based schedule integration via web browser      | &quot;Microsoft Project&quot;           || File-based schedule integration via Procore Drive    | &quot;Microsoft Project 2010&quot;      || File-based schedule integration via Procore Documents| &quot;Microsoft Project Documents&quot; || Primavera P6 database integration via Procore Drive  | &quot;Primavera P6&quot;                |Note that the schedule types listed as &quot;Microsoft Project&quot;, &quot;Microsoft Project 2010&quot;, and &quot;Microsoft Project Documents&quot; are functionally identical.In all cases Procore can consume any supported schedule file type and extract data from it, not just Microsoft Project.Schedule files can be uploaded either via Procore Drive, via the Procore Documents tool, or via the Procore Schedule tool,regardless of which of these three types is selected. Where Primavera P6 database integration via Procore Drive is in use, the `p6_id`attribute returned by this API indicates which P6 project Procore Drive is extracting data from.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.SchedulePatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.ScheduleRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
