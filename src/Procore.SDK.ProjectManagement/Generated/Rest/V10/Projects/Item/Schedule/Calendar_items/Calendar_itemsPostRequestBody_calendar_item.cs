// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Calendar_itemsPostRequestBody_calendar_item : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ID of the assigned user for the Calendar Item</summary>
        public int? AssignedId { get; set; }
        /// <summary>Calendar Item color (as a hex triplet)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>Calendar Item description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The finish date of the Calendar Item</summary>
        public Date? Finish { get; set; }
        /// <summary>Calendar Item name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Calendar Item completion percentage</summary>
        public int? Percentage { get; set; }
        /// <summary>Calendar Item private status</summary>
        public bool? Private { get; set; }
        /// <summary>The start date of the Calendar Item</summary>
        public Date? Start { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Calendar_itemsPostRequestBody_calendar_item"/> and sets the default values.
        /// </summary>
        public Calendar_itemsPostRequestBody_calendar_item()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Calendar_itemsPostRequestBody_calendar_item"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Calendar_itemsPostRequestBody_calendar_item CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Calendar_items.Calendar_itemsPostRequestBody_calendar_item();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assigned_id", n => { AssignedId = n.GetIntValue(); } },
                { "color", n => { Color = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "finish", n => { Finish = n.GetDateValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "percentage", n => { Percentage = n.GetIntValue(); } },
                { "private", n => { Private = n.GetBoolValue(); } },
                { "start", n => { Start = n.GetDateValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("assigned_id", AssignedId);
            writer.WriteStringValue("color", Color);
            writer.WriteStringValue("description", Description);
            writer.WriteDateValue("finish", Finish);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("percentage", Percentage);
            writer.WriteBoolValue("private", Private);
            writer.WriteDateValue("start", Start);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
