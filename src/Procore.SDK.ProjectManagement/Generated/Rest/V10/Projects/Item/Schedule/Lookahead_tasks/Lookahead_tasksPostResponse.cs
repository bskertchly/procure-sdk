// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks
{
    /// <summary>
    /// Schedule Lookahead Task
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Lookahead_tasksPostResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Activity ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActivityId { get; set; }
#nullable restore
#else
        public string ActivityId { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>IDs of Assignee(s) assigned to this Lookahead Task</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? AssigneeIds { get; set; }
#nullable restore
#else
        public List<int?> AssigneeIds { get; set; }
#endif
        /// <summary>Additional comments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>ID of the associated Company</summary>
        public int? CompanyId { get; set; }
        /// <summary>Lookahead Task creation time</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>ID of the user who created the Lookahead Task</summary>
        public int? CreatedById { get; set; }
        /// <summary>True if this Lookahead Task is on the critical path</summary>
        public bool? CriticalPath { get; set; }
        /// <summary>Lookahead Task end date, in project time zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndDate { get; set; }
#nullable restore
#else
        public string EndDate { get; set; }
#endif
        /// <summary>Lookahead Task ID</summary>
        public int? Id { get; set; }
        /// <summary>ID of the associated Lookahead</summary>
        public int? LookaheadId { get; set; }
        /// <summary>The name of the Lookahead Task</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>ID of the parent Lookahead Task</summary>
        public int? ParentId { get; set; }
        /// <summary>ID of the associated Project</summary>
        public int? ProjectId { get; set; }
        /// <summary>IDs of Resource(s) assigned to this Lookahead Task</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ResourceIds { get; set; }
#nullable restore
#else
        public List<int?> ResourceIds { get; set; }
#endif
        /// <summary>Resources assigned to this Task</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_resources>? Resources { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_resources> Resources { get; set; }
#endif
        /// <summary>Defines the sequence in which Lookahead Tasks are normallyexpected to be displayed</summary>
        public int? RowNumber { get; set; }
        /// <summary>Segments define the set of days for the entire date range of the Lookahead Task,and the completion status of each day in the Lookahead Task</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_segments>? Segments { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_segments> Segments { get; set; }
#endif
        /// <summary>Lookahead Task start date, in project time zone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartDate { get; set; }
#nullable restore
#else
        public string StartDate { get; set; }
#endif
        /// <summary>ID of the associated Task in the Master Schedule</summary>
        public int? TaskId { get; set; }
        /// <summary>IDs of Vendor(s) assigned to this Lookahead Task</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? VendorIds { get; set; }
#nullable restore
#else
        public List<int?> VendorIds { get; set; }
#endif
        /// <summary>WBS</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Wbs { get; set; }
#nullable restore
#else
        public string Wbs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse"/> and sets the default values.
        /// </summary>
        public Lookahead_tasksPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activity_id", n => { ActivityId = n.GetStringValue(); } },
                { "assignee_ids", n => { AssigneeIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "comment", n => { Comment = n.GetStringValue(); } },
                { "company_id", n => { CompanyId = n.GetIntValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "created_by_id", n => { CreatedById = n.GetIntValue(); } },
                { "critical_path", n => { CriticalPath = n.GetBoolValue(); } },
                { "end_date", n => { EndDate = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "lookahead_id", n => { LookaheadId = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "parent_id", n => { ParentId = n.GetIntValue(); } },
                { "project_id", n => { ProjectId = n.GetIntValue(); } },
                { "resource_ids", n => { ResourceIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "resources", n => { Resources = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_resources>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_resources.CreateFromDiscriminatorValue)?.AsList(); } },
                { "row_number", n => { RowNumber = n.GetIntValue(); } },
                { "segments", n => { Segments = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_segments>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_segments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "start_date", n => { StartDate = n.GetStringValue(); } },
                { "task_id", n => { TaskId = n.GetIntValue(); } },
                { "vendor_ids", n => { VendorIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "wbs", n => { Wbs = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("activity_id", ActivityId);
            writer.WriteCollectionOfPrimitiveValues<int?>("assignee_ids", AssigneeIds);
            writer.WriteStringValue("comment", Comment);
            writer.WriteIntValue("company_id", CompanyId);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteIntValue("created_by_id", CreatedById);
            writer.WriteBoolValue("critical_path", CriticalPath);
            writer.WriteStringValue("end_date", EndDate);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("lookahead_id", LookaheadId);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("parent_id", ParentId);
            writer.WriteIntValue("project_id", ProjectId);
            writer.WriteCollectionOfPrimitiveValues<int?>("resource_ids", ResourceIds);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_resources>("resources", Resources);
            writer.WriteIntValue("row_number", RowNumber);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Schedule.Lookahead_tasks.Lookahead_tasksPostResponse_segments>("segments", Segments);
            writer.WriteStringValue("start_date", StartDate);
            writer.WriteIntValue("task_id", TaskId);
            writer.WriteCollectionOfPrimitiveValues<int?>("vendor_ids", VendorIds);
            writer.WriteStringValue("wbs", Wbs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
