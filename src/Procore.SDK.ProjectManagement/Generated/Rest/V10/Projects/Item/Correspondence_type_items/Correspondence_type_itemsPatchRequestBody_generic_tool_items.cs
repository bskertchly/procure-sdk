// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Correspondence_type_items
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Correspondence_type_itemsPatchRequestBody_generic_tool_items : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The assignee_ids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? AssigneeIds { get; set; }
#nullable restore
#else
        public List<int?> AssigneeIds { get; set; }
#endif
        /// <summary>The cost code identifier for the generic tool item.</summary>
        public int? CostCodeId { get; set; }
        /// <summary>The cost impact of the generic tool item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CostImpact { get; set; }
#nullable restore
#else
        public string CostImpact { get; set; }
#endif
        /// <summary>The due date for the generic tool item.</summary>
        public Date? DueDate { get; set; }
        /// <summary>The unique idenfitier of the generic tool item.</summary>
        public int? Id { get; set; }
        /// <summary>The location identifier for the generic tool item.</summary>
        public int? LocationId { get; set; }
        /// <summary>If this property is set to true, the generic tool item is private. If this property is set to false, the generic tool item is not private.</summary>
        public bool? Private { get; set; }
        /// <summary>The unique identifier for the Received From entity for the generic tool item.</summary>
        public int? ReceivedFromId { get; set; }
        /// <summary>The schedule impact of the generic tool item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScheduleImpact { get; set; }
#nullable restore
#else
        public string ScheduleImpact { get; set; }
#endif
        /// <summary>The specification section identifier for the generic tool item.</summary>
        public int? SpecificationSectionId { get; set; }
        /// <summary>The status of the generic tool item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The sub job identifier for the generic tool item.</summary>
        public int? SubJobId { get; set; }
        /// <summary>The task_ids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? TaskIds { get; set; }
#nullable restore
#else
        public List<int?> TaskIds { get; set; }
#endif
        /// <summary>The trade_ids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? TradeIds { get; set; }
#nullable restore
#else
        public List<int?> TradeIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Correspondence_type_items.Correspondence_type_itemsPatchRequestBody_generic_tool_items"/> and sets the default values.
        /// </summary>
        public Correspondence_type_itemsPatchRequestBody_generic_tool_items()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Correspondence_type_items.Correspondence_type_itemsPatchRequestBody_generic_tool_items"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Correspondence_type_items.Correspondence_type_itemsPatchRequestBody_generic_tool_items CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Correspondence_type_items.Correspondence_type_itemsPatchRequestBody_generic_tool_items();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assignee_ids", n => { AssigneeIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "cost_code_id", n => { CostCodeId = n.GetIntValue(); } },
                { "cost_impact", n => { CostImpact = n.GetStringValue(); } },
                { "due_date", n => { DueDate = n.GetDateValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "private", n => { Private = n.GetBoolValue(); } },
                { "received_from_id", n => { ReceivedFromId = n.GetIntValue(); } },
                { "schedule_impact", n => { ScheduleImpact = n.GetStringValue(); } },
                { "specification_section_id", n => { SpecificationSectionId = n.GetIntValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "sub_job_id", n => { SubJobId = n.GetIntValue(); } },
                { "task_ids", n => { TaskIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "trade_ids", n => { TradeIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("assignee_ids", AssigneeIds);
            writer.WriteIntValue("cost_code_id", CostCodeId);
            writer.WriteStringValue("cost_impact", CostImpact);
            writer.WriteDateValue("due_date", DueDate);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteBoolValue("private", Private);
            writer.WriteIntValue("received_from_id", ReceivedFromId);
            writer.WriteStringValue("schedule_impact", ScheduleImpact);
            writer.WriteIntValue("specification_section_id", SpecificationSectionId);
            writer.WriteStringValue("status", Status);
            writer.WriteIntValue("sub_job_id", SubJobId);
            writer.WriteCollectionOfPrimitiveValues<int?>("task_ids", TaskIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("trade_ids", TradeIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
