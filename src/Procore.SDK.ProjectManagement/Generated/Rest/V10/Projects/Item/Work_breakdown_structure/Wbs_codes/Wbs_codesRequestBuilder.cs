// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Bulk_create;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Item;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Update_all;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\work_breakdown_structure\wbs_codes
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Wbs_codesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The bulk_create property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Bulk_create.Bulk_createRequestBuilder Bulk_create
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Bulk_create.Bulk_createRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The update_all property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Update_all.Update_allRequestBuilder Update_all
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Update_all.Update_allRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.work_breakdown_structure.wbs_codes.item collection</summary>
        /// <param name="position">WBS Code ID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Item.Wbs_codesItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Item.Wbs_codesItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Item.Wbs_codesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Wbs_codesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/work_breakdown_structure/wbs_codes{?can_select_divisions*,filters%5Bstatus%5D%5B%5D*,filters%5Bupdated_at%5D*,group_id*,group_type*,hide_not_in_group*,page*,per_page*,query*,required_segments*,scope*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Wbs_codesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/work_breakdown_structure/wbs_codes{?can_select_divisions*,filters%5Bstatus%5D%5B%5D*,filters%5Bupdated_at%5D*,group_id*,group_type*,hide_not_in_group*,page*,per_page*,query*,required_segments*,scope*}", rawUrl)
        {
        }
        /// <summary>
        /// All Work Breakdown Structure codes for a given project
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder.Wbs_codesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder.Wbs_codesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes404Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Create a new WBS code using the specified segments.  If the combination of segments matches an existing WBS Code, the existing code will be updated with the description provided.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codes404Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// All Work Breakdown Structure codes for a given project
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder.Wbs_codesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder.Wbs_codesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new WBS code using the specified segments.  If the combination of segments matches an existing WBS Code, the existing code will be updated with the description provided.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.Wbs_codesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// All Work Breakdown Structure codes for a given project
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Wbs_codesRequestBuilderGetQueryParameters 
        {
            /// <summary>If true, will include WBS Codes with division segment items. Default is true.</summary>
            [QueryParameter("can_select_divisions")]
            public bool? CanSelectDivisions { get; set; }
            /// <summary>Filter results to only return codes with the included statuses. Options are &apos;active&apos; or &apos;inactive&apos;. Defaults to returning all results.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bstatus%5D%5B%5D")]
            public string[]? Filtersstatus { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bstatus%5D%5B%5D")]
            public string[] Filtersstatus { get; set; }
#endif
            /// <summary>Filter results to only return codes that were updated within the range of the two specified ISO 8601 timestamps separated by the ... delimiter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bupdated_at%5D")]
            public string? FiltersupdatedAt { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bupdated_at%5D")]
            public string FiltersupdatedAt { get; set; }
#endif
            /// <summary>Along with &apos;group_type&apos;, groups WBS codes by the specified group type and group ID. Only supported option is a contract ID.</summary>
            [QueryParameter("group_id")]
            public int? GroupId { get; set; }
            /// <summary>Along with &apos;group_id&apos;, groups WBS codes by the specified group type and group ID. Only supported option is &apos;contract&apos;.</summary>
            [QueryParameter("group_type")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.GetGroup_typeQueryParameterType? GroupType { get; set; }
            /// <summary>If true, will hide WBS codes that are not in the specified &apos;group_type&apos; and &apos;group_id&apos;. Default is true. If false, WBS codes in the specified group will be returned first followed by WBS codes not in the group.</summary>
            [QueryParameter("hide_not_in_group")]
            public bool? HideNotInGroup { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Searches the WBS code and description values and returns results sorted in descending order of relevance to the search query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("required_segments")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.GetRequired_segmentsQueryParameterType[]? RequiredSegments { get; set; }
#nullable restore
#else
            [QueryParameter("required_segments")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.GetRequired_segmentsQueryParameterType[] RequiredSegments { get; set; }
#endif
            /// <summary>Filter results to only return codes that match the specified WBS scope.</summary>
            [QueryParameter("scope")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Work_breakdown_structure.Wbs_codes.GetScopeQueryParameterType? Scope { get; set; }
        }
    }
}
#pragma warning restore CS0618
