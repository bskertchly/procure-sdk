// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Actual_production_quantities
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Actual_production_quantitiesPostRequestBody_actual_production_quantity : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Cost Code ID for the Actual Production Quantity. DO NOT provide if your project is configured for Task Codes.</summary>
        public int? CostCodeId { get; set; }
        /// <summary>The Crew ID for the Actual Production Quantity</summary>
        public int? CrewId { get; set; }
        /// <summary>Date the Actual Production Quantity was installed. The date will be associated with the production quantity only when &apos;timesheet_id&apos; is not included in the request.</summary>
        public Date? Date { get; set; }
        /// <summary>The description of the Actual Production Quantity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The Location ID for the Actual Production Quantity</summary>
        public int? LocationId { get; set; }
        /// <summary>Amount installed</summary>
        public double? Quantity { get; set; }
        /// <summary>The Sub Job ID for the Actual Production Quantity. DO NOT provide if your project is configured for Task Codes.</summary>
        public int? SubJobId { get; set; }
        /// <summary>The Timesheet ID for the Actual Production Quantity. If the &apos;timesheet_id&apos; is provided in the request, then the date for the timesheet will be associated with the production quantity, regardless of whether an additional date is sent in the request.</summary>
        public int? TimesheetId { get; set; }
        /// <summary>The Production Quantity Code for the Actual Production Quantity. This is necessary if your project is configured for Task Codes. DO NOT provide if your project is not configured for Task Codes.</summary>
        public int? WbsCodeId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Actual_production_quantities.Actual_production_quantitiesPostRequestBody_actual_production_quantity"/> and sets the default values.
        /// </summary>
        public Actual_production_quantitiesPostRequestBody_actual_production_quantity()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Actual_production_quantities.Actual_production_quantitiesPostRequestBody_actual_production_quantity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Actual_production_quantities.Actual_production_quantitiesPostRequestBody_actual_production_quantity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Actual_production_quantities.Actual_production_quantitiesPostRequestBody_actual_production_quantity();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cost_code_id", n => { CostCodeId = n.GetIntValue(); } },
                { "crew_id", n => { CrewId = n.GetIntValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "sub_job_id", n => { SubJobId = n.GetIntValue(); } },
                { "timesheet_id", n => { TimesheetId = n.GetIntValue(); } },
                { "wbs_code_id", n => { WbsCodeId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("cost_code_id", CostCodeId);
            writer.WriteIntValue("crew_id", CrewId);
            writer.WriteDateValue("date", Date);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteIntValue("sub_job_id", SubJobId);
            writer.WriteIntValue("timesheet_id", TimesheetId);
            writer.WriteIntValue("wbs_code_id", WbsCodeId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
