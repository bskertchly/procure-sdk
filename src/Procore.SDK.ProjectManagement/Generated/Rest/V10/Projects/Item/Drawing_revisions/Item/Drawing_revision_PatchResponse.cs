// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item
{
    /// <summary>
    /// Drawing Revision
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Drawing_revision_PatchResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Current Drawing Revision</summary>
        public bool? Current { get; set; }
        /// <summary>The custom_fields property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_custom_fields? CustomFields { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_custom_fields CustomFields { get; set; }
#endif
        /// <summary>Drawing date</summary>
        public Date? DrawingDate { get; set; }
        /// <summary>Drawing ID</summary>
        public int? DrawingId { get; set; }
        /// <summary>Drawing Set</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_drawing_set? DrawingSet { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_drawing_set DrawingSet { get; set; }
#endif
        /// <summary>Revision floorplan status</summary>
        public bool? Floorplan { get; set; }
        /// <summary>Revision ID</summary>
        public int? Id { get; set; }
        /// <summary>Ordered array of the complete list of reviewed and published Drawing Revision IDs that belong to the drawing</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? OrderedRevisionIds { get; set; }
#nullable restore
#else
        public List<int?> OrderedRevisionIds { get; set; }
#endif
        /// <summary>Received date</summary>
        public Date? ReceivedDate { get; set; }
        /// <summary>Revision number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RevisionNumber { get; set; }
#nullable restore
#else
        public string RevisionNumber { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse"/> and sets the default values.
        /// </summary>
        public Drawing_revision_PatchResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "current", n => { Current = n.GetBoolValue(); } },
                { "custom_fields", n => { CustomFields = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_custom_fields>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_custom_fields.CreateFromDiscriminatorValue); } },
                { "drawing_date", n => { DrawingDate = n.GetDateValue(); } },
                { "drawing_id", n => { DrawingId = n.GetIntValue(); } },
                { "drawing_set", n => { DrawingSet = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_drawing_set>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_drawing_set.CreateFromDiscriminatorValue); } },
                { "floorplan", n => { Floorplan = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "ordered_revision_ids", n => { OrderedRevisionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "received_date", n => { ReceivedDate = n.GetDateValue(); } },
                { "revision_number", n => { RevisionNumber = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("current", Current);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_custom_fields>("custom_fields", CustomFields);
            writer.WriteDateValue("drawing_date", DrawingDate);
            writer.WriteIntValue("drawing_id", DrawingId);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Drawing_revisions.Item.Drawing_revision_PatchResponse_drawing_set>("drawing_set", DrawingSet);
            writer.WriteBoolValue("floorplan", Floorplan);
            writer.WriteIntValue("id", Id);
            writer.WriteCollectionOfPrimitiveValues<int?>("ordered_revision_ids", OrderedRevisionIds);
            writer.WriteDateValue("received_date", ReceivedDate);
            writer.WriteStringValue("revision_number", RevisionNumber);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
