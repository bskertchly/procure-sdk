// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\checklist\lists\grouped_index
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Grouped_indexRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Grouped_indexRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/checklist/lists/grouped_index{?filters%5Bclosed_at%5D*,filters%5Bclosed_by_id%5D,filters%5Bcreated_at%5D*,filters%5Bdue_at%5D*,filters%5Bid%5D,filters%5Binspection_date%5D*,filters%5Binspection_type_id%5D,filters%5Binspector_id%5D,filters%5Blist_template_id%5D,filters%5Blocation_id%5D,filters%5Bmanaged_equipment_id%5D*,filters%5Bpoint_of_contact_id%5D,filters%5Bquery%5D*,filters%5Bresponsible_contractor_id%5D,filters%5Bspec_section_id%5D,filters%5Bstatus%5D*,filters%5Btrade_id%5D*,filters%5Bupdated_at%5D*,group_by*,page*,per_page*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Grouped_indexRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/checklist/lists/grouped_index{?filters%5Bclosed_at%5D*,filters%5Bclosed_by_id%5D,filters%5Bcreated_at%5D*,filters%5Bdue_at%5D*,filters%5Bid%5D,filters%5Binspection_date%5D*,filters%5Binspection_type_id%5D,filters%5Binspector_id%5D,filters%5Blist_template_id%5D,filters%5Blocation_id%5D,filters%5Bmanaged_equipment_id%5D*,filters%5Bpoint_of_contact_id%5D,filters%5Bquery%5D*,filters%5Bresponsible_contractor_id%5D,filters%5Bspec_section_id%5D,filters%5Bstatus%5D*,filters%5Btrade_id%5D*,filters%5Bupdated_at%5D*,group_by*,page*,per_page*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Lists Grouped Checklist (Inspections) in a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder.Grouped_indexRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder.Grouped_indexRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index5XXError.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_index.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Lists Grouped Checklist (Inspections) in a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder.Grouped_indexRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder.Grouped_indexRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.Grouped_indexRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Lists Grouped Checklist (Inspections) in a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Grouped_indexRequestBuilderGetQueryParameters 
        {
            /// <summary>Returns item(s) closed within the specified ISO 8601 datetime range.</summary>
            [QueryParameter("filters%5Bclosed_at%5D")]
            public Date? FiltersclosedAt { get; set; }
            /// <summary>Array of User IDs. Return item(s) closed by the specified User ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bclosed_by_id%5D")]
            public int?[]? FiltersclosedById { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bclosed_by_id%5D")]
            public int?[] FiltersclosedById { get; set; }
#endif
            /// <summary>Return item(s) created within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bcreated_at%5D")]
            public Date? FilterscreatedAt { get; set; }
            /// <summary>Return item(s) due within the specified date range.</summary>
            [QueryParameter("filters%5Bdue_at%5D")]
            public DateTimeOffset? FiltersdueAt { get; set; }
            /// <summary>Return item(s) with the specified IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Return item(s) with inspection date within the specified ISO 8601 date range.</summary>
            [QueryParameter("filters%5Binspection_date%5D")]
            public Date? FiltersinspectionDate { get; set; }
            /// <summary>Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Binspection_type_id%5D")]
            public int?[]? FiltersinspectionTypeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Binspection_type_id%5D")]
            public int?[] FiltersinspectionTypeId { get; set; }
#endif
            /// <summary>Array of User IDs. Return item(s) where the specified User IDs are inspectors.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Binspector_id%5D")]
            public int?[]? FiltersinspectorId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Binspector_id%5D")]
            public int?[] FiltersinspectorId { get; set; }
#endif
            /// <summary>Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Blist_template_id%5D")]
            public int?[]? FilterslistTemplateId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Blist_template_id%5D")]
            public int?[] FilterslistTemplateId { get; set; }
#endif
            /// <summary>Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[]? FilterslocationId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[] FilterslocationId { get; set; }
#endif
            /// <summary>Return item(s) with the specified Managed Equipment ID.</summary>
            [QueryParameter("filters%5Bmanaged_equipment_id%5D")]
            public int? FiltersmanagedEquipmentId { get; set; }
            /// <summary>Array of User IDs. Return item(s) where the specified User IDs are the point of contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bpoint_of_contact_id%5D")]
            public int?[]? FilterspointOfContactId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bpoint_of_contact_id%5D")]
            public int?[] FilterspointOfContactId { get; set; }
#endif
            /// <summary>Return item(s) containing search query</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bquery%5D")]
            public string? Filtersquery { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bquery%5D")]
            public string Filtersquery { get; set; }
#endif
            /// <summary>Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bresponsible_contractor_id%5D")]
            public int?[]? FiltersresponsibleContractorId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bresponsible_contractor_id%5D")]
            public int?[] FiltersresponsibleContractorId { get; set; }
#endif
            /// <summary>Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bspec_section_id%5D")]
            public int?[]? FiltersspecSectionId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bspec_section_id%5D")]
            public int?[] FiltersspecSectionId { get; set; }
#endif
            /// <summary>Return item(s) with the specified statuses</summary>
            [QueryParameter("filters%5Bstatus%5D")]
            public int? Filtersstatus { get; set; }
            /// <summary>Trade ID</summary>
            [QueryParameter("filters%5Btrade_id%5D")]
            public int? FilterstradeId { get; set; }
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
            [QueryParameter("group_by")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.GetGroup_byQueryParameterType? GroupBy { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Lists.Grouped_index.GetSortQueryParameterType? Sort { get; set; }
        }
    }
}
#pragma warning restore CS0618
