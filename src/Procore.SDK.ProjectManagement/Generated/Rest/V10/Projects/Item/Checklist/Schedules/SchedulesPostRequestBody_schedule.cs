// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules
{
    /// <summary>
    /// Checklist Schedule object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SchedulesPostRequestBody_schedule : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The assignee_ids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? AssigneeIds { get; set; }
#nullable restore
#else
        public List<int?> AssigneeIds { get; set; }
#endif
        /// <summary>The number of days an Inspection is to be created before the due date</summary>
        public int? DaysCreatedBeforeDueDate { get; set; }
        /// <summary>The distribution_member_ids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? DistributionMemberIds { get; set; }
#nullable restore
#else
        public List<int?> DistributionMemberIds { get; set; }
#endif
        /// <summary>Timestamp indicating when the last Inspection in the Schedule should be due. Not used when frequency is once.</summary>
        public DateTimeOffset? EndsAt { get; set; }
        /// <summary>The ID of the Equipment to set on the Schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EquipmentId { get; set; }
#nullable restore
#else
        public string EquipmentId { get; set; }
#endif
        /// <summary>Timestamp indicating when the first Inspection in the Schedule should be due. Cannot be in the past.</summary>
        public DateTimeOffset? FirstInspectionDueAt { get; set; }
        /// <summary>The frequency at which Inspections will be created by the Schedule.</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody_schedule_frequency? Frequency { get; set; }
        /// <summary>The ID of the Inspection Template to create the Schedule from.</summary>
        public int? InspectionTemplateId { get; set; }
        /// <summary>The ID of the Location to set on the Schedule.</summary>
        public int? LocationId { get; set; }
        /// <summary>The name for the Checklist Schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The ID of a User to be set as the of the point of contact on the Schedule</summary>
        public int? PointOfContactId { get; set; }
        /// <summary>The ID of a vendor to set as the responsible contractor on the Schedule.</summary>
        public int? ResponsibleContractorId { get; set; }
        /// <summary>The ID of the specification section to set on the Schedule.</summary>
        public int? SpecificationSectionId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody_schedule"/> and sets the default values.
        /// </summary>
        public SchedulesPostRequestBody_schedule()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody_schedule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody_schedule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody_schedule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assignee_ids", n => { AssigneeIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "days_created_before_due_date", n => { DaysCreatedBeforeDueDate = n.GetIntValue(); } },
                { "distribution_member_ids", n => { DistributionMemberIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "ends_at", n => { EndsAt = n.GetDateTimeOffsetValue(); } },
                { "equipment_id", n => { EquipmentId = n.GetStringValue(); } },
                { "first_inspection_due_at", n => { FirstInspectionDueAt = n.GetDateTimeOffsetValue(); } },
                { "frequency", n => { Frequency = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody_schedule_frequency>(); } },
                { "inspection_template_id", n => { InspectionTemplateId = n.GetIntValue(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "point_of_contact_id", n => { PointOfContactId = n.GetIntValue(); } },
                { "responsible_contractor_id", n => { ResponsibleContractorId = n.GetIntValue(); } },
                { "specification_section_id", n => { SpecificationSectionId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("assignee_ids", AssigneeIds);
            writer.WriteIntValue("days_created_before_due_date", DaysCreatedBeforeDueDate);
            writer.WriteCollectionOfPrimitiveValues<int?>("distribution_member_ids", DistributionMemberIds);
            writer.WriteDateTimeOffsetValue("ends_at", EndsAt);
            writer.WriteStringValue("equipment_id", EquipmentId);
            writer.WriteDateTimeOffsetValue("first_inspection_due_at", FirstInspectionDueAt);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody_schedule_frequency>("frequency", Frequency);
            writer.WriteIntValue("inspection_template_id", InspectionTemplateId);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("point_of_contact_id", PointOfContactId);
            writer.WriteIntValue("responsible_contractor_id", ResponsibleContractorId);
            writer.WriteIntValue("specification_section_id", SpecificationSectionId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
