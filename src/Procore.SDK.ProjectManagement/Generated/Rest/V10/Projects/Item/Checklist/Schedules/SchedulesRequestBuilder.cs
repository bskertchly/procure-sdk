// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Calculate_first_inspection_created_at;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Calculate_total_inspections_count;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Filter_options;
using Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\checklist\schedules
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SchedulesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The calculate_first_inspection_created_at property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Calculate_first_inspection_created_at.Calculate_first_inspection_created_atRequestBuilder Calculate_first_inspection_created_at
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Calculate_first_inspection_created_at.Calculate_first_inspection_created_atRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The calculate_total_inspections_count property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Calculate_total_inspections_count.Calculate_total_inspections_countRequestBuilder Calculate_total_inspections_count
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Calculate_total_inspections_count.Calculate_total_inspections_countRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The filter_options property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Filter_options.Filter_optionsRequestBuilder Filter_options
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Filter_options.Filter_optionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v10.projects.item.checklist.schedules.item collection</summary>
        /// <param name="position">Checklist Schedule ID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Item.ItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Item.ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("%2Did", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Item.ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SchedulesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/checklist/schedules{?filters%5Bassignee_id%5D*,filters%5Bended%5D*,filters%5Bends_at%5D*,filters%5Bequipment_id%5D*,filters%5Bfirst_inspection_due_at%5D*,filters%5Bfrequency%5D*,filters%5Binspection_type_id%5D*,filters%5Blist_template_id%5D*,filters%5Blocation_id%5D*,filters%5Bupdated_at%5D*,page*,per_page*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SchedulesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/checklist/schedules{?filters%5Bassignee_id%5D*,filters%5Bended%5D*,filters%5Bends_at%5D*,filters%5Bequipment_id%5D*,filters%5Bfirst_inspection_due_at%5D*,filters%5Bfrequency%5D*,filters%5Binspection_type_id%5D*,filters%5Blist_template_id%5D*,filters%5Blocation_id%5D*,filters%5Bupdated_at%5D*,page*,per_page*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns the Checklist Schedules from Checklists (Inspections) on the Project
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder.SchedulesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder.SchedulesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates a Checklist Schedule from a Checklist (Inspection) Template on the Project
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.Schedules422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the Checklist Schedules from Checklists (Inspections) on the Project
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder.SchedulesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder.SchedulesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a Checklist Schedule from a Checklist (Inspection) Template on the Project
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.SchedulesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns the Checklist Schedules from Checklists (Inspections) on the Project
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SchedulesRequestBuilderGetQueryParameters 
        {
            /// <summary>Return schedule(s) with the specified Assignee IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bassignee_id%5D")]
            public int?[]? FiltersassigneeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bassignee_id%5D")]
            public int?[] FiltersassigneeId { get; set; }
#endif
            /// <summary>Return schedule(s) that are finished when true, returns unfinished schedule(s) otherwise</summary>
            [QueryParameter("filters%5Bended%5D")]
            public bool? Filtersended { get; set; }
            /// <summary>Return schedule(s) with the specified Last Inspection Due Date.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bends_at%5D")]
            public Date?[]? FiltersendsAt { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bends_at%5D")]
            public Date?[] FiltersendsAt { get; set; }
#endif
            /// <summary>Return schedule(s) with the specified Equipment IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bequipment_id%5D")]
            public string[]? FiltersequipmentId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bequipment_id%5D")]
            public string[] FiltersequipmentId { get; set; }
#endif
            /// <summary>Return schedule(s) with the specified First Inspection Due Date</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bfirst_inspection_due_at%5D")]
            public Date?[]? FiltersfirstInspectionDueAt { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bfirst_inspection_due_at%5D")]
            public Date?[] FiltersfirstInspectionDueAt { get; set; }
#endif
            /// <summary>Return schedule(s) with the specified Frequency Types</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bfrequency%5D")]
            public string[]? Filtersfrequency { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bfrequency%5D")]
            public string[] Filtersfrequency { get; set; }
#endif
            /// <summary>Return schedule(s) with the specified Checklist Type IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Binspection_type_id%5D")]
            public int?[]? FiltersinspectionTypeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Binspection_type_id%5D")]
            public int?[] FiltersinspectionTypeId { get; set; }
#endif
            /// <summary>Return schedule(s) with the specified Inspection Template IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Blist_template_id%5D")]
            public int?[]? FilterslistTemplateId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Blist_template_id%5D")]
            public int?[] FilterslistTemplateId { get; set; }
#endif
            /// <summary>Return schedule(s) with the specified Location IDs</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[]? FilterslocationId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[] FilterslocationId { get; set; }
#endif
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Sort schedule(s) by the chosen param; check below for a list of options. The direction of sorting is ascending by default; for descending sort, insert the - symbol before the param.</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Checklist.Schedules.GetSortQueryParameterType? Sort { get; set; }
        }
    }
}
#pragma warning restore CS0618
