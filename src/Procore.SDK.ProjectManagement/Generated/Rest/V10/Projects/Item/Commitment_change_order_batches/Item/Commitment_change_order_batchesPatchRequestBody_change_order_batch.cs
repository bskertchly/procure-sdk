// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item
{
    /// <summary>
    /// Change Order Batch object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Commitment_change_order_batchesPatchRequestBody_change_order_batch : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Existing attachments to preserve on the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? AttachmentIds { get; set; }
#nullable restore
#else
        public List<int?> AttachmentIds { get; set; }
#endif
        /// <summary>Unique identifier for the contract.</summary>
        public int? ContractId { get; set; }
        /// <summary>Value of the custom field. The data type of the value passed in corresponds with the data_type of the Custom Field Definition.For a lov_entry data_type the value passed in should be the ID of one of the Custom Field Definition&apos;s LOV Entries. For a lov_entries data_type the value passed in should be an array of IDs of the Custom Field Definition&apos;s LOV Entries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch.Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id? CustomFieldCustomFieldDefinitionId { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch.Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id CustomFieldCustomFieldDefinitionId { get; set; }
#endif
        /// <summary>Description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Unique identifier for the designated reviewer. This field is only supported for single-tier projects. Behavior is undefined in multi-tier projects.</summary>
        public int? DesignatedReviewerId { get; set; }
        /// <summary>Drawing Revisions to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? DrawingRevisionIds { get; set; }
#nullable restore
#else
        public List<int?> DrawingRevisionIds { get; set; }
#endif
        /// <summary>Due Date</summary>
        public Date? DueDate { get; set; }
        /// <summary>Whether or not the Change Order Batch is executed</summary>
        public bool? Executed { get; set; }
        /// <summary>File Versions to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FileVersionIds { get; set; }
#nullable restore
#else
        public List<int?> FileVersionIds { get; set; }
#endif
        /// <summary>Forms to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FormIds { get; set; }
#nullable restore
#else
        public List<int?> FormIds { get; set; }
#endif
        /// <summary>Images to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ImageIds { get; set; }
#nullable restore
#else
        public List<int?> ImageIds { get; set; }
#endif
        /// <summary>Invoiced Date</summary>
        public Date? InvoicedDate { get; set; }
        /// <summary>Number of the Change Order Batch</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>Paid Date</summary>
        public Date? PaidDate { get; set; }
        /// <summary>Whether or not the Change Order Batch is private</summary>
        public bool? Private { get; set; }
        /// <summary>Revised substantial completion date</summary>
        public Date? RevisedSubstantialCompletionDate { get; set; }
        /// <summary>Revision Number</summary>
        public int? Revision { get; set; }
        /// <summary>Schedule impact in days</summary>
        public int? ScheduleImpactAmount { get; set; }
        /// <summary>Whether a signature will be required for this Change Order Batch</summary>
        public bool? SignatureRequired { get; set; }
        /// <summary>Signed Change Order Batch Received Date</summary>
        public Date? SignedChangeOrderReceivedDate { get; set; }
        /// <summary>Status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Title of the Change Order Batch</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Uploads to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UploadIds { get; set; }
#nullable restore
#else
        public List<string> UploadIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch"/> and sets the default values.
        /// </summary>
        public Commitment_change_order_batchesPatchRequestBody_change_order_batch()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attachment_ids", n => { AttachmentIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "contract_id", n => { ContractId = n.GetIntValue(); } },
                { "custom_field_%{custom_field_definition_id}", n => { CustomFieldCustomFieldDefinitionId = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch.Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch.Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "designated_reviewer_id", n => { DesignatedReviewerId = n.GetIntValue(); } },
                { "drawing_revision_ids", n => { DrawingRevisionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "due_date", n => { DueDate = n.GetDateValue(); } },
                { "executed", n => { Executed = n.GetBoolValue(); } },
                { "file_version_ids", n => { FileVersionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "form_ids", n => { FormIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "image_ids", n => { ImageIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "invoiced_date", n => { InvoicedDate = n.GetDateValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "paid_date", n => { PaidDate = n.GetDateValue(); } },
                { "private", n => { Private = n.GetBoolValue(); } },
                { "revised_substantial_completion_date", n => { RevisedSubstantialCompletionDate = n.GetDateValue(); } },
                { "revision", n => { Revision = n.GetIntValue(); } },
                { "schedule_impact_amount", n => { ScheduleImpactAmount = n.GetIntValue(); } },
                { "signature_required", n => { SignatureRequired = n.GetBoolValue(); } },
                { "signed_change_order_received_date", n => { SignedChangeOrderReceivedDate = n.GetDateValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "upload_ids", n => { UploadIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("attachment_ids", AttachmentIds);
            writer.WriteIntValue("contract_id", ContractId);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch.Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id>("custom_field_%{custom_field_definition_id}", CustomFieldCustomFieldDefinitionId);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("designated_reviewer_id", DesignatedReviewerId);
            writer.WriteCollectionOfPrimitiveValues<int?>("drawing_revision_ids", DrawingRevisionIds);
            writer.WriteDateValue("due_date", DueDate);
            writer.WriteBoolValue("executed", Executed);
            writer.WriteCollectionOfPrimitiveValues<int?>("file_version_ids", FileVersionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("form_ids", FormIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("image_ids", ImageIds);
            writer.WriteDateValue("invoiced_date", InvoicedDate);
            writer.WriteStringValue("number", Number);
            writer.WriteDateValue("paid_date", PaidDate);
            writer.WriteBoolValue("private", Private);
            writer.WriteDateValue("revised_substantial_completion_date", RevisedSubstantialCompletionDate);
            writer.WriteIntValue("revision", Revision);
            writer.WriteIntValue("schedule_impact_amount", ScheduleImpactAmount);
            writer.WriteBoolValue("signature_required", SignatureRequired);
            writer.WriteDateValue("signed_change_order_received_date", SignedChangeOrderReceivedDate);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("title", Title);
            writer.WriteCollectionOfPrimitiveValues<string>("upload_ids", UploadIds);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="bool"/>, <see cref="double"/>, <see cref="string"/>, List&lt;int&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="bool"/></summary>
            public bool? Boolean { get; set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double { get; set; }
            /// <summary>Composed type representation for type List&lt;int&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<int?>? Integer { get; set; }
#nullable restore
#else
            public List<int?> Integer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch.Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch.Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Commitment_change_order_batches.Item.Commitment_change_order_batchesPatchRequestBody_change_order_batch.Commitment_change_order_batchesPatchRequestBody_change_order_batch_custom_field_Custom_field_definition_id();
                if(parseNode.GetBoolValue() is bool booleanValue)
                {
                    result.Boolean = booleanValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetCollectionOfPrimitiveValues<int?>()?.AsList() is List<int?> integerValue)
                {
                    result.Integer = integerValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Boolean != null)
                {
                    writer.WriteBoolValue(null, Boolean);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(Integer != null)
                {
                    writer.WriteCollectionOfPrimitiveValues<int?>(null, Integer);
                }
            }
        }
    }
}
#pragma warning restore CS0618
