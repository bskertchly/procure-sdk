// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Time_and_material_notifications
{
    /// <summary>
    /// Time and Material Notification
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Time_and_material_notificationsGetResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The closed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Closed { get; set; }
#nullable restore
#else
        public List<int?> Closed { get; set; }
#endif
        /// <summary>ID of the company the T&amp;M ticket was logged for</summary>
        public int? CompanyId { get; set; }
        /// <summary>The company_signed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? CompanySigned { get; set; }
#nullable restore
#else
        public List<int?> CompanySigned { get; set; }
#endif
        /// <summary>Date the T&amp;M ticket was created</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The creation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Creation { get; set; }
#nullable restore
#else
        public List<int?> Creation { get; set; }
#endif
        /// <summary>The customer_signed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? CustomerSigned { get; set; }
#nullable restore
#else
        public List<int?> CustomerSigned { get; set; }
#endif
        /// <summary>Grouping configurations for T&amp;M Equipment push to Change Management</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupEquipmentTotalsBy { get; set; }
#nullable restore
#else
        public string GroupEquipmentTotalsBy { get; set; }
#endif
        /// <summary>Grouping configurations for T&amp;M Labor push to Change Management</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupLaborTotalsBy { get; set; }
#nullable restore
#else
        public string GroupLaborTotalsBy { get; set; }
#endif
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>The notify_dl_on_closed property</summary>
        public bool? NotifyDlOnClosed { get; set; }
        /// <summary>The notify_dl_on_company_signed property</summary>
        public bool? NotifyDlOnCompanySigned { get; set; }
        /// <summary>The notify_dl_on_creation property</summary>
        public bool? NotifyDlOnCreation { get; set; }
        /// <summary>The notify_dl_on_customer_signed property</summary>
        public bool? NotifyDlOnCustomerSigned { get; set; }
        /// <summary>ID of the project the T&amp;M ticket was logged for</summary>
        public int? ProjectId { get; set; }
        /// <summary>Date the T&amp;M ticket was updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Time_and_material_notifications.Time_and_material_notificationsGetResponse"/> and sets the default values.
        /// </summary>
        public Time_and_material_notificationsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Time_and_material_notifications.Time_and_material_notificationsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Time_and_material_notifications.Time_and_material_notificationsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Time_and_material_notifications.Time_and_material_notificationsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "closed", n => { Closed = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "company_id", n => { CompanyId = n.GetIntValue(); } },
                { "company_signed", n => { CompanySigned = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "creation", n => { Creation = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "customer_signed", n => { CustomerSigned = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "group_equipment_totals_by", n => { GroupEquipmentTotalsBy = n.GetStringValue(); } },
                { "group_labor_totals_by", n => { GroupLaborTotalsBy = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "notify_dl_on_closed", n => { NotifyDlOnClosed = n.GetBoolValue(); } },
                { "notify_dl_on_company_signed", n => { NotifyDlOnCompanySigned = n.GetBoolValue(); } },
                { "notify_dl_on_creation", n => { NotifyDlOnCreation = n.GetBoolValue(); } },
                { "notify_dl_on_customer_signed", n => { NotifyDlOnCustomerSigned = n.GetBoolValue(); } },
                { "project_id", n => { ProjectId = n.GetIntValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("closed", Closed);
            writer.WriteIntValue("company_id", CompanyId);
            writer.WriteCollectionOfPrimitiveValues<int?>("company_signed", CompanySigned);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteCollectionOfPrimitiveValues<int?>("creation", Creation);
            writer.WriteCollectionOfPrimitiveValues<int?>("customer_signed", CustomerSigned);
            writer.WriteStringValue("group_equipment_totals_by", GroupEquipmentTotalsBy);
            writer.WriteStringValue("group_labor_totals_by", GroupLaborTotalsBy);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("notify_dl_on_closed", NotifyDlOnClosed);
            writer.WriteBoolValue("notify_dl_on_company_signed", NotifyDlOnCompanySigned);
            writer.WriteBoolValue("notify_dl_on_creation", NotifyDlOnCreation);
            writer.WriteBoolValue("notify_dl_on_customer_signed", NotifyDlOnCustomerSigned);
            writer.WriteIntValue("project_id", ProjectId);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
