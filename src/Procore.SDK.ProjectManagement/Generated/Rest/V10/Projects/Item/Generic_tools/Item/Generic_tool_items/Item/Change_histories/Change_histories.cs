// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories
{
    /// <summary>
    /// Change History
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Change_histories : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Name of the column changed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Column { get; set; }
#nullable restore
#else
        public string Column { get; set; }
#endif
        /// <summary>Created date</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The created_by property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories_created_by? CreatedBy { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories_created_by CreatedBy { get; set; }
#endif
        /// <summary>Human readable name of the column changed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormattedColumn { get; set; }
#nullable restore
#else
        public string FormattedColumn { get; set; }
#endif
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>Value of the column after change</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewValue { get; set; }
#nullable restore
#else
        public string NewValue { get; set; }
#endif
        /// <summary>Value of the column before change</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OldValue { get; set; }
#nullable restore
#else
        public string OldValue { get; set; }
#endif
        /// <summary>Localized readable name of the column changed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReadableColumn { get; set; }
#nullable restore
#else
        public string ReadableColumn { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories"/> and sets the default values.
        /// </summary>
        public Change_histories()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "column", n => { Column = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "created_by", n => { CreatedBy = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories_created_by>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories_created_by.CreateFromDiscriminatorValue); } },
                { "formatted_column", n => { FormattedColumn = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "new_value", n => { NewValue = n.GetStringValue(); } },
                { "old_value", n => { OldValue = n.GetStringValue(); } },
                { "readable_column", n => { ReadableColumn = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("column", Column);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.Generic_tools.Item.Generic_tool_items.Item.Change_histories.Change_histories_created_by>("created_by", CreatedBy);
            writer.WriteStringValue("formatted_column", FormattedColumn);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("new_value", NewValue);
            writer.WriteStringValue("old_value", OldValue);
            writer.WriteStringValue("readable_column", ReadableColumn);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
