// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{-id}\people\inactive
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InactiveRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InactiveRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/people/inactive{?filters%5Bconnected%5D*,filters%5Bcountry_code%5D*,filters%5Binclude_company_people%5D*,filters%5Bis_employee%5D*,filters%5Bjob_title%5D*,filters%5Bpermission_template_id%5D,filters%5Breference_users_only%5D*,filters%5Bsearch%5D*,filters%5Bstate_code%5D*,filters%5Btrade_id%5D,filters%5Bvendor_id%5D,filters%5Bwithout_reference_users%5D*,page*,per_page*,sort*,view*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InactiveRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{%2Did}/people/inactive{?filters%5Bconnected%5D*,filters%5Bcountry_code%5D*,filters%5Binclude_company_people%5D*,filters%5Bis_employee%5D*,filters%5Bjob_title%5D*,filters%5Bpermission_template_id%5D,filters%5Breference_users_only%5D*,filters%5Bsearch%5D*,filters%5Bstate_code%5D*,filters%5Btrade_id%5D,filters%5Bvendor_id%5D,filters%5Bwithout_reference_users%5D*,page*,per_page*,sort*,view*}", rawUrl)
        {
        }
        /// <summary>
        /// Return a list of People associated with a Project. Includes users in the directory and reference users.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.Inactive&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.Inactive401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.Inactive403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.Inactive>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.InactiveRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.Inactive>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.InactiveRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.Inactive401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.Inactive403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.Inactive>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.Inactive.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Return a list of People associated with a Project. Includes users in the directory and reference users.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.InactiveRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.InactiveRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember1"/>, <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember2"/>, <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember3"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Inactive : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember1? InactiveMember1 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember1 InactiveMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember2? InactiveMember2 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember2 InactiveMember2 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember3? InactiveMember3 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember3 InactiveMember3 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.Inactive"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.Inactive CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveRequestBuilder.Inactive();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.InactiveMember1 = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.InactiveMember2 = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember2();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.InactiveMember3 = new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember3();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(InactiveMember1 != null)
                {
                    return InactiveMember1.GetFieldDeserializers();
                }
                else if(InactiveMember2 != null)
                {
                    return InactiveMember2.GetFieldDeserializers();
                }
                else if(InactiveMember3 != null)
                {
                    return InactiveMember3.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(InactiveMember1 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember1>(null, InactiveMember1);
                }
                else if(InactiveMember2 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember2>(null, InactiveMember2);
                }
                else if(InactiveMember3 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.InactiveMember3>(null, InactiveMember3);
                }
            }
        }
        /// <summary>
        /// Return a list of People associated with a Project. Includes users in the directory and reference users.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class InactiveRequestBuilderGetQueryParameters 
        {
            /// <summary>If true, returns only people who are connected users. If false, returns only people who are not connected users.</summary>
            [QueryParameter("filters%5Bconnected%5D")]
            public bool? Filtersconnected { get; set; }
            /// <summary>Returns only people who have the specified country code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bcountry_code%5D")]
            public string? FilterscountryCode { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bcountry_code%5D")]
            public string FilterscountryCode { get; set; }
#endif
            /// <summary>If true, returns people in the Company not just the Project. This option only works if the user has permission to create people in the project directory or permission to read from the company directory.</summary>
            [QueryParameter("filters%5Binclude_company_people%5D")]
            public bool? FiltersincludeCompanyPeople { get; set; }
            /// <summary>If true, returns item(s) where `is_employee` value is true.</summary>
            [QueryParameter("filters%5Bis_employee%5D")]
            public bool? FiltersisEmployee { get; set; }
            /// <summary>Returns only people who have the specified job title.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bjob_title%5D")]
            public string? FiltersjobTitle { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bjob_title%5D")]
            public string FiltersjobTitle { get; set; }
#endif
            /// <summary>Array of Permission Template IDs. Returns item(s) with the specified Permission Template IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bpermission_template_id%5D")]
            public int?[]? FilterspermissionTemplateId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bpermission_template_id%5D")]
            public int?[] FilterspermissionTemplateId { get; set; }
#endif
            /// <summary>If true, returns only people who are reference users.</summary>
            [QueryParameter("filters%5Breference_users_only%5D")]
            public bool? FiltersreferenceUsersOnly { get; set; }
            /// <summary>Returns item(s) matching the specified search query string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bsearch%5D")]
            public string? Filterssearch { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bsearch%5D")]
            public string Filterssearch { get; set; }
#endif
            /// <summary>Returns only people who have the specified state code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bstate_code%5D")]
            public string? FiltersstateCode { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bstate_code%5D")]
            public string FiltersstateCode { get; set; }
#endif
            /// <summary>Array of Trade IDs. Returns item(s) with the specified Trade IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btrade_id%5D")]
            public int?[]? FilterstradeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btrade_id%5D")]
            public int?[] FilterstradeId { get; set; }
#endif
            /// <summary>Return item(s) with the specified Vendor IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bvendor_id%5D")]
            public int?[]? FiltersvendorId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bvendor_id%5D")]
            public int?[] FiltersvendorId { get; set; }
#endif
            /// <summary>If true, returns only people who are not reference users.</summary>
            [QueryParameter("filters%5Bwithout_reference_users%5D")]
            public bool? FilterswithoutReferenceUsers { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Return items with the specified sort</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.GetSortQueryParameterType? Sort { get; set; }
            /// <summary>Specifies which view of the resource to return (which attributes should be present in the response). Users without read permissions to Directory are limited to the normal and extended views. If a valid view is not provided, it will default to normal.</summary>
            [QueryParameter("view")]
            public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Item.People.Inactive.GetViewQueryParameterType? View { get; set; }
        }
    }
}
#pragma warning restore CS0618
