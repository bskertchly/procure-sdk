// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncPatchResponse_entities : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accounting project number for the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountingProjectNumber { get; set; }
#nullable restore
#else
        public string AccountingProjectNumber { get; set; }
#endif
        /// <summary>The active status for the Project</summary>
        public bool? Active { get; set; }
        /// <summary>The actual start date for the Project</summary>
        public Date? ActualStartDate { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The street address for the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>The city in which the Project is located</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>The date that all parties agree the project meets or must meet “substantial completion”. Note: this field is a replacement to estimated_completion_date and will mirror its value.</summary>
        public Date? CompletionDate { get; set; }
        /// <summary>The country code for the Project (ISO-3166 Alpha-2 format)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>The date and time the Project was created</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The delivery method of a project.</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_delivery_method? DeliveryMethod { get; set; }
        /// <summary>An array of project departments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_departments>? Departments { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_departments> Departments { get; set; }
#endif
        /// <summary>Project description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The designated market area the Project is located in</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DesignatedMarketArea { get; set; }
#nullable restore
#else
        public string DesignatedMarketArea { get; set; }
#endif
        /// <summary>The display name for the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The Estimated Completion Date of the Project. Note: this field is now deprecated and will mirror the value of completion_date until it is no longer supported.</summary>
        public Date? EstimatedCompletionDate { get; set; }
        /// <summary>The Estimated Start Date of the Project Note: this field is now deprecated and will mirror the value of start_date until it is no longer supported.</summary>
        public Date? EstimatedStartDate { get; set; }
        /// <summary>The Estimated Value of the project. Note: this field is now deprecated and will mirror the value of total_value until it is no longer supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EstimatedValue { get; set; }
#nullable restore
#else
        public string EstimatedValue { get; set; }
#endif
        /// <summary>The Project flag (Red, Yellow, or Green)</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_flag? Flag { get; set; }
        /// <summary>Unique identifier for the project.</summary>
        public int? Id { get; set; }
        /// <summary>The geographic coordinate that specifies the north–south position of the Project on the Earth&apos;s surface.</summary>
        public float? Latitude { get; set; }
        /// <summary>The URL for the Project logo</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoUrl { get; set; }
#nullable restore
#else
        public string LogoUrl { get; set; }
#endif
        /// <summary>The geographic coordinate that specifies the east–west position of the Project on the Earth&apos;s surface.</summary>
        public float? Longitude { get; set; }
        /// <summary>The name for the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The office property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_office? Office { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_office Office { get; set; }
#endif
        /// <summary>An external third-party code associated with the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginCode { get; set; }
#nullable restore
#else
        public string OriginCode { get; set; }
#endif
        /// <summary>An external third-party data string associated with the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginData { get; set; }
#nullable restore
#else
        public string OriginData { get; set; }
#endif
        /// <summary>An external third-party identifier for the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginId { get; set; }
#nullable restore
#else
        public string OriginId { get; set; }
#endif
        /// <summary>The telephone number for the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>The program property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_program? Program { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_program Program { get; set; }
#endif
        /// <summary>The identifier for the Project Bid Type</summary>
        public int? ProjectBidTypeId { get; set; }
        /// <summary>The projected finish date for the Project</summary>
        public Date? ProjectedFinishDate { get; set; }
        /// <summary>The Project number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectNumber { get; set; }
#nullable restore
#else
        public string ProjectNumber { get; set; }
#endif
        /// <summary>The identifier for the Project Owner Type</summary>
        public int? ProjectOwnerTypeId { get; set; }
        /// <summary>The Project Region ID of the Project</summary>
        public int? ProjectRegionId { get; set; }
        /// <summary>The project_stage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_stage? ProjectStage { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_stage ProjectStage { get; set; }
#endif
        /// <summary>The project_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_type? ProjectType { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_type ProjectType { get; set; }
#endif
        /// <summary>Public notes on the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicNotes { get; set; }
#nullable restore
#else
        public string PublicNotes { get; set; }
#endif
        /// <summary>The sector of a project.</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_sector? Sector { get; set; }
        /// <summary>The total square footage for the Project</summary>
        public int? SquareFeet { get; set; }
        /// <summary>The date that the contract for the project is signed. Note: this field is a replacement to estimated_start_date and will mirror its value.</summary>
        public Date? StartDate { get; set; }
        /// <summary>The state code for the Project (ISO-3166 Alpha-2 format)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateCode { get; set; }
#nullable restore
#else
        public string StateCode { get; set; }
#endif
        /// <summary>The store number for the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StoreNumber { get; set; }
#nullable restore
#else
        public string StoreNumber { get; set; }
#endif
        /// <summary>The timezone in which the Project is located</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>The total amount of construction work performed, planned, or put in place during the project. Note: this field is a replacement to estimated_value and will mirror its value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TotalValue { get; set; }
#nullable restore
#else
        public string TotalValue { get; set; }
#endif
        /// <summary>The date and time the Project was last updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The end date for the Project Warranty</summary>
        public Date? WarrantyEndDate { get; set; }
        /// <summary>The start date for the Project Warranty</summary>
        public Date? WarrantyStartDate { get; set; }
        /// <summary>The work scope of a project.</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_work_scope? WorkScope { get; set; }
        /// <summary>The postal code for the Project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zip { get; set; }
#nullable restore
#else
        public string Zip { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities"/> and sets the default values.
        /// </summary>
        public SyncPatchResponse_entities()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accounting_project_number", n => { AccountingProjectNumber = n.GetStringValue(); } },
                { "active", n => { Active = n.GetBoolValue(); } },
                { "actual_start_date", n => { ActualStartDate = n.GetDateValue(); } },
                { "address", n => { Address = n.GetStringValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "completion_date", n => { CompletionDate = n.GetDateValue(); } },
                { "country_code", n => { CountryCode = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "delivery_method", n => { DeliveryMethod = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_delivery_method>(); } },
                { "departments", n => { Departments = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_departments>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_departments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "designated_market_area", n => { DesignatedMarketArea = n.GetStringValue(); } },
                { "display_name", n => { DisplayName = n.GetStringValue(); } },
                { "estimated_completion_date", n => { EstimatedCompletionDate = n.GetDateValue(); } },
                { "estimated_start_date", n => { EstimatedStartDate = n.GetDateValue(); } },
                { "estimated_value", n => { EstimatedValue = n.GetStringValue(); } },
                { "flag", n => { Flag = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_flag>(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "latitude", n => { Latitude = n.GetFloatValue(); } },
                { "logo_url", n => { LogoUrl = n.GetStringValue(); } },
                { "longitude", n => { Longitude = n.GetFloatValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "office", n => { Office = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_office>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_office.CreateFromDiscriminatorValue); } },
                { "origin_code", n => { OriginCode = n.GetStringValue(); } },
                { "origin_data", n => { OriginData = n.GetStringValue(); } },
                { "origin_id", n => { OriginId = n.GetStringValue(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "program", n => { Program = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_program>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_program.CreateFromDiscriminatorValue); } },
                { "project_bid_type_id", n => { ProjectBidTypeId = n.GetIntValue(); } },
                { "project_number", n => { ProjectNumber = n.GetStringValue(); } },
                { "project_owner_type_id", n => { ProjectOwnerTypeId = n.GetIntValue(); } },
                { "project_region_id", n => { ProjectRegionId = n.GetIntValue(); } },
                { "project_stage", n => { ProjectStage = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_stage>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_stage.CreateFromDiscriminatorValue); } },
                { "project_type", n => { ProjectType = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_type>(global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_type.CreateFromDiscriminatorValue); } },
                { "projected_finish_date", n => { ProjectedFinishDate = n.GetDateValue(); } },
                { "public_notes", n => { PublicNotes = n.GetStringValue(); } },
                { "sector", n => { Sector = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_sector>(); } },
                { "square_feet", n => { SquareFeet = n.GetIntValue(); } },
                { "start_date", n => { StartDate = n.GetDateValue(); } },
                { "state_code", n => { StateCode = n.GetStringValue(); } },
                { "store_number", n => { StoreNumber = n.GetStringValue(); } },
                { "time_zone", n => { TimeZone = n.GetStringValue(); } },
                { "total_value", n => { TotalValue = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "warranty_end_date", n => { WarrantyEndDate = n.GetDateValue(); } },
                { "warranty_start_date", n => { WarrantyStartDate = n.GetDateValue(); } },
                { "work_scope", n => { WorkScope = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_work_scope>(); } },
                { "zip", n => { Zip = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accounting_project_number", AccountingProjectNumber);
            writer.WriteBoolValue("active", Active);
            writer.WriteDateValue("actual_start_date", ActualStartDate);
            writer.WriteStringValue("address", Address);
            writer.WriteStringValue("city", City);
            writer.WriteDateValue("completion_date", CompletionDate);
            writer.WriteStringValue("country_code", CountryCode);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_delivery_method>("delivery_method", DeliveryMethod);
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_departments>("departments", Departments);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("designated_market_area", DesignatedMarketArea);
            writer.WriteStringValue("display_name", DisplayName);
            writer.WriteDateValue("estimated_completion_date", EstimatedCompletionDate);
            writer.WriteDateValue("estimated_start_date", EstimatedStartDate);
            writer.WriteStringValue("estimated_value", EstimatedValue);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_flag>("flag", Flag);
            writer.WriteIntValue("id", Id);
            writer.WriteFloatValue("latitude", Latitude);
            writer.WriteStringValue("logo_url", LogoUrl);
            writer.WriteFloatValue("longitude", Longitude);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_office>("office", Office);
            writer.WriteStringValue("origin_code", OriginCode);
            writer.WriteStringValue("origin_data", OriginData);
            writer.WriteStringValue("origin_id", OriginId);
            writer.WriteStringValue("phone", Phone);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_program>("program", Program);
            writer.WriteIntValue("project_bid_type_id", ProjectBidTypeId);
            writer.WriteDateValue("projected_finish_date", ProjectedFinishDate);
            writer.WriteStringValue("project_number", ProjectNumber);
            writer.WriteIntValue("project_owner_type_id", ProjectOwnerTypeId);
            writer.WriteIntValue("project_region_id", ProjectRegionId);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_stage>("project_stage", ProjectStage);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_project_type>("project_type", ProjectType);
            writer.WriteStringValue("public_notes", PublicNotes);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_sector>("sector", Sector);
            writer.WriteIntValue("square_feet", SquareFeet);
            writer.WriteDateValue("start_date", StartDate);
            writer.WriteStringValue("state_code", StateCode);
            writer.WriteStringValue("store_number", StoreNumber);
            writer.WriteStringValue("time_zone", TimeZone);
            writer.WriteStringValue("total_value", TotalValue);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteDateValue("warranty_end_date", WarrantyEndDate);
            writer.WriteDateValue("warranty_start_date", WarrantyStartDate);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V10.Projects.Sync.SyncPatchResponse_entities_work_scope>("work_scope", WorkScope);
            writer.WriteStringValue("zip", Zip);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
