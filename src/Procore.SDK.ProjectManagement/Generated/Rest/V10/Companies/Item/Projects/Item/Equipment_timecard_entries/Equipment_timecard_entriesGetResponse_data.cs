// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Equipment_timecard_entriesGetResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ID of the company</summary>
        public int? CompanyId { get; set; }
        /// <summary>The date and time the equipment timecard entry was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>ID of the user who created the equipment timecard entry.</summary>
        public int? CreatedById { get; set; }
        /// <summary>ID of the crew the equipment timecard entry is associated with.</summary>
        public int? CrewId { get; set; }
        /// <summary>The date for the equipment timecard entry.</summary>
        public Date? Date { get; set; }
        /// <summary>Id of the equipment the equipment timecard entry is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EquipmentId { get; set; }
#nullable restore
#else
        public string EquipmentId { get; set; }
#endif
        /// <summary>ID</summary>
        public int? Id { get; set; }
        /// <summary>ID of the location the equipment timecard entry is associated with.</summary>
        public int? LocationId { get; set; }
        /// <summary>ID of the party the equipment timecard entry is associated with (ie, operator).</summary>
        public int? PartyId { get; set; }
        /// <summary>ID of the project the equipment timecard entry is associated with.</summary>
        public int? ProjectId { get; set; }
        /// <summary>Total number of hours/days/weeks the equipment was on site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Quantity { get; set; }
#nullable restore
#else
        public string Quantity { get; set; }
#endif
        /// <summary>ID of the timesheet the equipment timecard entry is associated with.</summary>
        public int? TimesheetId { get; set; }
        /// <summary>Enum that represents the unit of measure for provided quantity.</summary>
        public int? UnitOfMeasure { get; set; }
        /// <summary>The date and time the equipment timecard entry was last updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>ID of the WBS code, the equipment timecard entry is associated with.</summary>
        public int? WbsCodeId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Equipment_timecard_entriesGetResponse_data"/> and sets the default values.
        /// </summary>
        public Equipment_timecard_entriesGetResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Equipment_timecard_entriesGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Equipment_timecard_entriesGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V10.Companies.Item.Projects.Item.Equipment_timecard_entries.Equipment_timecard_entriesGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "company_id", n => { CompanyId = n.GetIntValue(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "created_by_id", n => { CreatedById = n.GetIntValue(); } },
                { "crew_id", n => { CrewId = n.GetIntValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "equipment_id", n => { EquipmentId = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "party_id", n => { PartyId = n.GetIntValue(); } },
                { "project_id", n => { ProjectId = n.GetIntValue(); } },
                { "quantity", n => { Quantity = n.GetStringValue(); } },
                { "timesheet_id", n => { TimesheetId = n.GetIntValue(); } },
                { "unit_of_measure", n => { UnitOfMeasure = n.GetIntValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
                { "wbs_code_id", n => { WbsCodeId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("company_id", CompanyId);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteIntValue("created_by_id", CreatedById);
            writer.WriteIntValue("crew_id", CrewId);
            writer.WriteDateValue("date", Date);
            writer.WriteStringValue("equipment_id", EquipmentId);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteIntValue("party_id", PartyId);
            writer.WriteIntValue("project_id", ProjectId);
            writer.WriteStringValue("quantity", Quantity);
            writer.WriteIntValue("timesheet_id", TimesheetId);
            writer.WriteIntValue("unit_of_measure", UnitOfMeasure);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteIntValue("wbs_code_id", WbsCodeId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
