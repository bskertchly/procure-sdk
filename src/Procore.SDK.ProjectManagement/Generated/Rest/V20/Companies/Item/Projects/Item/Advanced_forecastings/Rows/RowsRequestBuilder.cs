// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v2.0\companies\{company_id}\projects\{project_id}\advanced_forecastings\rows
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RowsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RowsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/projects/{project_id}/advanced_forecastings/rows{?budget_view_id*,filters*,page*,per_page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RowsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v2.0/companies/{company_id}/projects/{project_id}/advanced_forecastings/rows{?budget_view_id*,filters*,page*,per_page*}", rawUrl)
        {
        }
        /// <summary>
        /// Get Advanced forecasting rows. Each page will have a maximum of 100 items.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder.RowsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder.RowsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsGetResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update Advanced Forecasting Rows
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows403Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.Rows422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get Advanced forecasting rows. Each page will have a maximum of 100 items.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder.RowsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder.RowsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update Advanced Forecasting Rows
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V20.Companies.Item.Projects.Item.Advanced_forecastings.Rows.RowsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get Advanced forecasting rows. Each page will have a maximum of 100 items.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RowsRequestBuilderGetQueryParameters 
        {
            /// <summary>Unique identifier for the Budget View (also known as Budget Template). Required to return spread amount for other curves besides manual.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("budget_view_id")]
            public string? BudgetViewId { get; set; }
#nullable restore
#else
            [QueryParameter("budget_view_id")]
            public string BudgetViewId { get; set; }
#endif
            /// <summary>Array structure to filter the result of the advanced forecasting endpointSupported filter objects (with and without budget_view_id):  - WBS segment item filter    Structure:      - id: &lt;segment_id&gt;      - tier: &lt;segment_tier&gt;      - type: &apos;segment&apos;      - values: &lt;array of segment item ids&gt;      Example:    `{&quot;id&quot;: &quot;23&quot;, tier: &lt;segment_tier&gt;, &quot;type&quot;: &quot;segment&quot;, &quot;values&quot;: [2]}`    URL example:    https://app.procore.com/rest/v2.0/companies/&lt;company_id&gt;/projects/&lt;project_id&gt;/advanced_forecastings/rows?filters[][id]=23&amp;filters[][tier]=1&amp;filters[][type]=segment&amp;filters[][values][]=2&amp;page=1&amp;per_page=100&amp;budget_view_id=2Supported filters only if budget_view_id is provided:  - Actuals by date    Structure:      - id: &apos;date_range_for_actuals&apos;      - code: &apos;date_range_for_actuals&apos;      - type: &apos;date_range_for_actuals&apos;      - values: [`&lt;start_date&gt;(YYYY-MM-DD)`, `&lt;end_date&gt;(YYYY-MM-DD)`, `&lt;include_actuals_without_dates (boolean)&gt;`].        Example:    `{&quot;id&quot;: &quot;date_range_for_actuals&quot;, &quot;code&quot;: &quot;date_range_for_actuals&quot;, &quot;type&quot;: &quot;date_range_for_actuals&quot;, &quot;values&quot;: [&quot;2021-01-01&quot;, &quot;2021-01-31&quot;, false]}`    URL Example:    https://app.procore.com/rest/v2.0/companies/&lt;company_id&gt;/projects/&lt;project_id&gt;/advanced_forecastings/rows?filters[][code]=date_range_for_actuals&amp;filters[][id]=date_range_for_actuals&amp;filters[][type]=date_range_for_actuals&amp;filters[][values][]=2021-01-01&amp;filters[][values][]=2021-01-31&amp;filters[][values][]=false&amp;page=1&amp;per_page=100&amp;budget_view_id=2</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters")]
            public string[]? Filters { get; set; }
#nullable restore
#else
            [QueryParameter("filters")]
            public string[] Filters { get; set; }
#endif
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
        }
    }
}
#pragma warning restore CS0618
