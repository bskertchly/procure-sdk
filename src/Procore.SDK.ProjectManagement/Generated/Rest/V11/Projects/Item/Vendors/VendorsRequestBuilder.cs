// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.1\projects\{project_id}\vendors
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class VendorsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v11.projects.item.vendors.item collection</summary>
        /// <param name="position">ID of the vendor</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Item.VendorsItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Item.VendorsItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Item.VendorsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public VendorsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/vendors{?filters%5Bid%5D%5B%5D*,filters%5Bparent_id%5D%5B%5D*,filters%5Bsearch%5D*,filters%5Bstandard_cost_code_id%5D%5B%5D*,filters%5Btrade_id%5D%5B%5D*,page*,per_page*,run_configurable_validations*,sort*,view*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public VendorsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/vendors{?filters%5Bid%5D%5B%5D*,filters%5Bparent_id%5D%5B%5D*,filters%5Bsearch%5D*,filters%5Bstandard_cost_code_id%5D%5B%5D*,filters%5Btrade_id%5D%5B%5D*,page*,per_page*,run_configurable_validations*,sort*,view*}", rawUrl)
        {
        }
        /// <summary>
        /// Return a list of Vendors associated with a specified Project.
        /// </summary>
        /// <returns>A List&lt;double&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<double?>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder.VendorsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<double?>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder.VendorsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendPrimitiveCollectionAsync<double?>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Create a new Project Vendor.#### Country and State codesThe `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification.See [Working with Country Codes](/documentation/country-codes) for additional information.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder.VendorsRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder.VendorsRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.Vendors403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Return a list of Vendors associated with a specified Project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder.VendorsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder.VendorsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new Project Vendor.#### Country and State codesThe `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification.See [Working with Country Codes](/documentation/country-codes) for additional information.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder.VendorsRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsPostRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder.VendorsRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.VendorsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Return a list of Vendors associated with a specified Project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class VendorsRequestBuilderGetQueryParameters 
        {
            /// <summary>Returns vendors with the specified id(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D%5B%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D%5B%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Returns vendors with the specified parent id(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bparent_id%5D%5B%5D")]
            public int?[]? FiltersparentId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bparent_id%5D%5B%5D")]
            public int?[] FiltersparentId { get; set; }
#endif
            /// <summary>Return vendors where the search string matches the vendor name, keywords, origin_code, or ABN/EIN number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bsearch%5D")]
            public string? Filterssearch { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bsearch%5D")]
            public string Filterssearch { get; set; }
#endif
            /// <summary>Returns vendors associated with the specified standard cost code id(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bstandard_cost_code_id%5D%5B%5D")]
            public int?[]? FiltersstandardCostCodeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bstandard_cost_code_id%5D%5B%5D")]
            public int?[] FiltersstandardCostCodeId { get; set; }
#endif
            /// <summary>Returns vendors associated with the specified trade id(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btrade_id%5D%5B%5D")]
            public int?[]? FilterstradeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btrade_id%5D%5B%5D")]
            public int?[] FilterstradeId { get; set; }
#endif
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Return items with the specified sort.</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.GetSortQueryParameterType? Sort { get; set; }
            /// <summary>Specifies which view of the resource to return (which attributes should be present in the response). Users without read permissions to Directory are limited to ids_only, name, and minimal views. If a valid view is not provided, it will return the default view: minimal for users without read permissions and normal otherwise.</summary>
            [QueryParameter("view")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.GetViewQueryParameterType? View { get; set; }
        }
        /// <summary>
        /// Create a new Project Vendor.#### Country and State codesThe `country_code` and `state_code` parameter values must conform to the ISO-3166 Alpha-2 specification.See [Working with Country Codes](/documentation/country-codes) for additional information.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class VendorsRequestBuilderPostQueryParameters 
        {
            /// <summary>If true, validations are run for the corresponding Configurable Field Set.</summary>
            [QueryParameter("run_configurable_validations")]
            public bool? RunConfigurableValidations { get; set; }
            /// <summary>Specifies which view of the resource to return (which attributes should be present in the response). The default view is normal.</summary>
            [QueryParameter("view")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Vendors.PostViewQueryParameterType? View { get; set; }
        }
    }
}
#pragma warning restore CS0618
