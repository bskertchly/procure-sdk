// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.1\projects\{project_id}\bid_packages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Bid_packagesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v11.projects.item.bid_packages.item collection</summary>
        /// <param name="position">Bid Package ID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Item.WithBid_package_ItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Item.WithBid_package_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("bid_package_id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Item.WithBid_package_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Bid_packagesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/bid_packages{?filter*,page*,per_page*,sort*,view*,with_flags*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Bid_packagesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/bid_packages{?filter*,page*,per_page*,sort*,view*,with_flags*}", rawUrl)
        {
        }
        /// <summary>
        /// Return a list of all Bid Packages for a Project.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder.Bid_packagesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder.Bid_packagesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages5XXError.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packages.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Return a list of all Bid Packages for a Project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder.Bid_packagesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder.Bid_packagesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.Bid_packagesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Return a list of all Bid Packages for a Project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Bid_packagesRequestBuilderGetQueryParameters 
        {
            /// <summary>Filters down list of bid packages for a project.</summary>
            [QueryParameter("filter")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.GetFilterQueryParameterType? Filter { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Direction (asc/desc) can be controlled by the presence or absence of &apos;-&apos; before the sort parameter. Only applies when view=internal.</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.GetSortQueryParameterType? Sort { get; set; }
            /// <summary>When set to all, both open and closed bid packages will be returned. When set to internal, more keys will be made available for each bid package. When set to use_previous_bidders, a key will be made available that will provide information on whether the bid package has bid forms</summary>
            [QueryParameter("view")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.GetViewQueryParameterType? View { get; set; }
            /// <summary>Filter bid packages by available features (e.g., flexible_response_types_enabled, bid_form_sections_enabled). For accurate results in the CPBP feature, both flags should be passed, not just one.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("with_flags")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.GetWith_flagsQueryParameterType[]? WithFlags { get; set; }
#nullable restore
#else
            [QueryParameter("with_flags")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Bid_packages.GetWith_flagsQueryParameterType[] WithFlags { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
