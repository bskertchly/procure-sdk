// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.1\projects\{project_id}\checklist\users
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UsersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/checklist/users{?filters%5Bpotential_assignee%5D*,filters%5Bpotential_distribution_member%5D*,filters%5Bpotential_point_of_contact%5D*,filters%5Bvendor_id%5D*,page*,per_page*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/checklist/users{?filters%5Bpotential_assignee%5D*,filters%5Bpotential_distribution_member%5D*,filters%5Bpotential_point_of_contact%5D*,filters%5Bvendor_id%5D*,page*,per_page*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Inspection Users for a given project
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.Users.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of Inspection Users for a given project
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of Inspection Users for a given project
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderGetQueryParameters 
        {
            /// <summary>Returns item(s) with the that can be potential inspection assignees.</summary>
            [QueryParameter("filters%5Bpotential_assignee%5D")]
            public bool? FilterspotentialAssignee { get; set; }
            /// <summary>Returns item(s) that can be potential distribution members.</summary>
            [QueryParameter("filters%5Bpotential_distribution_member%5D")]
            public bool? FilterspotentialDistributionMember { get; set; }
            /// <summary>Returns item(s) with the that can be potential inspection points of contact.</summary>
            [QueryParameter("filters%5Bpotential_point_of_contact%5D")]
            public bool? FilterspotentialPointOfContact { get; set; }
            /// <summary>Return item(s) with the specified Vendor ID.</summary>
            [QueryParameter("filters%5Bvendor_id%5D")]
            public int? FiltersvendorId { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Direction of sorting param (name) is in desc order of full name</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.Users.GetSortQueryParameterType? Sort { get; set; }
        }
    }
}
#pragma warning restore CS0618
