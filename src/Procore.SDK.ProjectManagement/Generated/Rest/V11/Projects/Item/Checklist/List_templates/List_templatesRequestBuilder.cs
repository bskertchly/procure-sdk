// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.1\projects\{project_id}\checklist\list_templates
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class List_templatesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v11.projects.item.checklist.list_templates.item collection</summary>
        /// <param name="position">Checklist Template ID</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.Item.List_templatesItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.Item.List_templatesItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.Item.List_templatesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public List_templatesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/checklist/list_templates{?filters%5Binspection_type_id%5D,filters%5Bneeds_update%5D,filters%5Bquery%5D*,filters%5Bresponse_set_id%5D,filters%5Btrade_ids%5D,page*,per_page*,sort*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public List_templatesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/checklist/list_templates{?filters%5Binspection_type_id%5D,filters%5Bneeds_update%5D,filters%5Bquery%5D*,filters%5Bresponse_set_id%5D,filters%5Btrade_ids%5D,page*,per_page*,sort*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all Inspection Checklist Templates for a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.Note: A User with read-only and above permissions to Inspections has access to this endpoint and the URL to individual templates on the web
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder.List_templatesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder.List_templatesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates5XXError.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templates.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of all Inspection Checklist Templates for a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.Note: A User with read-only and above permissions to Inspections has access to this endpoint and the URL to individual templates on the web
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder.List_templatesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder.List_templatesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.List_templatesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of all Inspection Checklist Templates for a specified Project.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.Note: A User with read-only and above permissions to Inspections has access to this endpoint and the URL to individual templates on the web
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class List_templatesRequestBuilderGetQueryParameters 
        {
            /// <summary>Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Binspection_type_id%5D")]
            public int?[]? FiltersinspectionTypeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Binspection_type_id%5D")]
            public int?[] FiltersinspectionTypeId { get; set; }
#endif
            /// <summary>Boolean. Return template(s) whose configuration is in need of updates.</summary>
            [QueryParameter("filters%5Bneeds_update%5D")]
            public bool? FiltersneedsUpdate { get; set; }
            /// <summary>Return item(s) containing search query</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bquery%5D")]
            public string? Filtersquery { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bquery%5D")]
            public string Filtersquery { get; set; }
#endif
            /// <summary>Array of Item Response Set IDs. Return list template(s) whose items are associated with the given Response Set IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bresponse_set_id%5D")]
            public int?[]? FiltersresponseSetId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bresponse_set_id%5D")]
            public int?[] FiltersresponseSetId { get; set; }
#endif
            /// <summary>Array of Trade IDs. Returns item(s) with the specified Trade IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btrade_ids%5D")]
            public int?[]? FilterstradeIds { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btrade_ids%5D")]
            public int?[] FilterstradeIds { get; set; }
#endif
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Sorts the list of Checklist Templates on the attribute given. By default the list is in ascending order. Use &apos;-attribute&apos; to sort in descending order.Ex. &apos;sort=-trade&apos;.</summary>
            [QueryParameter("sort")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Checklist.List_templates.GetSortQueryParameterType? Sort { get; set; }
        }
    }
}
#pragma warning restore CS0618
