// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item
{
    /// <summary>
    /// Meeting topic object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PatchRequestBody_meeting_topic : IAdditionalDataHolder, IParsable
    {
        /// <summary>The Added Under Agenda status of the Meeting Topic</summary>
        public bool? AddedUnderAgenda { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An array of the IDs of the Assignments of the Meeting Topic.Setting `meeting_topic[assignment_ids]` to &quot;none&quot; erases assignments.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? AssignmentIds { get; set; }
#nullable restore
#else
        public List<int?> AssignmentIds { get; set; }
#endif
        /// <summary>The Date of the Meeting Topic being closed</summary>
        public DateTimeOffset? ClosedAt { get; set; }
        /// <summary>The Description of the Meeting Topic</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The Due Date of the Meeting Topic</summary>
        public Date? DueDate { get; set; }
        /// <summary>The Private status of the Meeting Topic</summary>
        public bool? IsPrivate { get; set; }
        /// <summary>The ID of the Meeting Category the Meeting Topic belongs to</summary>
        public int? MeetingCategoryId { get; set; }
        /// <summary>The Meeting Wide Number of the Meeting Topic</summary>
        public int? MeetingWideNumber { get; set; }
        /// <summary>&lt;p&gt;&lt;span style=\\\&quot;font-size: large;\\\&quot;&gt;Please look at Item 1 and have those pieces completed &lt;strong&gt;before&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Minutes { get; set; }
#nullable restore
#else
        public string Minutes { get; set; }
#endif
        /// <summary>The Priority of the Meeting Topic</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic_priority? Priority { get; set; }
        /// <summary>The Status of the Meeting Topic</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic_status? Status { get; set; }
        /// <summary>The Title of the Meeting Topic</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The specified array of upload_ids gets associated as attachments to the meeting topic.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UploadIds { get; set; }
#nullable restore
#else
        public List<string> UploadIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic"/> and sets the default values.
        /// </summary>
        public PatchRequestBody_meeting_topic()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "added_under_agenda", n => { AddedUnderAgenda = n.GetBoolValue(); } },
                { "assignment_ids", n => { AssignmentIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "closed_at", n => { ClosedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "due_date", n => { DueDate = n.GetDateValue(); } },
                { "is_private", n => { IsPrivate = n.GetBoolValue(); } },
                { "meeting_category_id", n => { MeetingCategoryId = n.GetIntValue(); } },
                { "meeting_wide_number", n => { MeetingWideNumber = n.GetIntValue(); } },
                { "minutes", n => { Minutes = n.GetStringValue(); } },
                { "priority", n => { Priority = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic_priority>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic_status>(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "upload_ids", n => { UploadIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("added_under_agenda", AddedUnderAgenda);
            writer.WriteCollectionOfPrimitiveValues<int?>("assignment_ids", AssignmentIds);
            writer.WriteDateTimeOffsetValue("closed_at", ClosedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteDateValue("due_date", DueDate);
            writer.WriteBoolValue("is_private", IsPrivate);
            writer.WriteIntValue("meeting_category_id", MeetingCategoryId);
            writer.WriteIntValue("meeting_wide_number", MeetingWideNumber);
            writer.WriteStringValue("minutes", Minutes);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic_priority>("priority", Priority);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meeting_topics.Item.PatchRequestBody_meeting_topic_status>("status", Status);
            writer.WriteStringValue("title", Title);
            writer.WriteCollectionOfPrimitiveValues<string>("upload_ids", UploadIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
