// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.1\projects\{project_id}\meetings\ecrion_pdf_generation_data
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Ecrion_pdf_generation_dataRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Ecrion_pdf_generation_dataRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/meetings/ecrion_pdf_generation_data{?filters%5Bassignee_id%5D*,filters%5Bdraft%5D*,filters%5Bid%5D*,filters%5Bmode%5D*,filters%5Bpublic%5D*,filters%5Broot_id%5D*,filters%5Broots%5D*,filters%5Btemplate_id%5D*,page*,per_page*,show_attachments*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Ecrion_pdf_generation_dataRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/meetings/ecrion_pdf_generation_data{?filters%5Bassignee_id%5D*,filters%5Bdraft%5D*,filters%5Bid%5D*,filters%5Bmode%5D*,filters%5Bpublic%5D*,filters%5Broot_id%5D*,filters%5Broots%5D*,filters%5Btemplate_id%5D*,page*,per_page*,show_attachments*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns Ecrion Xml and Template for all Meetings on the Project.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_data401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_data403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder.Ecrion_pdf_generation_dataRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder.Ecrion_pdf_generation_dataRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_data401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_data403Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataGetResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns Ecrion Xml and Template for all Meetings on the Project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder.Ecrion_pdf_generation_dataRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder.Ecrion_pdf_generation_dataRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns Ecrion Xml and Template for all Meetings on the Project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Ecrion_pdf_generation_dataRequestBuilderGetQueryParameters 
        {
            /// <summary>Returns meeting(s) with the specified assignee</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bassignee_id%5D")]
            public int?[]? FiltersassigneeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bassignee_id%5D")]
            public int?[] FiltersassigneeId { get; set; }
#endif
            /// <summary>Returns draft meeting(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bdraft%5D")]
            public string? Filtersdraft { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bdraft%5D")]
            public string Filtersdraft { get; set; }
#endif
            /// <summary>Returns meeting(s) with the specified ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Returns meeting(s) in certain mode.</summary>
            [QueryParameter("filters%5Bmode%5D")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.GetFiltersModeQueryParameterType? Filtersmode { get; set; }
            /// <summary>Returns public meeting(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bpublic%5D")]
            public string? Filterspublic { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bpublic%5D")]
            public string Filterspublic { get; set; }
#endif
            /// <summary>Returns child meeting(s) whose root_id matches the specified root_id. Parent is returned as well</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Broot_id%5D")]
            public string? FiltersrootId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Broot_id%5D")]
            public string FiltersrootId { get; set; }
#endif
            /// <summary>Returns Only parent/root meetings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Broots%5D")]
            public string? Filtersroots { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Broots%5D")]
            public string Filtersroots { get; set; }
#endif
            /// <summary>Returns child meeting(s) whose meeting_template_id matches the specified template_id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btemplate_id%5D")]
            public string? FilterstemplateId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btemplate_id%5D")]
            public string FilterstemplateId { get; set; }
#endif
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>determine the AttachmentVisible tag value</summary>
            [QueryParameter("show_attachments")]
            public bool? ShowAttachments { get; set; }
        }
    }
}
#pragma warning restore CS0618
