// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data;
using Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.1\projects\{project_id}\meetings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MeetingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The ecrion_pdf_generation_data property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder Ecrion_pdf_generation_data
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Ecrion_pdf_generation_data.Ecrion_pdf_generation_dataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Procore.SDK.ProjectManagement.rest.v11.projects.item.meetings.item collection</summary>
        /// <param name="position">ID of the meeting</param>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Item.MeetingsItemRequestBuilder"/></returns>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Item.MeetingsItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Item.MeetingsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeetingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/meetings{?deleted_only*,filters%5Bassignee_id%5D*,filters%5Bid%5D*,page*,per_page*,serializer_view*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeetingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/meetings{?deleted_only*,filters%5Bassignee_id%5D*,filters%5Bid%5D*,page*,per_page*,serializer_view*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all Meetings for a specified Project.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsGetResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a new Meeting.#### Uploading attachmentsTo upload attachments you must upload the entire payload as `multipart/form-data` content-type andspecify each parameter as form-data together with `attachments[]` as files.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostResponse?> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostResponse> PostAsync(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings403Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.Meetings5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of all Meetings for a specified Project.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a new Meeting.#### Uploading attachmentsTo upload attachments you must upload the entire payload as `multipart/form-data` content-type andspecify each parameter as form-data together with `attachments[]` as files.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember2"/>, List&lt;global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember1&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MeetingsGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type List&lt;global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember1&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember1>? MeetingsGetResponseMember1 { get; set; }
#nullable restore
#else
            public List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember1> MeetingsGetResponseMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember2? MeetingsGetResponseMember2 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember2 MeetingsGetResponseMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsRequestBuilder.MeetingsGetResponse();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.MeetingsGetResponseMember2 = new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember2();
                }
                else if(parseNode.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember1>(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember1.CreateFromDiscriminatorValue)?.AsList() is List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember1> meetingsGetResponseMember1Value)
                {
                    result.MeetingsGetResponseMember1 = meetingsGetResponseMember1Value;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(MeetingsGetResponseMember2 != null)
                {
                    return MeetingsGetResponseMember2.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(MeetingsGetResponseMember2 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember2>(null, MeetingsGetResponseMember2);
                }
                else if(MeetingsGetResponseMember1 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.MeetingsGetResponseMember1>(null, MeetingsGetResponseMember1);
                }
            }
        }
        /// <summary>
        /// Returns a list of all Meetings for a specified Project.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MeetingsRequestBuilderGetQueryParameters 
        {
            /// <summary>Indicates whether to only show deleted meetings. When this query parameter is passed the response body will be an array of meetings without grouping. i.e. { &quot;meetings&quot;:[{Meeting_1}, {Meeting_2}] }</summary>
            [QueryParameter("deleted_only")]
            public bool? DeletedOnly { get; set; }
            /// <summary>Returns meeting(s) with the specified assignee</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bassignee_id%5D")]
            public int?[]? FiltersassigneeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bassignee_id%5D")]
            public int?[] FiltersassigneeId { get; set; }
#endif
            /// <summary>Returns meeting(s) with the specified ID(s)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bid%5D")]
            public int?[]? Filtersid { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bid%5D")]
            public int?[] Filtersid { get; set; }
#endif
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>The data set that should be returned from the serializer.The normal view includes default fields.The extended view includes the default fields plus Meeting Template fields.Default view is normal.</summary>
            [QueryParameter("serializer_view")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Meetings.GetSerializer_viewQueryParameterType? SerializerView { get; set; }
        }
    }
}
#pragma warning restore CS0618
