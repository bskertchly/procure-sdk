// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Revisions;
using Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Workflow_data;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.1\projects\{project_id}\submittals\{id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SubmittalsItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The revisions property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Revisions.RevisionsRequestBuilder Revisions
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Revisions.RevisionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workflow_data property</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Workflow_data.Workflow_dataRequestBuilder Workflow_data
        {
            get => new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Workflow_data.Workflow_dataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubmittalsItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/submittals/{id}{?as_datetimes*,display_company_with_name*,send_emails*,serializer_view*,with_drawing_info*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubmittalsItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.1/projects/{project_id}/submittals/{id}{?as_datetimes*,display_company_with_name*,send_emails*,serializer_view*,with_drawing_info*}", rawUrl)
        {
        }
        /// <summary>
        /// Delete the specified Submittal.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals404Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals4XXError.CreateFromDiscriminatorValue },
                { "500", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals500Error.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Return detailed information on the specified Submittal.See [Downloading attachments with markup](https://developers.procore.com/reference/document-markup#show-or-create-document-markup-downloadable-pdf).
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals404Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsGetResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update the specified Submittal.Note: Updating the `workflow_data` field is only supported when using the `multipart/form-data` request format.If you attempt to update `workflow_data` using a `JSON` request format, the request will fail with a `400 Bad Request` response, along with the error message: &quot;Error Updating Approvers.&quot;
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals422Error">When receiving a 422 status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchResponse?> PatchAsync(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsItemRequestBuilderPatchQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchResponse> PatchAsync(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsItemRequestBuilderPatchQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals404Error.CreateFromDiscriminatorValue },
                { "422", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals422Error.CreateFromDiscriminatorValue },
                { "4XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals4XXError.CreateFromDiscriminatorValue },
                { "5XX", global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.Submittals5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchResponse>(requestInfo, global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete the specified Submittal.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Return detailed information on the specified Submittal.See [Downloading attachments with markup](https://developers.procore.com/reference/document-markup#show-or-create-document-markup-downloadable-pdf).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update the specified Submittal.Note: Updating the `workflow_data` field is only supported when using the `multipart/form-data` request format.If you attempt to update `workflow_data` using a `JSON` request format, the request will fail with a `400 Bad Request` response, along with the error message: &quot;Error Updating Approvers.&quot;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsItemRequestBuilderPatchQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsPatchRequestBody body, Action<RequestConfiguration<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsItemRequestBuilderPatchQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember1"/>, <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember2"/>, <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember3"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubmittalsGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember1? SubmittalsGetResponseMember1 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember1 SubmittalsGetResponseMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember2? SubmittalsGetResponseMember2 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember2 SubmittalsGetResponseMember2 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember3"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember3? SubmittalsGetResponseMember3 { get; set; }
#nullable restore
#else
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember3 SubmittalsGetResponseMember3 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsItemRequestBuilder.SubmittalsGetResponse();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SubmittalsGetResponseMember1 = new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SubmittalsGetResponseMember2 = new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember2();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SubmittalsGetResponseMember3 = new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember3();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SubmittalsGetResponseMember1 != null)
                {
                    return SubmittalsGetResponseMember1.GetFieldDeserializers();
                }
                else if(SubmittalsGetResponseMember2 != null)
                {
                    return SubmittalsGetResponseMember2.GetFieldDeserializers();
                }
                else if(SubmittalsGetResponseMember3 != null)
                {
                    return SubmittalsGetResponseMember3.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(SubmittalsGetResponseMember1 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember1>(null, SubmittalsGetResponseMember1);
                }
                else if(SubmittalsGetResponseMember2 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember2>(null, SubmittalsGetResponseMember2);
                }
                else if(SubmittalsGetResponseMember3 != null)
                {
                    writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.SubmittalsGetResponseMember3>(null, SubmittalsGetResponseMember3);
                }
            }
        }
        /// <summary>
        /// Return detailed information on the specified Submittal.See [Downloading attachments with markup](https://developers.procore.com/reference/document-markup#show-or-create-document-markup-downloadable-pdf).
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubmittalsItemRequestBuilderGetQueryParameters 
        {
            /// <summary>When true, returns date fields as datetime format</summary>
            [QueryParameter("as_datetimes")]
            public bool? AsDatetimes { get; set; }
            /// <summary>When true, includes company name with user names in the response</summary>
            [QueryParameter("display_company_with_name")]
            public bool? DisplayCompanyWithName { get; set; }
            /// <summary>Controls the response format and fields returned for the show endpoint:- `minimal_show` - Returns minimal fields with extended information- Default (not specified) - Returns full extended fields</summary>
            [QueryParameter("serializer_view")]
            public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Submittals.Item.GetSerializer_viewQueryParameterType? SerializerView { get; set; }
            /// <summary>When true, includes drawing URLs in the response (requires appropriate permissions)</summary>
            [QueryParameter("with_drawing_info")]
            public bool? WithDrawingInfo { get; set; }
        }
        /// <summary>
        /// Update the specified Submittal.Note: Updating the `workflow_data` field is only supported when using the `multipart/form-data` request format.If you attempt to update `workflow_data` using a `JSON` request format, the request will fail with a `400 Bad Request` response, along with the error message: &quot;Error Updating Approvers.&quot;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubmittalsItemRequestBuilderPatchQueryParameters 
        {
            /// <summary>Designates whether or not emails will be sent (default false)</summary>
            [QueryParameter("send_emails")]
            public bool? SendEmails { get; set; }
        }
    }
}
#pragma warning restore CS0618
