// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item
{
    /// <summary>
    /// Weather Log
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Weather_logsPatchResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The attachments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_attachments>? Attachments { get; set; }
#nullable restore
#else
        public List<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_attachments> Attachments { get; set; }
#endif
        /// <summary>Average temperature for the workday</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Average { get; set; }
#nullable restore
#else
        public string Average { get; set; }
#endif
        /// <summary>Translated Calamity condition based on user&apos;s locale. List of possible values can be retrieved using Weather Conditions API https://developers.procore.com/reference/rest/v1/weather-conditions?version=1.0</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Calamity { get; set; }
#nullable restore
#else
        public string Calamity { get; set; }
#endif
        /// <summary>Additional comments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comments { get; set; }
#nullable restore
#else
        public string Comments { get; set; }
#endif
        /// <summary>Created at</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The created_by property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_created_by? CreatedBy { get; set; }
#nullable restore
#else
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_created_by CreatedBy { get; set; }
#endif
        /// <summary>Format: YYYY-MM-DD</summary>
        public Date? Date { get; set; }
        /// <summary>Estimated UTC datetime of record</summary>
        public DateTimeOffset? Datetime { get; set; }
        /// <summary>Deleted at</summary>
        public DateTimeOffset? DeletedAt { get; set; }
        /// <summary>Translated Ground condition based on user&apos;s locale. List of possible values can be retrieved using Weather Conditions API https://developers.procore.com/reference/rest/v1/weather-conditions?version=1.0</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ground { get; set; }
#nullable restore
#else
        public string Ground { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>Weather delay status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IsWeatherDelay { get; set; }
#nullable restore
#else
        public string IsWeatherDelay { get; set; }
#endif
        /// <summary>Order in which this entry was recorded for the day</summary>
        public int? Position { get; set; }
        /// <summary>Precipitation conditions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Precipitation { get; set; }
#nullable restore
#else
        public string Precipitation { get; set; }
#endif
        /// <summary>Translated Sky condition based on user&apos;s locale. List of possible values can be retrieved using Weather Conditions API https://developers.procore.com/reference/rest/v1/weather-conditions?version=1.0</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sky { get; set; }
#nullable restore
#else
        public string Sky { get; set; }
#endif
        /// <summary>Translated Temperature condition based on user&apos;s locale. List of possible values can be retrieved using Weather Conditions API https://developers.procore.com/reference/rest/v1/weather-conditions?version=1.0</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Temperature { get; set; }
#nullable restore
#else
        public string Temperature { get; set; }
#endif
        /// <summary>UTC time weather conditions were observed</summary>
        public DateTimeOffset? Time { get; set; }
        /// <summary>Updated at</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>Translated Wind condition based on user&apos;s locale. List of possible values can be retrieved using Weather Conditions API https://developers.procore.com/reference/rest/v1/weather-conditions?version=1.0</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Wind { get; set; }
#nullable restore
#else
        public string Wind { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse"/> and sets the default values.
        /// </summary>
        public Weather_logsPatchResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attachments", n => { Attachments = n.GetCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_attachments>(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_attachments.CreateFromDiscriminatorValue)?.AsList(); } },
                { "average", n => { Average = n.GetStringValue(); } },
                { "calamity", n => { Calamity = n.GetStringValue(); } },
                { "comments", n => { Comments = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "created_by", n => { CreatedBy = n.GetObjectValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_created_by>(global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_created_by.CreateFromDiscriminatorValue); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "datetime", n => { Datetime = n.GetDateTimeOffsetValue(); } },
                { "deleted_at", n => { DeletedAt = n.GetDateTimeOffsetValue(); } },
                { "ground", n => { Ground = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "is_weather_delay", n => { IsWeatherDelay = n.GetStringValue(); } },
                { "position", n => { Position = n.GetIntValue(); } },
                { "precipitation", n => { Precipitation = n.GetStringValue(); } },
                { "sky", n => { Sky = n.GetStringValue(); } },
                { "temperature", n => { Temperature = n.GetStringValue(); } },
                { "time", n => { Time = n.GetDateTimeOffsetValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "wind", n => { Wind = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_attachments>("attachments", Attachments);
            writer.WriteStringValue("average", Average);
            writer.WriteStringValue("calamity", Calamity);
            writer.WriteStringValue("comments", Comments);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteObjectValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Item.Weather_logsPatchResponse_created_by>("created_by", CreatedBy);
            writer.WriteDateValue("date", Date);
            writer.WriteDateTimeOffsetValue("datetime", Datetime);
            writer.WriteDateTimeOffsetValue("deleted_at", DeletedAt);
            writer.WriteStringValue("ground", Ground);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("is_weather_delay", IsWeatherDelay);
            writer.WriteIntValue("position", Position);
            writer.WriteStringValue("precipitation", Precipitation);
            writer.WriteStringValue("sky", Sky);
            writer.WriteStringValue("temperature", Temperature);
            writer.WriteDateTimeOffsetValue("time", Time);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("wind", Wind);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
