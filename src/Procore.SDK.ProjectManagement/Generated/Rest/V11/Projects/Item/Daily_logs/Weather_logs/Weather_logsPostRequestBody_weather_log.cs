// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Weather_logsPostRequestBody_weather_log : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Average temperature for the workday</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Average { get; set; }
#nullable restore
#else
        public string Average { get; set; }
#endif
        /// <summary>Type of calamity the jobsite was subject to</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_calamity? Calamity { get; set; }
        /// <summary>Additional comments</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comments { get; set; }
#nullable restore
#else
        public string Comments { get; set; }
#endif
        /// <summary>Date of the Weather Log. Format: YYYY-MM-DD</summary>
        public Date? Date { get; set; }
        /// <summary>PDM document to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DocumentManagementDocumentRevisionIds { get; set; }
#nullable restore
#else
        public List<string> DocumentManagementDocumentRevisionIds { get; set; }
#endif
        /// <summary>Drawing Revisions to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? DrawingRevisionIds { get; set; }
#nullable restore
#else
        public List<int?> DrawingRevisionIds { get; set; }
#endif
        /// <summary>File Versions to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FileVersionIds { get; set; }
#nullable restore
#else
        public List<int?> FileVersionIds { get; set; }
#endif
        /// <summary>Forms to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FormIds { get; set; }
#nullable restore
#else
        public List<int?> FormIds { get; set; }
#endif
        /// <summary>Ground condition</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_ground? Ground { get; set; }
        /// <summary>Images to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ImageIds { get; set; }
#nullable restore
#else
        public List<int?> ImageIds { get; set; }
#endif
        /// <summary>Weather delay status</summary>
        public int? IsWeatherDelay { get; set; }
        /// <summary>Precipitation conditions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Precipitation { get; set; }
#nullable restore
#else
        public string Precipitation { get; set; }
#endif
        /// <summary>Sky condition</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_sky? Sky { get; set; }
        /// <summary>Weather temperature</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_temperature? Temperature { get; set; }
        /// <summary>UTC time weather conditions were observed. The date of observation must match entry&apos;s date.</summary>
        public Time? Time { get; set; }
        /// <summary>Uploads to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UploadIds { get; set; }
#nullable restore
#else
        public List<string> UploadIds { get; set; }
#endif
        /// <summary>Wind condition</summary>
        public global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_wind? Wind { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log"/> and sets the default values.
        /// </summary>
        public Weather_logsPostRequestBody_weather_log()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "average", n => { Average = n.GetStringValue(); } },
                { "calamity", n => { Calamity = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_calamity>(); } },
                { "comments", n => { Comments = n.GetStringValue(); } },
                { "date", n => { Date = n.GetDateValue(); } },
                { "document_management_document_revision_ids", n => { DocumentManagementDocumentRevisionIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "drawing_revision_ids", n => { DrawingRevisionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "file_version_ids", n => { FileVersionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "form_ids", n => { FormIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "ground", n => { Ground = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_ground>(); } },
                { "image_ids", n => { ImageIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "is_weather_delay", n => { IsWeatherDelay = n.GetIntValue(); } },
                { "precipitation", n => { Precipitation = n.GetStringValue(); } },
                { "sky", n => { Sky = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_sky>(); } },
                { "temperature", n => { Temperature = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_temperature>(); } },
                { "time", n => { Time = n.GetTimeValue(); } },
                { "upload_ids", n => { UploadIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "wind", n => { Wind = n.GetEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_wind>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("average", Average);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_calamity>("calamity", Calamity);
            writer.WriteStringValue("comments", Comments);
            writer.WriteDateValue("date", Date);
            writer.WriteCollectionOfPrimitiveValues<string>("document_management_document_revision_ids", DocumentManagementDocumentRevisionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("drawing_revision_ids", DrawingRevisionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("file_version_ids", FileVersionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("form_ids", FormIds);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_ground>("ground", Ground);
            writer.WriteCollectionOfPrimitiveValues<int?>("image_ids", ImageIds);
            writer.WriteIntValue("is_weather_delay", IsWeatherDelay);
            writer.WriteStringValue("precipitation", Precipitation);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_sky>("sky", Sky);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_temperature>("temperature", Temperature);
            writer.WriteTimeValue("time", Time);
            writer.WriteCollectionOfPrimitiveValues<string>("upload_ids", UploadIds);
            writer.WriteEnumValue<global::Procore.SDK.ProjectManagement.Rest.V11.Projects.Item.Daily_logs.Weather_logs.Weather_logsPostRequestBody_weather_log_wind>("wind", Wind);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
