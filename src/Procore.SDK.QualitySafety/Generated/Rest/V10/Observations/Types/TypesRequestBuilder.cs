// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.QualitySafety.Rest.V10.Observations.Types
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\observations\types
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TypesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TypesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/observations/types?company_id={company_id}&project_id={project_id}{&page*,per_page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TypesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/observations/types?company_id={company_id}&project_id={project_id}{&page*,per_page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a collection of Observation Types from the Project&apos;s Company or from the Company,depending on which query parameter is used.NOTE: Though both query parameters are marked as required below, only one of the twoneeds to be passed in (i.e., if you pass in a project_id then you do not need to alsopass in a company_id, and vice versa).
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder.TypesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder.TypesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types>(requestInfo, global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.Types.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a collection of Observation Types from the Project&apos;s Company or from the Company,depending on which query parameter is used.NOTE: Though both query parameters are marked as required below, only one of the twoneeds to be passed in (i.e., if you pass in a project_id then you do not need to alsopass in a company_id, and vice versa).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder.TypesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder.TypesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.QualitySafety.Rest.V10.Observations.Types.TypesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a collection of Observation Types from the Project&apos;s Company or from the Company,depending on which query parameter is used.NOTE: Though both query parameters are marked as required below, only one of the twoneeds to be passed in (i.e., if you pass in a project_id then you do not need to alsopass in a company_id, and vice versa).
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TypesRequestBuilderGetQueryParameters 
        {
            /// <summary>Unique identifier for the company.</summary>
            [QueryParameter("company_id")]
            public int? CompanyId { get; set; }
            /// <summary>Page</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Elements per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Unique identifier for the project.</summary>
            [QueryParameter("project_id")]
            public int? ProjectId { get; set; }
        }
    }
}
#pragma warning restore CS0618
