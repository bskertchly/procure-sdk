// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\observations\items\{-id}\pdf
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PdfRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PdfRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/observations/items/{%2Did}/pdf?project_id={project_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PdfRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/observations/items/{%2Did}/pdf?project_id={project_id}", rawUrl)
        {
        }
        /// <summary>
        /// Return the PDF url for a specified Observation Item
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.Pdf400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.Pdf401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.Pdf403Error">When receiving a 403 status code</exception>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.Pdf404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfGetResponse?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder.PdfRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfGetResponse> GetAsync(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder.PdfRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.Pdf400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.Pdf401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.Pdf403Error.CreateFromDiscriminatorValue },
                { "404", global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.Pdf404Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfGetResponse>(requestInfo, global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Return the PDF url for a specified Observation Item
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder.PdfRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder.PdfRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.Pdf.PdfRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Return the PDF url for a specified Observation Item
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PdfRequestBuilderGetQueryParameters 
        {
            /// <summary>Unique identifier for the project.</summary>
            [QueryParameter("project_id")]
            public int? ProjectId { get; set; }
        }
    }
}
#pragma warning restore CS0618
