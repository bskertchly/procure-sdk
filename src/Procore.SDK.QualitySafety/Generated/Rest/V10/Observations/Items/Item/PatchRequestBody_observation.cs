// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item
{
    /// <summary>
    /// Item object
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PatchRequestBody_observation : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the Assignee of the Observation Item</summary>
        public int? AssigneeId { get; set; }
        /// <summary>Sets the origin to the ID of a Checklist Item (Note: the Item&apos;s origin can either be a coordination_issue_id, checklist_list_id or incident_action_id)</summary>
        public int? ChecklistItemId { get; set; }
        /// <summary>The ID of the Contributing Behavior associated to the Observation Item</summary>
        public int? ContributingBehaviorId { get; set; }
        /// <summary>The ID of the Contributing Condition associated to the Observation Item</summary>
        public int? ContributingConditionId { get; set; }
        /// <summary>Sets the origin to the ID of a Coordination Issue (Note: the Item&apos;s origin can either be a coordination_issue_id, checklist_list_id or incident_action_id)</summary>
        public int? CoordinationIssueId { get; set; }
        /// <summary>Value of the custom field. The data type of the value passed in corresponds with the data_type of the Custom Field Definition.For a lov_entry data_type the value passed in should be the ID of one of the Custom Field Definition&apos;s LOV Entries. For a lov_entries data_type the value passed in should be an array of IDs of the Custom Field Definition&apos;s LOV Entries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation.PatchRequestBody_observation_custom_field_Custom_field_definition_id? CustomFieldCustomFieldDefinitionId { get; set; }
#nullable restore
#else
        public global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation.PatchRequestBody_observation_custom_field_Custom_field_definition_id CustomFieldCustomFieldDefinitionId { get; set; }
#endif
        /// <summary>The Description of the Observation Item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>An array of the IDs of the Distribution Member of the Observation Item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? DistributionMemberIds { get; set; }
#nullable restore
#else
        public List<int?> DistributionMemberIds { get; set; }
#endif
        /// <summary>PDM document to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DocumentManagementDocumentRevisionIds { get; set; }
#nullable restore
#else
        public List<string> DocumentManagementDocumentRevisionIds { get; set; }
#endif
        /// <summary>Drawing Revisions to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? DrawingRevisionIds { get; set; }
#nullable restore
#else
        public List<int?> DrawingRevisionIds { get; set; }
#endif
        /// <summary>The Due Date of the Observation Item</summary>
        public Date? DueDate { get; set; }
        /// <summary>File Versions to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FileVersionIds { get; set; }
#nullable restore
#else
        public List<int?> FileVersionIds { get; set; }
#endif
        /// <summary>Forms to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? FormIds { get; set; }
#nullable restore
#else
        public List<int?> FormIds { get; set; }
#endif
        /// <summary>The ID of the Hazard associated to the Observation Item</summary>
        public int? HazardId { get; set; }
        /// <summary>Images to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ImageIds { get; set; }
#nullable restore
#else
        public List<int?> ImageIds { get; set; }
#endif
        /// <summary>Sets the origin to the ID of an Incident Action (Note: the Item&apos;s origin can either be a coordination_issue_id, checklist_list_id or incident_action_id)</summary>
        public int? IncidentActionId { get; set; }
        /// <summary>The ID of the Location of the Observation Item. Use either `location_id` or `mt_location` but not both.</summary>
        public int? LocationId { get; set; }
        /// <summary>Use this for creating a new multi-tier or single-tier Location. This will be ignored if `location_id` is provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MtLocation { get; set; }
#nullable restore
#else
        public List<string> MtLocation { get; set; }
#endif
        /// <summary>The Name of the Observation Item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Number of the Observation Item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>The Personal status of the Observation Item</summary>
        public bool? Personal { get; set; }
        /// <summary>The Priority of the Observation Item</summary>
        public global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation_priority? Priority { get; set; }
        /// <summary>The Status of the Observation Item. Enum: 0: Initiated, 1: Ready for Review, 2: Not Accepted, 3: Closed</summary>
        public global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation_status? Status { get; set; }
        /// <summary>The ID of the Trade of the Observation Item</summary>
        public int? TradeId { get; set; }
        /// <summary>The ID of the Type of the Observation Item</summary>
        public int? TypeId { get; set; }
        /// <summary>Uploads to attach to the response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UploadIds { get; set; }
#nullable restore
#else
        public List<string> UploadIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation"/> and sets the default values.
        /// </summary>
        public PatchRequestBody_observation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assignee_id", n => { AssigneeId = n.GetIntValue(); } },
                { "checklist_item_id", n => { ChecklistItemId = n.GetIntValue(); } },
                { "contributing_behavior_id", n => { ContributingBehaviorId = n.GetIntValue(); } },
                { "contributing_condition_id", n => { ContributingConditionId = n.GetIntValue(); } },
                { "coordination_issue_id", n => { CoordinationIssueId = n.GetIntValue(); } },
                { "custom_field_%{custom_field_definition_id}", n => { CustomFieldCustomFieldDefinitionId = n.GetObjectValue<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation.PatchRequestBody_observation_custom_field_Custom_field_definition_id>(global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation.PatchRequestBody_observation_custom_field_Custom_field_definition_id.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "distribution_member_ids", n => { DistributionMemberIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "document_management_document_revision_ids", n => { DocumentManagementDocumentRevisionIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "drawing_revision_ids", n => { DrawingRevisionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "due_date", n => { DueDate = n.GetDateValue(); } },
                { "file_version_ids", n => { FileVersionIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "form_ids", n => { FormIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "hazard_id", n => { HazardId = n.GetIntValue(); } },
                { "image_ids", n => { ImageIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "incident_action_id", n => { IncidentActionId = n.GetIntValue(); } },
                { "location_id", n => { LocationId = n.GetIntValue(); } },
                { "mt_location", n => { MtLocation = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "personal", n => { Personal = n.GetBoolValue(); } },
                { "priority", n => { Priority = n.GetEnumValue<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation_priority>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation_status>(); } },
                { "trade_id", n => { TradeId = n.GetIntValue(); } },
                { "type_id", n => { TypeId = n.GetIntValue(); } },
                { "upload_ids", n => { UploadIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("assignee_id", AssigneeId);
            writer.WriteIntValue("checklist_item_id", ChecklistItemId);
            writer.WriteIntValue("contributing_behavior_id", ContributingBehaviorId);
            writer.WriteIntValue("contributing_condition_id", ContributingConditionId);
            writer.WriteIntValue("coordination_issue_id", CoordinationIssueId);
            writer.WriteObjectValue<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation.PatchRequestBody_observation_custom_field_Custom_field_definition_id>("custom_field_%{custom_field_definition_id}", CustomFieldCustomFieldDefinitionId);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfPrimitiveValues<int?>("distribution_member_ids", DistributionMemberIds);
            writer.WriteCollectionOfPrimitiveValues<string>("document_management_document_revision_ids", DocumentManagementDocumentRevisionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("drawing_revision_ids", DrawingRevisionIds);
            writer.WriteDateValue("due_date", DueDate);
            writer.WriteCollectionOfPrimitiveValues<int?>("file_version_ids", FileVersionIds);
            writer.WriteCollectionOfPrimitiveValues<int?>("form_ids", FormIds);
            writer.WriteIntValue("hazard_id", HazardId);
            writer.WriteCollectionOfPrimitiveValues<int?>("image_ids", ImageIds);
            writer.WriteIntValue("incident_action_id", IncidentActionId);
            writer.WriteIntValue("location_id", LocationId);
            writer.WriteCollectionOfPrimitiveValues<string>("mt_location", MtLocation);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("number", Number);
            writer.WriteBoolValue("personal", Personal);
            writer.WriteEnumValue<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation_priority>("priority", Priority);
            writer.WriteEnumValue<global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation_status>("status", Status);
            writer.WriteIntValue("trade_id", TradeId);
            writer.WriteIntValue("type_id", TypeId);
            writer.WriteCollectionOfPrimitiveValues<string>("upload_ids", UploadIds);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="bool"/>, <see cref="double"/>, <see cref="string"/>, List&lt;int&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PatchRequestBody_observation_custom_field_Custom_field_definition_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="bool"/></summary>
            public bool? Boolean { get; set; }
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double { get; set; }
            /// <summary>Composed type representation for type List&lt;int&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<int?>? Integer { get; set; }
#nullable restore
#else
            public List<int?> Integer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation.PatchRequestBody_observation_custom_field_Custom_field_definition_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation.PatchRequestBody_observation_custom_field_Custom_field_definition_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Procore.SDK.QualitySafety.Rest.V10.Observations.Items.Item.PatchRequestBody_observation.PatchRequestBody_observation_custom_field_Custom_field_definition_id();
                if(parseNode.GetBoolValue() is bool booleanValue)
                {
                    result.Boolean = booleanValue;
                }
                else if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetCollectionOfPrimitiveValues<int?>()?.AsList() is List<int?> integerValue)
                {
                    result.Integer = integerValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Boolean != null)
                {
                    writer.WriteBoolValue(null, Boolean);
                }
                else if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(Integer != null)
                {
                    writer.WriteCollectionOfPrimitiveValues<int?>(null, Integer);
                }
            }
        }
    }
}
#pragma warning restore CS0618
