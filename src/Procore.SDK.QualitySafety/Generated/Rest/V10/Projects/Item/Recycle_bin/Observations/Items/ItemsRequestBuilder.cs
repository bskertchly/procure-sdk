// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items
{
    /// <summary>
    /// Builds and executes requests for operations under \rest\v1.0\projects\{project_id}\recycle_bin\observations\items
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ItemsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Procore.SDK.QualitySafety.rest.v10.projects.item.recycle_bin.observations.items.item collection</summary>
        /// <param name="position">Observation ID</param>
        /// <returns>A <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsItemRequestBuilder"/></returns>
        public global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Item.ItemsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ItemsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{project_id}/recycle_bin/observations/items{?filters%5Bassignee_company_id%5D,filters%5Bassignee_id%5D,filters%5Bcreated_by_id%5D,filters%5Blocation_id%5D,filters%5Bpriority%5D,filters%5Bstatus%5D,filters%5Btrade_ids%5D,filters%5Btype_id%5D,filters%5Bupdated_at%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ItemsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/v1.0/projects/{project_id}/recycle_bin/observations/items{?filters%5Bassignee_company_id%5D,filters%5Bassignee_id%5D,filters%5Bcreated_by_id%5D,filters%5Blocation_id%5D,filters%5Bpriority%5D,filters%5Bstatus%5D,filters%5Btrade_ids%5D,filters%5Btype_id%5D,filters%5Bupdated_at%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a collection of Recycled Observation Items.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A List&lt;global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items403Error">When receiving a 403 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items>?> GetAsync(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder.ItemsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items>> GetAsync(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder.ItemsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items400Error.CreateFromDiscriminatorValue },
                { "401", global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items401Error.CreateFromDiscriminatorValue },
                { "403", global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items403Error.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items>(requestInfo, global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.Items.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a collection of Recycled Observation Items.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder.ItemsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder.ItemsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.ItemsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a collection of Recycled Observation Items.See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ItemsRequestBuilderGetQueryParameters 
        {
            /// <summary>Array of Vendor IDs. Returns item(s) where the assignee is associated to the specified Vendor ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bassignee_company_id%5D")]
            public int?[]? FiltersassigneeCompanyId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bassignee_company_id%5D")]
            public int?[] FiltersassigneeCompanyId { get; set; }
#endif
            /// <summary>Return item(s) assigned to the specified User ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bassignee_id%5D")]
            public int?[]? FiltersassigneeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bassignee_id%5D")]
            public int?[] FiltersassigneeId { get; set; }
#endif
            /// <summary>Returns item(s) created by the specified User IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bcreated_by_id%5D")]
            public int?[]? FilterscreatedById { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bcreated_by_id%5D")]
            public int?[] FilterscreatedById { get; set; }
#endif
            /// <summary>Return item(s) with the specified Location IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[]? FilterslocationId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Blocation_id%5D")]
            public int?[] FilterslocationId { get; set; }
#endif
            /// <summary>Return item(s) with the specified priorities.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bpriority%5D")]
            public global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.GetFiltersPriorityQueryParameterType[]? Filterspriority { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bpriority%5D")]
            public global::Procore.SDK.QualitySafety.Rest.V10.Projects.Item.Recycle_bin.Observations.Items.GetFiltersPriorityQueryParameterType[] Filterspriority { get; set; }
#endif
            /// <summary>Return item(s) with the specified status values. The mapping is as follows:```  0: Initiated  1: Ready For reviewed  2: Not Accepted  3: Closed```</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bstatus%5D")]
            public int?[]? Filtersstatus { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bstatus%5D")]
            public int?[] Filtersstatus { get; set; }
#endif
            /// <summary>Array of Trade IDs. Returns item(s) with the specified Trade IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btrade_ids%5D")]
            public int?[]? FilterstradeIds { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btrade_ids%5D")]
            public int?[] FilterstradeIds { get; set; }
#endif
            /// <summary>Return item(s) with the specified Observation Type ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Btype_id%5D")]
            public int?[]? FilterstypeId { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Btype_id%5D")]
            public int?[] FilterstypeId { get; set; }
#endif
            /// <summary>Return item(s) last updated within the specified ISO 8601 datetime range.Formats:`YYYY-MM-DD`...`YYYY-MM-DD` - Date`YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset`YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset</summary>
            [QueryParameter("filters%5Bupdated_at%5D")]
            public Date? FiltersupdatedAt { get; set; }
        }
    }
}
#pragma warning restore CS0618
