using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Kiota.Http.HttpClientLibrary;
using Procore.SDK.Core.Models;

namespace Procore.SDK.Core.Tests.Integration;

/// <summary>
/// End-to-end integration tests for the CoreClient.
/// These tests verify that the wrapper client can successfully communicate
/// with the Procore API and handle real-world scenarios.
/// 
/// Note: These tests require valid Procore API credentials and should be run
/// against a test environment, not production.
/// </summary>
[Collection("Integration")]
public class EndToEndTests : IDisposable
{
    private readonly IServiceProvider _serviceProvider;
    private readonly ProcoreSDK.Core.CoreClient _coreClient;
    private readonly ILogger<EndToEndTests> _logger;
    private readonly bool _skipIntegrationTests;

    public EndToEndTests()
    {
        var configuration = new ConfigurationBuilder()
            .AddJsonFile("appsettings.test.json", optional: true)
            .AddEnvironmentVariables()
            .Build();

        var services = new ServiceCollection();
        services.AddLogging(builder => builder.AddConsole().SetMinimumLevel(LogLevel.Debug));
        
        // Check if integration tests should be skipped
        _skipIntegrationTests = string.IsNullOrEmpty(configuration["Procore:ClientId"]) ||
                               string.IsNullOrEmpty(configuration["Procore:ClientSecret"]);

        if (!_skipIntegrationTests)
        {
            // Configure Procore SDK
            services.AddProcoreSDK(options =>
            {
                options.ClientId = configuration["Procore:ClientId"]!;
                options.ClientSecret = configuration["Procore:ClientSecret"]!;
                options.BaseUrl = configuration["Procore:BaseUrl"] ?? "https://sandbox.procore.com";
                options.RedirectUri = configuration["Procore:RedirectUri"] ?? "http://localhost:8080/callback";
            });
        }

        _serviceProvider = services.BuildServiceProvider();
        _logger = _serviceProvider.GetRequiredService<ILogger<EndToEndTests>>();

        if (!_skipIntegrationTests)
        {
            _coreClient = _serviceProvider.GetRequiredService<ProcoreSDK.Core.CoreClient>();
        }
        else
        {
            // Create a mock client for when credentials are not available
            var mockRequestAdapter = Substitute.For<IRequestAdapter>();
            var mockTokenManager = Substitute.For<ITokenManager>();
            var mockLogger = Substitute.For<ILogger<CoreClient>>();
            var generatedClient = new CoreClient(mockRequestAdapter);
            _coreClient = new ProcoreSDK.Core.CoreClient(generatedClient, mockTokenManager, mockLogger);
        }
    }

    #region Authentication Flow Tests

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Authenticate_Successfully()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange & Act
        var currentUser = await _coreClient.GetCurrentUserAsync();

        // Assert
        currentUser.Should().NotBeNull();
        currentUser.Id.Should().BeGreaterThan(0);
        currentUser.Email.Should().NotBeNullOrEmpty();
        
        _logger.LogInformation("Successfully authenticated as user: {Email} (ID: {UserId})", 
            currentUser.Email, currentUser.Id);
    }

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Handle_Token_Refresh_In_Long_Session()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange - Get initial user
        var initialUser = await _coreClient.GetCurrentUserAsync();

        // Act - Simulate time passing (force token refresh by waiting)
        await Task.Delay(TimeSpan.FromSeconds(2));

        // Make another call that should trigger token refresh if needed
        var refreshedUser = await _coreClient.GetCurrentUserAsync();

        // Assert
        refreshedUser.Should().NotBeNull();
        refreshedUser.Id.Should().Be(initialUser.Id);
        refreshedUser.Email.Should().Be(initialUser.Email);
        
        _logger.LogInformation("Token refresh handled successfully for user: {Email}", refreshedUser.Email);
    }

    #endregion

    #region Company Operations Integration Tests

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Retrieve_Companies_Successfully()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange & Act
        var companies = await _coreClient.GetCompaniesAsync();

        // Assert
        companies.Should().NotBeNull();
        companies.Should().NotBeEmpty("User should have access to at least one company");
        
        var firstCompany = companies.First();
        firstCompany.Id.Should().BeGreaterThan(0);
        firstCompany.Name.Should().NotBeNullOrEmpty();
        firstCompany.IsActive.Should().BeTrue();

        _logger.LogInformation("Retrieved {CompanyCount} companies. First company: {CompanyName} (ID: {CompanyId})", 
            companies.Count(), firstCompany.Name, firstCompany.Id);
    }

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Retrieve_Single_Company_Successfully()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange - Get list of companies to find a valid ID
        var companies = await _coreClient.GetCompaniesAsync();
        var companyId = companies.First().Id;

        // Act
        var company = await _coreClient.GetCompanyAsync(companyId);

        // Assert
        company.Should().NotBeNull();
        company.Id.Should().Be(companyId);
        company.Name.Should().NotBeNullOrEmpty();
        company.CreatedAt.Should().BeAfter(DateTime.MinValue);
        company.UpdatedAt.Should().BeAfter(DateTime.MinValue);

        _logger.LogInformation("Retrieved company: {CompanyName} (ID: {CompanyId}, Active: {IsActive})", 
            company.Name, company.Id, company.IsActive);
    }

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Handle_Company_Not_Found()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange - Use a company ID that definitely doesn't exist
        const int nonExistentCompanyId = 999999999;

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ResourceNotFoundException>(
            () => _coreClient.GetCompanyAsync(nonExistentCompanyId));

        exception.Message.Should().Contain("Company");
        exception.Message.Should().Contain(nonExistentCompanyId.ToString());
        
        _logger.LogInformation("Correctly handled non-existent company ID: {CompanyId}", nonExistentCompanyId);
    }

    #endregion

    #region User Operations Integration Tests

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Retrieve_Users_For_Company()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange - Get a valid company ID
        var companies = await _coreClient.GetCompaniesAsync();
        var companyId = companies.First().Id;

        // Act
        var users = await _coreClient.GetUsersAsync(companyId);

        // Assert
        users.Should().NotBeNull();
        users.Should().NotBeEmpty("Company should have at least one user");
        
        var firstUser = users.First();
        firstUser.Id.Should().BeGreaterThan(0);
        firstUser.Email.Should().NotBeNullOrEmpty();
        firstUser.FirstName.Should().NotBeNullOrEmpty();
        firstUser.LastName.Should().NotBeNullOrEmpty();

        _logger.LogInformation("Retrieved {UserCount} users for company {CompanyId}. First user: {UserEmail} (ID: {UserId})", 
            users.Count(), companyId, firstUser.Email, firstUser.Id);
    }

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Search_Users_Successfully()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange - Get current user info to search for
        var currentUser = await _coreClient.GetCurrentUserAsync();
        var companies = await _coreClient.GetCompaniesAsync();
        var companyId = companies.First().Id;
        
        var searchTerm = currentUser.FirstName[..Math.Min(3, currentUser.FirstName.Length)]; // First 3 chars

        // Act
        var searchResults = await _coreClient.SearchUsersAsync(companyId, searchTerm);

        // Assert
        searchResults.Should().NotBeNull();
        searchResults.Should().Contain(u => u.Id == currentUser.Id, 
            "Search should find the current user");

        _logger.LogInformation("Search for '{SearchTerm}' returned {ResultCount} users", 
            searchTerm, searchResults.Count());
    }

    #endregion

    #region Pagination Integration Tests

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Support_Pagination_For_Companies()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange
        var paginationOptions = new PaginationOptions
        {
            Page = 1,
            PerPage = 2, // Small page size to test pagination
            SortBy = "name",
            SortDirection = "asc"
        };

        // Act
        var pagedResult = await _coreClient.GetCompaniesPagedAsync(paginationOptions);

        // Assert
        pagedResult.Should().NotBeNull();
        pagedResult.Items.Should().NotBeNull();
        pagedResult.Page.Should().Be(1);
        pagedResult.PerPage.Should().Be(2);
        pagedResult.TotalCount.Should().BeGreaterThan(0);
        
        if (pagedResult.TotalCount > 2)
        {
            pagedResult.HasNextPage.Should().BeTrue();
            pagedResult.TotalPages.Should().BeGreaterThan(1);
        }

        _logger.LogInformation("Pagination test: Page {Page}/{TotalPages}, {ItemCount} items, Total: {TotalCount}", 
            pagedResult.Page, pagedResult.TotalPages, pagedResult.Items.Count(), pagedResult.TotalCount);
    }

    #endregion

    #region Error Handling Integration Tests

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Handle_Rate_Limiting_Gracefully()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange - Make rapid successive calls to potentially trigger rate limiting
        var companies = await _coreClient.GetCompaniesAsync();
        var companyId = companies.First().Id;

        var tasks = new List<Task>();
        for (int i = 0; i < 10; i++)
        {
            tasks.Add(_coreClient.GetCompanyAsync(companyId));
        }

        // Act & Assert
        try
        {
            await Task.WhenAll(tasks);
            _logger.LogInformation("All rapid requests completed successfully - no rate limiting encountered");
        }
        catch (RateLimitExceededException rateLimitEx)
        {
            _logger.LogInformation("Rate limiting handled correctly. Retry after: {RetryAfter} seconds", 
                rateLimitEx.RetryAfter.TotalSeconds);
            
            rateLimitEx.ErrorCode.Should().Be("RATE_LIMIT_EXCEEDED");
            rateLimitEx.RetryAfter.Should().BeGreaterThan(TimeSpan.Zero);
        }
    }

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Handle_Network_Timeouts()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange - Create a cancellation token with very short timeout
        using var cts = new CancellationTokenSource(TimeSpan.FromMilliseconds(1));

        // Act & Assert
        var exception = await Assert.ThrowsAnyAsync<OperationCanceledException>(
            () => _coreClient.GetCompaniesAsync(cts.Token));

        _logger.LogInformation("Timeout handling verified: {ExceptionType}", exception.GetType().Name);
    }

    #endregion

    #region Performance Tests

    [Fact]
    [Trait("Category", "Integration")]
    [Trait("Category", "Performance")]
    public async Task CoreClient_Should_Perform_Within_Acceptable_Limits()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        // Act
        var companies = await _coreClient.GetCompaniesAsync();
        stopwatch.Stop();

        // Assert
        var elapsedMs = stopwatch.ElapsedMilliseconds;
        elapsedMs.Should().BeLessThan(5000, "API call should complete within 5 seconds");
        
        companies.Should().NotBeEmpty();

        _logger.LogInformation("Performance test: Retrieved {CompanyCount} companies in {ElapsedMs}ms", 
            companies.Count(), elapsedMs);
    }

    #endregion

    #region Concurrent Operations Tests

    [Fact]
    [Trait("Category", "Integration")]
    public async Task CoreClient_Should_Handle_Concurrent_Requests()
    {
        // Skip if no credentials
        if (_skipIntegrationTests)
        {
            _logger.LogWarning("Skipping integration test - no credentials configured");
            return;
        }

        // Arrange
        var concurrentTasks = new List<Task<IEnumerable<Company>>>();
        
        for (int i = 0; i < 5; i++)
        {
            concurrentTasks.Add(_coreClient.GetCompaniesAsync());
        }

        // Act
        var results = await Task.WhenAll(concurrentTasks);

        // Assert
        results.Should().AllSatisfy(companies =>
        {
            companies.Should().NotBeNull();
            companies.Should().NotBeEmpty();
        });

        // All results should be consistent
        var firstResult = results[0];
        foreach (var result in results)
        {
            result.Count().Should().Be(firstResult.Count());
        }

        _logger.LogInformation("Concurrent requests test: {TaskCount} tasks completed, {CompanyCount} companies each", 
            concurrentTasks.Count, firstResult.Count());
    }

    #endregion

    public void Dispose()
    {
        _coreClient?.Dispose();
        _serviceProvider?.Dispose();
    }
}

/// <summary>
/// Integration test configuration settings
/// </summary>
public class ProcoreIntegrationSettings
{
    public string? ClientId { get; set; }
    public string? ClientSecret { get; set; }
    public string? BaseUrl { get; set; }
    public string? RedirectUri { get; set; }
    public string? AccessToken { get; set; }
    public string? RefreshToken { get; set; }
}

/// <summary>
/// Test collection to ensure integration tests run sequentially
/// </summary>
[CollectionDefinition("Integration")]
public class IntegrationTestCollection : ICollectionFixture<IntegrationTestFixture>
{
}

/// <summary>
/// Shared fixture for integration tests
/// </summary>
public class IntegrationTestFixture : IDisposable
{
    public IntegrationTestFixture()
    {
        // Initialize any shared resources for integration tests
    }

    public void Dispose()
    {
        // Cleanup shared resources
    }
}