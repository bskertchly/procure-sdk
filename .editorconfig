# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
charset = utf-8
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true

# Code files
[*.{cs,csx,vb,vbx}]
indent_style = space
indent_size = 4

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_style = space
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_style = space
indent_size = 2

# JSON files
[*.{json,json5,webmanifest}]
indent_style = space
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_style = space
indent_size = 2

# Markdown files
[*.{md,mdx}]
trim_trailing_whitespace = false

# Web files
[*.{htm,html,js,jsm,ts,tsx,css,sass,scss,less,svg,vue}]
indent_style = space
indent_size = 2

# Batch files
[*.{cmd,bat}]
end_of_line = crlf

# Shell scripts
[*.sh]
end_of_line = lf

############################### 
# .NET Coding Conventions     #
###############################

[*.{cs,vb}]

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:suggestion
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_property = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

# Expression-level preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion

# Field preferences
dotnet_style_readonly_field = true:suggestion

# Parameter preferences
dotnet_code_quality_unused_parameters = all:suggestion

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

############################### 
# C# Coding Conventions       #
###############################

[*.cs]

# var preferences
csharp_style_var_elsewhere = false:suggestion
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion
csharp_style_expression_bodied_properties = true:suggestion

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_switch_expression = true:suggestion

# Null-checking preferences
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_prefer_static_local_functions = true:suggestion
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Code-block preferences
csharp_prefer_braces = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:suggestion

############################### 
# C# Formatting Rules         #
###############################

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

############################### 
# .NET Naming Conventions     #
###############################

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization             = pascal_case

dotnet_naming_style.camel_case_style.capitalization              = camel_case

dotnet_naming_style.I_prefix_style.capitalization               = pascal_case
dotnet_naming_style.I_prefix_style.required_prefix              = I

dotnet_naming_style.underscore_prefix_style.capitalization      = camel_case
dotnet_naming_style.underscore_prefix_style.required_prefix     = _

# Use PascalCase for constant fields  
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds            = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities = *
dotnet_naming_symbols.constant_fields.required_modifiers          = const

# Use PascalCase for public fields
dotnet_naming_rule.pascal_case_for_public_fields.severity         = suggestion
dotnet_naming_rule.pascal_case_for_public_fields.symbols          = public_fields
dotnet_naming_rule.pascal_case_for_public_fields.style            = pascal_case_style
dotnet_naming_symbols.public_fields.applicable_kinds             = field
dotnet_naming_symbols.public_fields.applicable_accessibilities   = public

# Interfaces must be PrefixedWithI
dotnet_naming_rule.interfaces_start_with_I.severity              = warning
dotnet_naming_rule.interfaces_start_with_I.symbols               = any_interface
dotnet_naming_rule.interfaces_start_with_I.style                 = I_prefix_style
dotnet_naming_symbols.any_interface.applicable_kinds             = interface
dotnet_naming_symbols.any_interface.applicable_accessibilities   = *

# Classes, structs, methods, enums, events, properties, namespaces, delegates must be PascalCase
dotnet_naming_rule.general_naming.severity                       = warning
dotnet_naming_rule.general_naming.symbols                        = general
dotnet_naming_rule.general_naming.style                          = pascal_case_style
dotnet_naming_symbols.general.applicable_kinds                   = class,struct,enum,property,method,event,namespace,delegate
dotnet_naming_symbols.general.applicable_accessibilities         = *

# Everything else is camelCase
dotnet_naming_rule.everything_else.severity                      = suggestion
dotnet_naming_rule.everything_else.symbols                       = everything_else
dotnet_naming_rule.everything_else.style                         = camel_case_style
dotnet_naming_symbols.everything_else.applicable_kinds           = *
dotnet_naming_symbols.everything_else.applicable_accessibilities = *

############################### 
# Analyzer Rules              #
###############################

# Microsoft.CodeAnalysis.NetAnalyzers
dotnet_diagnostic.CA1031.severity = suggestion  # Do not catch general exception types
dotnet_diagnostic.CA1062.severity = suggestion  # Validate arguments of public methods
dotnet_diagnostic.CA1303.severity = suggestion  # Do not pass literals as localized parameters
dotnet_diagnostic.CA1305.severity = suggestion  # Specify IFormatProvider
dotnet_diagnostic.CA1307.severity = suggestion  # Specify StringComparison for clarity
dotnet_diagnostic.CA1308.severity = suggestion  # Normalize strings to uppercase
dotnet_diagnostic.CA1310.severity = suggestion  # Specify StringComparison for correctness
dotnet_diagnostic.CA1401.severity = warning     # P/Invokes should not be visible
dotnet_diagnostic.CA1416.severity = warning     # Validate platform compatibility
dotnet_diagnostic.CA1417.severity = warning     # Do not use OutAttribute on string parameters for P/Invokes
dotnet_diagnostic.CA1418.severity = warning     # Use valid platform string
dotnet_diagnostic.CA1419.severity = warning     # Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
dotnet_diagnostic.CA1420.severity = warning     # Property, type, or attribute requires runtime marshalling
dotnet_diagnostic.CA1421.severity = warning     # This method uses runtime marshalling even when the 'DisableRuntimeMarshallingAttribute' is applied
dotnet_diagnostic.CA1422.severity = warning     # Validate platform compatibility
dotnet_diagnostic.CA1501.severity = suggestion  # Avoid excessive inheritance
dotnet_diagnostic.CA1502.severity = suggestion  # Avoid excessive complexity
dotnet_diagnostic.CA1505.severity = suggestion  # Avoid unmaintainable code
dotnet_diagnostic.CA1506.severity = suggestion  # Avoid excessive class coupling
dotnet_diagnostic.CA1507.severity = suggestion  # Use nameof in place of string
dotnet_diagnostic.CA1508.severity = suggestion  # Avoid dead conditional code
dotnet_diagnostic.CA1509.severity = suggestion  # Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1700.severity = suggestion  # Do not name enum values 'Reserved'
dotnet_diagnostic.CA1707.severity = suggestion  # Identifiers should not contain underscores
dotnet_diagnostic.CA1708.severity = suggestion  # Identifiers should differ by more than case
dotnet_diagnostic.CA1710.severity = suggestion  # Identifiers should have correct suffix
dotnet_diagnostic.CA1711.severity = suggestion  # Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1712.severity = suggestion  # Do not prefix enum values with type name
dotnet_diagnostic.CA1713.severity = suggestion  # Events should not have 'Before' or 'After' prefix
dotnet_diagnostic.CA1714.severity = suggestion  # Flags enums should have plural names
dotnet_diagnostic.CA1715.severity = suggestion  # Identifiers should have correct prefix
dotnet_diagnostic.CA1716.severity = suggestion  # Identifiers should not match keywords
dotnet_diagnostic.CA1717.severity = suggestion  # Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1720.severity = suggestion  # Identifier contains type name
dotnet_diagnostic.CA1721.severity = suggestion  # Property names should not match get methods
dotnet_diagnostic.CA1724.severity = suggestion  # Type names should not match namespaces
dotnet_diagnostic.CA1725.severity = suggestion  # Parameter names should match base declaration
dotnet_diagnostic.CA1801.severity = suggestion  # Review unused parameters
dotnet_diagnostic.CA1802.severity = suggestion  # Use literals where appropriate
dotnet_diagnostic.CA1805.severity = suggestion  # Do not initialize unnecessarily
dotnet_diagnostic.CA1806.severity = warning     # Do not ignore method results
dotnet_diagnostic.CA1834.severity = suggestion  # Consider using 'StringBuilder.Append(char)' when applicable
dotnet_diagnostic.CA1835.severity = suggestion  # Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1836.severity = suggestion  # Prefer IsEmpty over Count
dotnet_diagnostic.CA1837.severity = suggestion  # Use 'Environment.ProcessId'
dotnet_diagnostic.CA1838.severity = suggestion  # Avoid 'StringBuilder' parameters for P/Invokes
dotnet_diagnostic.CA1839.severity = suggestion  # Use 'Environment.ProcessPath'
dotnet_diagnostic.CA1840.severity = suggestion  # Use 'Environment.CurrentManagedThreadId'
dotnet_diagnostic.CA1841.severity = suggestion  # Prefer Dictionary.Contains methods
dotnet_diagnostic.CA1842.severity = suggestion  # Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1843.severity = suggestion  # Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1844.severity = suggestion  # Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1845.severity = suggestion  # Use span-based 'string.Concat'
dotnet_diagnostic.CA1846.severity = suggestion  # Prefer 'AsSpan' over 'Substring'
dotnet_diagnostic.CA1847.severity = suggestion  # Use char literal for a single character lookup
dotnet_diagnostic.CA1848.severity = suggestion  # Use the LoggerMessage delegates
dotnet_diagnostic.CA1849.severity = suggestion  # Call async methods when in an async method
dotnet_diagnostic.CA1850.severity = suggestion  # Prefer static 'HashData' method over 'ComputeHash'
dotnet_diagnostic.CA2007.severity = suggestion  # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2008.severity = warning     # Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2009.severity = warning     # Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2011.severity = warning     # Avoid infinite recursion
dotnet_diagnostic.CA2012.severity = warning     # Use ValueTasks correctly
dotnet_diagnostic.CA2013.severity = warning     # Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2014.severity = warning     # Do not use stackalloc in loops
dotnet_diagnostic.CA2016.severity = warning     # Forward the 'CancellationToken' parameter to methods

# SonarAnalyzer.CSharp
dotnet_diagnostic.S1135.severity = suggestion   # Track uses of "TODO" tags
dotnet_diagnostic.S1134.severity = suggestion   # Track uses of "FIXME" tags
dotnet_diagnostic.S125.severity = suggestion    # Sections of code should not be commented out
dotnet_diagnostic.S1451.severity = none         # Copyright and license headers (disabled)

# StyleCop.Analyzers
dotnet_diagnostic.SA1101.severity = none        # Prefix local calls with this
dotnet_diagnostic.SA1200.severity = none        # Using directives should be placed correctly
dotnet_diagnostic.SA1309.severity = none        # Field names should not begin with underscore
dotnet_diagnostic.SA1633.severity = none        # File should have header
dotnet_diagnostic.SA1652.severity = suggestion  # Enable XML documentation output